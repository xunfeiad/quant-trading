<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1094" onload="init(evt)" viewBox="0 0 1200 1094" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1094" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1077.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1077.00"> </text><svg id="frames" x="10" width="1180" total_samples="3871"><g><title>0x1051b27cf (1 samples, 0.03%)</title><rect x="0.0000%" y="1029" width="0.0258%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1039.50"></text></g><g><title>0x1051f7d03 (1 samples, 0.03%)</title><rect x="0.0000%" y="1013" width="0.0258%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1023.50"></text></g><g><title>0x1051e309b (1 samples, 0.03%)</title><rect x="0.0000%" y="997" width="0.0258%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1007.50"></text></g><g><title>0x1051e2ac3 (1 samples, 0.03%)</title><rect x="0.0000%" y="981" width="0.0258%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="991.50"></text></g><g><title>0x10521038d (1 samples, 0.03%)</title><rect x="0.0000%" y="965" width="0.0258%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="975.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUpPlusUpwardLinks(dyld4::RuntimeState&amp;) const (1 samples, 0.03%)</title><rect x="0.0258%" y="965" width="0.0258%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.2758%" y="975.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUpPlusUpwardLinks(dyld4::RuntimeState&amp;) const::$_0::operator()() const (1 samples, 0.03%)</title><rect x="0.0258%" y="949" width="0.0258%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.2758%" y="959.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 0.03%)</title><rect x="0.0258%" y="933" width="0.0258%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.2758%" y="943.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 0.03%)</title><rect x="0.0258%" y="917" width="0.0258%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.2758%" y="927.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 0.03%)</title><rect x="0.0258%" y="901" width="0.0258%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.2758%" y="911.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 0.03%)</title><rect x="0.0258%" y="885" width="0.0258%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.2758%" y="895.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 0.03%)</title><rect x="0.0258%" y="869" width="0.0258%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="0.2758%" y="879.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 0.03%)</title><rect x="0.0258%" y="853" width="0.0258%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="1"/><text x="0.2758%" y="863.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 0.03%)</title><rect x="0.0258%" y="837" width="0.0258%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="1"/><text x="0.2758%" y="847.50"></text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 0.03%)</title><rect x="0.0258%" y="821" width="0.0258%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="1"/><text x="0.2758%" y="831.50"></text></g><g><title>dyld4::APIs::runAllInitializersForMain() (2 samples, 0.05%)</title><rect x="0.0258%" y="981" width="0.0517%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="2"/><text x="0.2758%" y="991.50"></text></g><g><title>dyld4::PrebuiltLoader::runInitializers(dyld4::RuntimeState&amp;) const (1 samples, 0.03%)</title><rect x="0.0517%" y="965" width="0.0258%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="1"/><text x="0.3017%" y="975.50"></text></g><g><title>dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (1 samples, 0.03%)</title><rect x="0.0517%" y="949" width="0.0258%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="1"/><text x="0.3017%" y="959.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (1 samples, 0.03%)</title><rect x="0.0517%" y="933" width="0.0258%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="1"/><text x="0.3017%" y="943.50"></text></g><g><title>mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.03%)</title><rect x="0.0517%" y="917" width="0.0258%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="1"/><text x="0.3017%" y="927.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (1 samples, 0.03%)</title><rect x="0.0517%" y="901" width="0.0258%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="1"/><text x="0.3017%" y="911.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.03%)</title><rect x="0.0517%" y="885" width="0.0258%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="1"/><text x="0.3017%" y="895.50"></text></g><g><title>invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (1 samples, 0.03%)</title><rect x="0.0517%" y="869" width="0.0258%" height="15" fill="rgb(221,5,38)" fg:x="2" fg:w="1"/><text x="0.3017%" y="879.50"></text></g><g><title>invocation function for block in dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (1 samples, 0.03%)</title><rect x="0.0517%" y="853" width="0.0258%" height="15" fill="rgb(247,18,42)" fg:x="2" fg:w="1"/><text x="0.3017%" y="863.50"></text></g><g><title>libSystem_initializer (1 samples, 0.03%)</title><rect x="0.0517%" y="837" width="0.0258%" height="15" fill="rgb(241,131,45)" fg:x="2" fg:w="1"/><text x="0.3017%" y="847.50"></text></g><g><title>libdispatch_init (1 samples, 0.03%)</title><rect x="0.0517%" y="821" width="0.0258%" height="15" fill="rgb(249,31,29)" fg:x="2" fg:w="1"/><text x="0.3017%" y="831.50"></text></g><g><title>_os_object_init (1 samples, 0.03%)</title><rect x="0.0517%" y="805" width="0.0258%" height="15" fill="rgb(225,111,53)" fg:x="2" fg:w="1"/><text x="0.3017%" y="815.50"></text></g><g><title>_objc_init (1 samples, 0.03%)</title><rect x="0.0517%" y="789" width="0.0258%" height="15" fill="rgb(238,160,17)" fg:x="2" fg:w="1"/><text x="0.3017%" y="799.50"></text></g><g><title>_dyld_objc_register_callbacks (1 samples, 0.03%)</title><rect x="0.0517%" y="773" width="0.0258%" height="15" fill="rgb(214,148,48)" fg:x="2" fg:w="1"/><text x="0.3017%" y="783.50"></text></g><g><title>dyld4::APIs::_dyld_objc_register_callbacks(dyld4::ObjCCallbacks const*) (1 samples, 0.03%)</title><rect x="0.0517%" y="757" width="0.0258%" height="15" fill="rgb(232,36,49)" fg:x="2" fg:w="1"/><text x="0.3017%" y="767.50"></text></g><g><title>dyld4::RuntimeState::setObjCNotifiers(dyld4::ReadOnlyCallback&lt;void (*)(char const*, mach_header const*)&gt;, dyld4::ReadOnlyCallback&lt;void (*)(mach_header const*, void*, mach_header const*, void const*)&gt;, dyld4::ReadOnlyCallback&lt;void (*)(_dyld_objc_notify_mapped_info const*)&gt;, dyld4::ReadOnlyCallback&lt;void (*)(unsigned int, _dyld_objc_notify_mapped_info const*, void (unsigned int) block_pointer)&gt;) (1 samples, 0.03%)</title><rect x="0.0517%" y="741" width="0.0258%" height="15" fill="rgb(209,103,24)" fg:x="2" fg:w="1"/><text x="0.3017%" y="751.50"></text></g><g><title>dyld4::RuntimeLocks::withLoadersReadLock(void () block_pointer) (1 samples, 0.03%)</title><rect x="0.0517%" y="725" width="0.0258%" height="15" fill="rgb(229,88,8)" fg:x="2" fg:w="1"/><text x="0.3017%" y="735.50"></text></g><g><title>invocation function for block in dyld4::RuntimeState::setObjCNotifiers(dyld4::ReadOnlyCallback&lt;void (*)(char const*, mach_header const*)&gt;, dyld4::ReadOnlyCallback&lt;void (*)(mach_header const*, void*, mach_header const*, void const*)&gt;, dyld4::ReadOnlyCallback&lt;void (*)(_dyld_objc_notify_mapped_info const*)&gt;, dyld4::ReadOnlyCallback&lt;void (*)(unsigned int, _dyld_objc_notify_mapped_info const*, void (unsigned int) block_pointer)&gt;)::$_0::operator()() const (1 samples, 0.03%)</title><rect x="0.0517%" y="709" width="0.0258%" height="15" fill="rgb(213,181,19)" fg:x="2" fg:w="1"/><text x="0.3017%" y="719.50"></text></g><g><title>map_images (1 samples, 0.03%)</title><rect x="0.0517%" y="693" width="0.0258%" height="15" fill="rgb(254,191,54)" fg:x="2" fg:w="1"/><text x="0.3017%" y="703.50"></text></g><g><title>map_images_nolock (1 samples, 0.03%)</title><rect x="0.0517%" y="677" width="0.0258%" height="15" fill="rgb(241,83,37)" fg:x="2" fg:w="1"/><text x="0.3017%" y="687.50"></text></g><g><title>addClassTableEntry(objc_class*, bool) (1 samples, 0.03%)</title><rect x="0.0517%" y="661" width="0.0258%" height="15" fill="rgb(233,36,39)" fg:x="2" fg:w="1"/><text x="0.3017%" y="671.50"></text></g><g><title>dataSegmentsContain(objc_class*) (1 samples, 0.03%)</title><rect x="0.0517%" y="645" width="0.0258%" height="15" fill="rgb(226,3,54)" fg:x="2" fg:w="1"/><text x="0.3017%" y="655.50"></text></g><g><title>objc::SafeRanges::find(unsigned long, unsigned int&amp;) (1 samples, 0.03%)</title><rect x="0.0517%" y="629" width="0.0258%" height="15" fill="rgb(245,192,40)" fg:x="2" fg:w="1"/><text x="0.3017%" y="639.50"></text></g><g><title>void std::__1::__introsort&lt;std::__1::_ClassicAlgPolicy, objc::SafeRanges::find(unsigned long, unsigned int&amp;)::$_0&amp;, objc::SafeRanges::Range*, false&gt;(objc::SafeRanges::Range*, objc::SafeRanges::Range*, objc::SafeRanges::find(unsigned long, unsigned int&amp;)::$_0&amp;, std::__1::iterator_traits&lt;objc::SafeRanges::Range*&gt;::difference_type, bool) (1 samples, 0.03%)</title><rect x="0.0517%" y="613" width="0.0258%" height="15" fill="rgb(238,167,29)" fg:x="2" fg:w="1"/><text x="0.3017%" y="623.50"></text></g><g><title>dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator()() const (3 samples, 0.08%)</title><rect x="0.0258%" y="1013" width="0.0775%" height="15" fill="rgb(232,182,51)" fg:x="1" fg:w="3"/><text x="0.2758%" y="1023.50"></text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, mach_o::Header const*) (3 samples, 0.08%)</title><rect x="0.0258%" y="997" width="0.0775%" height="15" fill="rgb(231,60,39)" fg:x="1" fg:w="3"/><text x="0.2758%" y="1007.50"></text></g><g><title>dyld4::JustInTimeLoader::applyFixups(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::DyldCacheDataConstLazyScopedWriter&amp;, bool, lsl::Vector&lt;std::__1::pair&lt;dyld4::Loader const*, char const*&gt;&gt;*) const (1 samples, 0.03%)</title><rect x="0.0775%" y="981" width="0.0258%" height="15" fill="rgb(208,69,12)" fg:x="3" fg:w="1"/><text x="0.3275%" y="991.50"></text></g><g><title>dyld4::Loader::applyFixupsGeneric(Diagnostics&amp;, dyld4::RuntimeState&amp;, unsigned long long, dyld3::Array&lt;void const*&gt; const&amp;, dyld3::Array&lt;void const*&gt; const&amp;, bool, dyld3::Array&lt;dyld4::Loader::MissingFlatLazySymbol&gt; const&amp;) const (1 samples, 0.03%)</title><rect x="0.0775%" y="965" width="0.0258%" height="15" fill="rgb(235,93,37)" fg:x="3" fg:w="1"/><text x="0.3275%" y="975.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachRebaseLocation_Opcodes(Diagnostics&amp;, void (unsigned long long, bool&amp;) block_pointer) const (1 samples, 0.03%)</title><rect x="0.0775%" y="949" width="0.0258%" height="15" fill="rgb(213,116,39)" fg:x="3" fg:w="1"/><text x="0.3275%" y="959.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachRebase_Opcodes(Diagnostics&amp;, dyld3::MachOLoaded::LinkEditInfo const&amp;, mach_o::Header::SegmentInfo const*, void (char const*, dyld3::MachOLoaded::LinkEditInfo const&amp;, mach_o::Header::SegmentInfo const*, bool, unsigned int, unsigned char, unsigned long long, dyld3::MachOAnalyzer::Rebase, bool&amp;) block_pointer) const (1 samples, 0.03%)</title><rect x="0.0775%" y="933" width="0.0258%" height="15" fill="rgb(222,207,29)" fg:x="3" fg:w="1"/><text x="0.3275%" y="943.50"></text></g><g><title>invocation function for block in dyld4::Loader::applyFixupsGeneric(Diagnostics&amp;, dyld4::RuntimeState&amp;, unsigned long long, dyld3::Array&lt;void const*&gt; const&amp;, dyld3::Array&lt;void const*&gt; const&amp;, bool, dyld3::Array&lt;dyld4::Loader::MissingFlatLazySymbol&gt; const&amp;) const (1 samples, 0.03%)</title><rect x="0.0775%" y="917" width="0.0258%" height="15" fill="rgb(206,96,30)" fg:x="3" fg:w="1"/><text x="0.3275%" y="927.50"></text></g><g><title>&lt;alloc::string::String as tungstenite::client::IntoClientRequest&gt;::into_client_request (1 samples, 0.03%)</title><rect x="0.1033%" y="869" width="0.0258%" height="15" fill="rgb(218,138,4)" fg:x="4" fg:w="1"/><text x="0.3533%" y="879.50"></text></g><g><title>bytes::bytes::Bytes::copy_from_slice (1 samples, 0.03%)</title><rect x="0.1033%" y="853" width="0.0258%" height="15" fill="rgb(250,191,14)" fg:x="4" fg:w="1"/><text x="0.3533%" y="863.50"></text></g><g><title>&lt;tokio_tungstenite::handshake::MidHandshake&lt;Role&gt; as core::future::future::Future&gt;::poll (1 samples, 0.03%)</title><rect x="0.1292%" y="869" width="0.0258%" height="15" fill="rgb(239,60,40)" fg:x="5" fg:w="1"/><text x="0.3792%" y="879.50"></text></g><g><title>tungstenite::handshake::MidHandshake&lt;Role&gt;::handshake (1 samples, 0.03%)</title><rect x="0.1292%" y="853" width="0.0258%" height="15" fill="rgb(206,27,48)" fg:x="5" fg:w="1"/><text x="0.3792%" y="863.50"></text></g><g><title>tungstenite::handshake::machine::HandshakeMachine&lt;Stream&gt;::single_round (1 samples, 0.03%)</title><rect x="0.1292%" y="837" width="0.0258%" height="15" fill="rgb(225,35,8)" fg:x="5" fg:w="1"/><text x="0.3792%" y="847.50"></text></g><g><title>tungstenite::handshake::client::_&lt;impl tungstenite::handshake::machine::TryParse for http::response::Response&lt;core::option::Option&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;&gt;::try_parse (1 samples, 0.03%)</title><rect x="0.1292%" y="821" width="0.0258%" height="15" fill="rgb(250,213,24)" fg:x="5" fg:w="1"/><text x="0.3792%" y="831.50"></text></g><g><title>httparse::Response::parse (1 samples, 0.03%)</title><rect x="0.1292%" y="805" width="0.0258%" height="15" fill="rgb(247,123,22)" fg:x="5" fg:w="1"/><text x="0.3792%" y="815.50"></text></g><g><title>httparse::Response::parse_with_config_and_uninit_headers (1 samples, 0.03%)</title><rect x="0.1292%" y="789" width="0.0258%" height="15" fill="rgb(231,138,38)" fg:x="5" fg:w="1"/><text x="0.3792%" y="799.50"></text></g><g><title>httparse::parse_headers_iter_uninit (1 samples, 0.03%)</title><rect x="0.1292%" y="773" width="0.0258%" height="15" fill="rgb(231,145,46)" fg:x="5" fg:w="1"/><text x="0.3792%" y="783.50"></text></g><g><title>&lt;tokio_tungstenite::handshake::StartedHandshakeFuture&lt;F,S&gt; as core::future::future::Future&gt;::poll (1 samples, 0.03%)</title><rect x="0.1550%" y="869" width="0.0258%" height="15" fill="rgb(251,118,11)" fg:x="6" fg:w="1"/><text x="0.4050%" y="879.50"></text></g><g><title>tungstenite::handshake::MidHandshake&lt;Role&gt;::handshake (1 samples, 0.03%)</title><rect x="0.1550%" y="853" width="0.0258%" height="15" fill="rgb(217,147,25)" fg:x="6" fg:w="1"/><text x="0.4050%" y="863.50"></text></g><g><title>tungstenite::handshake::machine::HandshakeMachine&lt;Stream&gt;::single_round (1 samples, 0.03%)</title><rect x="0.1550%" y="837" width="0.0258%" height="15" fill="rgb(247,81,37)" fg:x="6" fg:w="1"/><text x="0.4050%" y="847.50"></text></g><g><title>&lt;tokio_tungstenite::compat::AllowStd&lt;S&gt; as std::io::Write&gt;::flush (1 samples, 0.03%)</title><rect x="0.1550%" y="821" width="0.0258%" height="15" fill="rgb(209,12,38)" fg:x="6" fg:w="1"/><text x="0.4050%" y="831.50"></text></g><g><title>__connect (1 samples, 0.03%)</title><rect x="0.1808%" y="869" width="0.0258%" height="15" fill="rgb(227,1,9)" fg:x="7" fg:w="1"/><text x="0.4308%" y="879.50"></text></g><g><title>SSLRecordReadInternal (1 samples, 0.03%)</title><rect x="0.2067%" y="773" width="0.0258%" height="15" fill="rgb(248,47,43)" fg:x="8" fg:w="1"/><text x="0.4567%" y="783.50"></text></g><g><title>security_framework::secure_transport::read_func (1 samples, 0.03%)</title><rect x="0.2067%" y="757" width="0.0258%" height="15" fill="rgb(221,10,30)" fg:x="8" fg:w="1"/><text x="0.4567%" y="767.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (1 samples, 0.03%)</title><rect x="0.2067%" y="741" width="0.0258%" height="15" fill="rgb(210,229,1)" fg:x="8" fg:w="1"/><text x="0.4567%" y="751.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (1 samples, 0.03%)</title><rect x="0.2067%" y="725" width="0.0258%" height="15" fill="rgb(222,148,37)" fg:x="8" fg:w="1"/><text x="0.4567%" y="735.50"></text></g><g><title>__recvfrom (1 samples, 0.03%)</title><rect x="0.2067%" y="709" width="0.0258%" height="15" fill="rgb(234,67,33)" fg:x="8" fg:w="1"/><text x="0.4567%" y="719.50"></text></g><g><title>ccec_generate_key_internal_fips_ws (1 samples, 0.03%)</title><rect x="0.2325%" y="661" width="0.0258%" height="15" fill="rgb(247,98,35)" fg:x="9" fg:w="1"/><text x="0.4825%" y="671.50"></text></g><g><title>ccec_make_pub_from_priv_ws (1 samples, 0.03%)</title><rect x="0.2325%" y="645" width="0.0258%" height="15" fill="rgb(247,138,52)" fg:x="9" fg:w="1"/><text x="0.4825%" y="655.50"></text></g><g><title>ccec_mult_blinded_ws (1 samples, 0.03%)</title><rect x="0.2325%" y="629" width="0.0258%" height="15" fill="rgb(213,79,30)" fg:x="9" fg:w="1"/><text x="0.4825%" y="639.50"></text></g><g><title>ccec_mult_default_ws (1 samples, 0.03%)</title><rect x="0.2325%" y="613" width="0.0258%" height="15" fill="rgb(246,177,23)" fg:x="9" fg:w="1"/><text x="0.4825%" y="623.50"></text></g><g><title>ccec_mult_XYCZadd_ws (1 samples, 0.03%)</title><rect x="0.2325%" y="597" width="0.0258%" height="15" fill="rgb(230,62,27)" fg:x="9" fg:w="1"/><text x="0.4825%" y="607.50"></text></g><g><title>ccn_mulmod_p256 (1 samples, 0.03%)</title><rect x="0.2325%" y="581" width="0.0258%" height="15" fill="rgb(216,154,8)" fg:x="9" fg:w="1"/><text x="0.4825%" y="591.50"></text></g><g><title>ccec_sign_composite_msg_ws (1 samples, 0.03%)</title><rect x="0.2583%" y="645" width="0.0258%" height="15" fill="rgb(244,35,45)" fg:x="10" fg:w="1"/><text x="0.5083%" y="655.50"></text></g><g><title>ccec_sign_composite_ws (1 samples, 0.03%)</title><rect x="0.2583%" y="629" width="0.0258%" height="15" fill="rgb(251,115,12)" fg:x="10" fg:w="1"/><text x="0.5083%" y="639.50"></text></g><g><title>ccec_sign_internal_ws (1 samples, 0.03%)</title><rect x="0.2583%" y="613" width="0.0258%" height="15" fill="rgb(240,54,50)" fg:x="10" fg:w="1"/><text x="0.5083%" y="623.50"></text></g><g><title>ccec_sign_internal_inner_ws (1 samples, 0.03%)</title><rect x="0.2583%" y="597" width="0.0258%" height="15" fill="rgb(233,84,52)" fg:x="10" fg:w="1"/><text x="0.5083%" y="607.50"></text></g><g><title>ccec_mult_blinded_ws (1 samples, 0.03%)</title><rect x="0.2583%" y="581" width="0.0258%" height="15" fill="rgb(207,117,47)" fg:x="10" fg:w="1"/><text x="0.5083%" y="591.50"></text></g><g><title>ccec_mult_default_ws (1 samples, 0.03%)</title><rect x="0.2583%" y="565" width="0.0258%" height="15" fill="rgb(249,43,39)" fg:x="10" fg:w="1"/><text x="0.5083%" y="575.50"></text></g><g><title>ccec_mult_XYCZaddC_ws (1 samples, 0.03%)</title><rect x="0.2583%" y="549" width="0.0258%" height="15" fill="rgb(209,38,44)" fg:x="10" fg:w="1"/><text x="0.5083%" y="559.50"></text></g><g><title>ccn_mulmod_p256 (1 samples, 0.03%)</title><rect x="0.2583%" y="533" width="0.0258%" height="15" fill="rgb(236,212,23)" fg:x="10" fg:w="1"/><text x="0.5083%" y="543.50"></text></g><g><title>tls_handshake_continue (3 samples, 0.08%)</title><rect x="0.2325%" y="773" width="0.0775%" height="15" fill="rgb(242,79,21)" fg:x="9" fg:w="3"/><text x="0.4825%" y="783.50"></text></g><g><title>SSLAdvanceHandshake (3 samples, 0.08%)</title><rect x="0.2325%" y="757" width="0.0775%" height="15" fill="rgb(211,96,35)" fg:x="9" fg:w="3"/><text x="0.4825%" y="767.50"></text></g><g><title>SSLPrepareAndQueueMessage (3 samples, 0.08%)</title><rect x="0.2325%" y="741" width="0.0775%" height="15" fill="rgb(253,215,40)" fg:x="9" fg:w="3"/><text x="0.4825%" y="751.50"></text></g><g><title>SSLEncodeKeyExchange (3 samples, 0.08%)</title><rect x="0.2325%" y="725" width="0.0775%" height="15" fill="rgb(211,81,21)" fg:x="9" fg:w="3"/><text x="0.4825%" y="735.50"></text></g><g><title>sslEcdhCreateKey (3 samples, 0.08%)</title><rect x="0.2325%" y="709" width="0.0775%" height="15" fill="rgb(208,190,38)" fg:x="9" fg:w="3"/><text x="0.4825%" y="719.50"></text></g><g><title>ccec_generate_key (3 samples, 0.08%)</title><rect x="0.2325%" y="693" width="0.0775%" height="15" fill="rgb(235,213,38)" fg:x="9" fg:w="3"/><text x="0.4825%" y="703.50"></text></g><g><title>ccec_generate_key_fips_ws (3 samples, 0.08%)</title><rect x="0.2325%" y="677" width="0.0775%" height="15" fill="rgb(237,122,38)" fg:x="9" fg:w="3"/><text x="0.4825%" y="687.50"></text></g><g><title>ccec_pairwise_consistency_check_ws (2 samples, 0.05%)</title><rect x="0.2583%" y="661" width="0.0517%" height="15" fill="rgb(244,218,35)" fg:x="10" fg:w="2"/><text x="0.5083%" y="671.50"></text></g><g><title>ccec_verify_composite_msg_ws (1 samples, 0.03%)</title><rect x="0.2842%" y="645" width="0.0258%" height="15" fill="rgb(240,68,47)" fg:x="11" fg:w="1"/><text x="0.5342%" y="655.50"></text></g><g><title>ccec_verify_composite_digest_ws (1 samples, 0.03%)</title><rect x="0.2842%" y="629" width="0.0258%" height="15" fill="rgb(210,16,53)" fg:x="11" fg:w="1"/><text x="0.5342%" y="639.50"></text></g><g><title>ccec_verify_internal_with_base_ws (1 samples, 0.03%)</title><rect x="0.2842%" y="613" width="0.0258%" height="15" fill="rgb(235,124,12)" fg:x="11" fg:w="1"/><text x="0.5342%" y="623.50"></text></g><g><title>ccec_twin_mult_ws (1 samples, 0.03%)</title><rect x="0.2842%" y="597" width="0.0258%" height="15" fill="rgb(224,169,11)" fg:x="11" fg:w="1"/><text x="0.5342%" y="607.50"></text></g><g><title>ccec_double_ws (1 samples, 0.03%)</title><rect x="0.2842%" y="581" width="0.0258%" height="15" fill="rgb(250,166,2)" fg:x="11" fg:w="1"/><text x="0.5342%" y="591.50"></text></g><g><title>cczp_sub_default_ws (1 samples, 0.03%)</title><rect x="0.2842%" y="565" width="0.0258%" height="15" fill="rgb(242,216,29)" fg:x="11" fg:w="1"/><text x="0.5342%" y="575.50"></text></g><g><title>ccn_cond_add (1 samples, 0.03%)</title><rect x="0.2842%" y="549" width="0.0258%" height="15" fill="rgb(230,116,27)" fg:x="11" fg:w="1"/><text x="0.5342%" y="559.50"></text></g><g><title>ccn_mux_next_mask (1 samples, 0.03%)</title><rect x="0.2842%" y="533" width="0.0258%" height="15" fill="rgb(228,99,48)" fg:x="11" fg:w="1"/><text x="0.5342%" y="543.50"></text></g><g><title>SSLAdvanceHandshake (1 samples, 0.03%)</title><rect x="0.3100%" y="741" width="0.0258%" height="15" fill="rgb(253,11,6)" fg:x="12" fg:w="1"/><text x="0.5600%" y="751.50"></text></g><g><title>tls_metric_client_finished (1 samples, 0.03%)</title><rect x="0.3100%" y="725" width="0.0258%" height="15" fill="rgb(247,143,39)" fg:x="12" fg:w="1"/><text x="0.5600%" y="735.50"></text></g><g><title>tls_metric_event_add_string (1 samples, 0.03%)</title><rect x="0.3100%" y="709" width="0.0258%" height="15" fill="rgb(236,97,10)" fg:x="12" fg:w="1"/><text x="0.5600%" y="719.50"></text></g><g><title>asl_log (1 samples, 0.03%)</title><rect x="0.3100%" y="693" width="0.0258%" height="15" fill="rgb(233,208,19)" fg:x="12" fg:w="1"/><text x="0.5600%" y="703.50"></text></g><g><title>_asl_lib_vlog (1 samples, 0.03%)</title><rect x="0.3100%" y="677" width="0.0258%" height="15" fill="rgb(216,164,2)" fg:x="12" fg:w="1"/><text x="0.5600%" y="687.50"></text></g><g><title>_asl_send_message (1 samples, 0.03%)</title><rect x="0.3100%" y="661" width="0.0258%" height="15" fill="rgb(220,129,5)" fg:x="12" fg:w="1"/><text x="0.5600%" y="671.50"></text></g><g><title>_asl_mt_shim_send_message (1 samples, 0.03%)</title><rect x="0.3100%" y="645" width="0.0258%" height="15" fill="rgb(242,17,10)" fg:x="12" fg:w="1"/><text x="0.5600%" y="655.50"></text></g><g><title>_xpc_pipe_routine (1 samples, 0.03%)</title><rect x="0.3100%" y="629" width="0.0258%" height="15" fill="rgb(242,107,0)" fg:x="12" fg:w="1"/><text x="0.5600%" y="639.50"></text></g><g><title>_xpc_pipe_pack_message (1 samples, 0.03%)</title><rect x="0.3100%" y="613" width="0.0258%" height="15" fill="rgb(251,28,31)" fg:x="12" fg:w="1"/><text x="0.5600%" y="623.50"></text></g><g><title>_xpc_serializer_pack (1 samples, 0.03%)</title><rect x="0.3100%" y="597" width="0.0258%" height="15" fill="rgb(233,223,10)" fg:x="12" fg:w="1"/><text x="0.5600%" y="607.50"></text></g><g><title>_xpc_dictionary_serialize (1 samples, 0.03%)</title><rect x="0.3100%" y="581" width="0.0258%" height="15" fill="rgb(215,21,27)" fg:x="12" fg:w="1"/><text x="0.5600%" y="591.50"></text></g><g><title>_xpc_dictionary_apply_node_f (1 samples, 0.03%)</title><rect x="0.3100%" y="565" width="0.0258%" height="15" fill="rgb(232,23,21)" fg:x="12" fg:w="1"/><text x="0.5600%" y="575.50"></text></g><g><title>_xpc_dictionary_serialize_apply (1 samples, 0.03%)</title><rect x="0.3100%" y="549" width="0.0258%" height="15" fill="rgb(244,5,23)" fg:x="12" fg:w="1"/><text x="0.5600%" y="559.50"></text></g><g><title>SSLProcessHandshakeMessage (1 samples, 0.03%)</title><rect x="0.3358%" y="741" width="0.0258%" height="15" fill="rgb(226,81,46)" fg:x="13" fg:w="1"/><text x="0.5858%" y="751.50"></text></g><g><title>SSLProcessServerKeyExchange (1 samples, 0.03%)</title><rect x="0.3358%" y="725" width="0.0258%" height="15" fill="rgb(247,70,30)" fg:x="13" fg:w="1"/><text x="0.5858%" y="735.50"></text></g><g><title>SSLVerifySignedServerKeyExchangeTls12 (1 samples, 0.03%)</title><rect x="0.3358%" y="709" width="0.0258%" height="15" fill="rgb(212,68,19)" fg:x="13" fg:w="1"/><text x="0.5858%" y="719.50"></text></g><g><title>sslRawVerify (1 samples, 0.03%)</title><rect x="0.3358%" y="693" width="0.0258%" height="15" fill="rgb(240,187,13)" fg:x="13" fg:w="1"/><text x="0.5858%" y="703.50"></text></g><g><title>ccec_verify (1 samples, 0.03%)</title><rect x="0.3358%" y="677" width="0.0258%" height="15" fill="rgb(223,113,26)" fg:x="13" fg:w="1"/><text x="0.5858%" y="687.50"></text></g><g><title>ccec_verify_digest_ws (1 samples, 0.03%)</title><rect x="0.3358%" y="661" width="0.0258%" height="15" fill="rgb(206,192,2)" fg:x="13" fg:w="1"/><text x="0.5858%" y="671.50"></text></g><g><title>ccec_verify_internal_with_base_ws (1 samples, 0.03%)</title><rect x="0.3358%" y="645" width="0.0258%" height="15" fill="rgb(241,108,4)" fg:x="13" fg:w="1"/><text x="0.5858%" y="655.50"></text></g><g><title>ccec_twin_mult_ws (1 samples, 0.03%)</title><rect x="0.3358%" y="629" width="0.0258%" height="15" fill="rgb(247,173,49)" fg:x="13" fg:w="1"/><text x="0.5858%" y="639.50"></text></g><g><title>ccec_double_ws (1 samples, 0.03%)</title><rect x="0.3358%" y="613" width="0.0258%" height="15" fill="rgb(224,114,35)" fg:x="13" fg:w="1"/><text x="0.5858%" y="623.50"></text></g><g><title>cczp_add_default_ws (1 samples, 0.03%)</title><rect x="0.3358%" y="597" width="0.0258%" height="15" fill="rgb(245,159,27)" fg:x="13" fg:w="1"/><text x="0.5858%" y="607.50"></text></g><g><title>ccn_mux (1 samples, 0.03%)</title><rect x="0.3358%" y="581" width="0.0258%" height="15" fill="rgb(245,172,44)" fg:x="13" fg:w="1"/><text x="0.5858%" y="591.50"></text></g><g><title>Security::CssmClient::WrapKey::activate() (1 samples, 0.03%)</title><rect x="0.3617%" y="629" width="0.0258%" height="15" fill="rgb(236,23,11)" fg:x="14" fg:w="1"/><text x="0.6117%" y="639.50"></text></g><g><title>SecECKeyGetNamedCurve (2 samples, 0.05%)</title><rect x="0.3617%" y="709" width="0.0517%" height="15" fill="rgb(205,117,38)" fg:x="14" fg:w="2"/><text x="0.6117%" y="719.50"></text></g><g><title>SecKeyCopyAttributes (2 samples, 0.05%)</title><rect x="0.3617%" y="693" width="0.0517%" height="15" fill="rgb(237,72,25)" fg:x="14" fg:w="2"/><text x="0.6117%" y="703.50"></text></g><g><title>SecCDSAKeyCopyAttributeDictionary(__SecKey*) (2 samples, 0.05%)</title><rect x="0.3617%" y="677" width="0.0517%" height="15" fill="rgb(244,70,9)" fg:x="14" fg:w="2"/><text x="0.6117%" y="687.50"></text></g><g><title>SecCDSAKeyCopyPublicBytes(__SecKey*, __CFData const**) (2 samples, 0.05%)</title><rect x="0.3617%" y="661" width="0.0517%" height="15" fill="rgb(217,125,39)" fg:x="14" fg:w="2"/><text x="0.6117%" y="671.50"></text></g><g><title>SecCDSAKeyCopyExternalRepresentation(__SecKey*, __CFError**) (2 samples, 0.05%)</title><rect x="0.3617%" y="645" width="0.0517%" height="15" fill="rgb(235,36,10)" fg:x="14" fg:w="2"/><text x="0.6117%" y="655.50"></text></g><g><title>__CFDataInit (1 samples, 0.03%)</title><rect x="0.3875%" y="629" width="0.0258%" height="15" fill="rgb(251,123,47)" fg:x="15" fg:w="1"/><text x="0.6375%" y="639.50"></text></g><g><title>SecCertificateCreateItemImplInstance (1 samples, 0.03%)</title><rect x="0.4133%" y="677" width="0.0258%" height="15" fill="rgb(221,13,13)" fg:x="16" fg:w="1"/><text x="0.6633%" y="687.50"></text></g><g><title>Security::KeychainCore::Certificate::Certificate(cssm_data const&amp;, unsigned int, unsigned int) (1 samples, 0.03%)</title><rect x="0.4133%" y="661" width="0.0258%" height="15" fill="rgb(238,131,9)" fg:x="16" fg:w="1"/><text x="0.6633%" y="671.50"></text></g><g><title>Security::CssmClient::CL::CL(Security::Guid const&amp;) (1 samples, 0.03%)</title><rect x="0.4133%" y="645" width="0.0258%" height="15" fill="rgb(211,50,8)" fg:x="16" fg:w="1"/><text x="0.6633%" y="655.50"></text></g><g><title>Security::CssmClient::AttachmentImpl::AttachmentImpl(Security::Guid const&amp;, unsigned int) (1 samples, 0.03%)</title><rect x="0.4133%" y="629" width="0.0258%" height="15" fill="rgb(245,182,24)" fg:x="16" fg:w="1"/><text x="0.6633%" y="639.50"></text></g><g><title>Security::ModuleNexus&lt;Security::CssmClient::CssmImpl::StandardCssm&gt;::operator()() (1 samples, 0.03%)</title><rect x="0.4133%" y="613" width="0.0258%" height="15" fill="rgb(242,14,37)" fg:x="16" fg:w="1"/><text x="0.6633%" y="623.50"></text></g><g><title>Security::KeychainCore::Certificate::certHandle() (1 samples, 0.03%)</title><rect x="0.4392%" y="645" width="0.0258%" height="15" fill="rgb(246,228,12)" fg:x="17" fg:w="1"/><text x="0.6892%" y="655.50"></text></g><g><title>CSSM_CL_CertCache (1 samples, 0.03%)</title><rect x="0.4392%" y="629" width="0.0258%" height="15" fill="rgb(213,55,15)" fg:x="17" fg:w="1"/><text x="0.6892%" y="639.50"></text></g><g><title>cssm_CertCache(long, cssm_data const*, long*) (1 samples, 0.03%)</title><rect x="0.4392%" y="613" width="0.0258%" height="15" fill="rgb(209,9,3)" fg:x="17" fg:w="1"/><text x="0.6892%" y="623.50"></text></g><g><title>AppleX509CLSession::CertCache(Security::CssmData const&amp;, long&amp;) (1 samples, 0.03%)</title><rect x="0.4392%" y="597" width="0.0258%" height="15" fill="rgb(230,59,30)" fg:x="17" fg:w="1"/><text x="0.6892%" y="607.50"></text></g><g><title>DecodedCert::DecodedCert(AppleX509CLSession&amp;, Security::CssmData const&amp;) (1 samples, 0.03%)</title><rect x="0.4392%" y="581" width="0.0258%" height="15" fill="rgb(209,121,21)" fg:x="17" fg:w="1"/><text x="0.6892%" y="591.50"></text></g><g><title>DecodedExtensions::decodeFromNss(NSS_CertExtension**) (1 samples, 0.03%)</title><rect x="0.4392%" y="565" width="0.0258%" height="15" fill="rgb(220,109,13)" fg:x="17" fg:w="1"/><text x="0.6892%" y="575.50"></text></g><g><title>SEC_ASN1Decode (1 samples, 0.03%)</title><rect x="0.4392%" y="549" width="0.0258%" height="15" fill="rgb(232,18,1)" fg:x="17" fg:w="1"/><text x="0.6892%" y="559.50"></text></g><g><title>SEC_ASN1DecoderUpdate (1 samples, 0.03%)</title><rect x="0.4392%" y="533" width="0.0258%" height="15" fill="rgb(215,41,42)" fg:x="17" fg:w="1"/><text x="0.6892%" y="543.50"></text></g><g><title>sec_asn1d_init_state_based_on_template (1 samples, 0.03%)</title><rect x="0.4392%" y="517" width="0.0258%" height="15" fill="rgb(224,123,36)" fg:x="17" fg:w="1"/><text x="0.6892%" y="527.50"></text></g><g><title>Security::MetaRecord::createAttribute(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const*, Security::CssmData const*, unsigned int, unsigned int) (1 samples, 0.03%)</title><rect x="0.4650%" y="421" width="0.0258%" height="15" fill="rgb(240,125,3)" fg:x="18" fg:w="1"/><text x="0.7150%" y="431.50"></text></g><g><title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="0.4650%" y="405" width="0.0258%" height="15" fill="rgb(205,98,50)" fg:x="18" fg:w="1"/><text x="0.7150%" y="415.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="0.4650%" y="389" width="0.0258%" height="15" fill="rgb(205,185,37)" fg:x="18" fg:w="1"/><text x="0.7150%" y="399.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="0.4650%" y="373" width="0.0258%" height="15" fill="rgb(238,207,15)" fg:x="18" fg:w="1"/><text x="0.7150%" y="383.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="0.4650%" y="357" width="0.0258%" height="15" fill="rgb(213,199,42)" fg:x="18" fg:w="1"/><text x="0.7150%" y="367.50"></text></g><g><title>Security::DatabaseSession::DbOpen(char const*, cssm_net_address const*, unsigned int, Security::AccessCredentials const*, void const*, long&amp;) (2 samples, 0.05%)</title><rect x="0.4650%" y="501" width="0.0517%" height="15" fill="rgb(235,201,11)" fg:x="18" fg:w="2"/><text x="0.7150%" y="511.50"></text></g><g><title>Security::DatabaseManager::dbOpen(Security::DatabaseSession&amp;, Security::DbName const&amp;, unsigned int, Security::AccessCredentials const*, void const*) (2 samples, 0.05%)</title><rect x="0.4650%" y="485" width="0.0517%" height="15" fill="rgb(207,46,11)" fg:x="18" fg:w="2"/><text x="0.7150%" y="495.50"></text></g><g><title>Security::Database::_dbOpen(Security::DatabaseSession&amp;, unsigned int, Security::AccessCredentials const*, void const*) (2 samples, 0.05%)</title><rect x="0.4650%" y="469" width="0.0517%" height="15" fill="rgb(241,35,35)" fg:x="18" fg:w="2"/><text x="0.7150%" y="479.50"></text></g><g><title>Security::AppleDatabase::dbOpen(Security::DbContext&amp;) (2 samples, 0.05%)</title><rect x="0.4650%" y="453" width="0.0517%" height="15" fill="rgb(243,32,47)" fg:x="18" fg:w="2"/><text x="0.7150%" y="463.50"></text></g><g><title>Security::DbModifier::getDbVersion(bool) (2 samples, 0.05%)</title><rect x="0.4650%" y="437" width="0.0517%" height="15" fill="rgb(247,202,23)" fg:x="18" fg:w="2"/><text x="0.7150%" y="447.50"></text></g><g><title>Security::TrackingAllocator::~TrackingAllocator() (1 samples, 0.03%)</title><rect x="0.4908%" y="421" width="0.0258%" height="15" fill="rgb(219,102,11)" fg:x="19" fg:w="1"/><text x="0.7408%" y="431.50"></text></g><g><title>Security::TrackingAllocator::reset() (1 samples, 0.03%)</title><rect x="0.4908%" y="405" width="0.0258%" height="15" fill="rgb(243,110,44)" fg:x="19" fg:w="1"/><text x="0.7408%" y="415.50"></text></g><g><title>SSLHandshake (13 samples, 0.34%)</title><rect x="0.2067%" y="805" width="0.3358%" height="15" fill="rgb(222,74,54)" fg:x="8" fg:w="13"/><text x="0.4567%" y="815.50"></text></g><g><title>SSLHandshakeProceed (13 samples, 0.34%)</title><rect x="0.2067%" y="789" width="0.3358%" height="15" fill="rgb(216,99,12)" fg:x="8" fg:w="13"/><text x="0.4567%" y="799.50"></text></g><g><title>tls_handshake_process (9 samples, 0.23%)</title><rect x="0.3100%" y="773" width="0.2325%" height="15" fill="rgb(226,22,26)" fg:x="12" fg:w="9"/><text x="0.5600%" y="783.50"></text></g><g><title>SSLProcessHandshakeRecordInner (9 samples, 0.23%)</title><rect x="0.3100%" y="757" width="0.2325%" height="15" fill="rgb(217,163,10)" fg:x="12" fg:w="9"/><text x="0.5600%" y="767.50"></text></g><g><title>tls_handshake_message_callback (7 samples, 0.18%)</title><rect x="0.3617%" y="741" width="0.1808%" height="15" fill="rgb(213,25,53)" fg:x="14" fg:w="7"/><text x="0.6117%" y="751.50"></text></g><g><title>tls_helper_set_peer_pubkey (7 samples, 0.18%)</title><rect x="0.3617%" y="725" width="0.1808%" height="15" fill="rgb(252,105,26)" fg:x="14" fg:w="7"/><text x="0.6117%" y="735.50"></text></g><g><title>SecTrustCopyPublicKey (5 samples, 0.13%)</title><rect x="0.4133%" y="709" width="0.1292%" height="15" fill="rgb(220,39,43)" fg:x="16" fg:w="5"/><text x="0.6633%" y="719.50"></text></g><g><title>SecCertificateCopyPublicKey$LEGACYMAC (5 samples, 0.13%)</title><rect x="0.4133%" y="693" width="0.1292%" height="15" fill="rgb(229,68,48)" fg:x="16" fg:w="5"/><text x="0.6633%" y="703.50"></text></g><g><title>Security::KeychainCore::Certificate::publicKey() (4 samples, 0.10%)</title><rect x="0.4392%" y="677" width="0.1033%" height="15" fill="rgb(252,8,32)" fg:x="17" fg:w="4"/><text x="0.6892%" y="687.50"></text></g><g><title>Security::KeychainCore::Certificate::copyFirstFieldValue(cssm_data const&amp;) (4 samples, 0.10%)</title><rect x="0.4392%" y="661" width="0.1033%" height="15" fill="rgb(223,20,43)" fg:x="17" fg:w="4"/><text x="0.6892%" y="671.50"></text></g><g><title>Security::KeychainCore::Certificate::clHandle() (3 samples, 0.08%)</title><rect x="0.4650%" y="645" width="0.0775%" height="15" fill="rgb(229,81,49)" fg:x="18" fg:w="3"/><text x="0.7150%" y="655.50"></text></g><g><title>Security::CssmClient::AttachmentImpl::activate() (3 samples, 0.08%)</title><rect x="0.4650%" y="629" width="0.0775%" height="15" fill="rgb(236,28,36)" fg:x="18" fg:w="3"/><text x="0.7150%" y="639.50"></text></g><g><title>Security::CssmClient::ModuleImpl::activate() (3 samples, 0.08%)</title><rect x="0.4650%" y="613" width="0.0775%" height="15" fill="rgb(249,185,26)" fg:x="18" fg:w="3"/><text x="0.7150%" y="623.50"></text></g><g><title>CSSM_ModuleLoad (3 samples, 0.08%)</title><rect x="0.4650%" y="597" width="0.0775%" height="15" fill="rgb(249,174,33)" fg:x="18" fg:w="3"/><text x="0.7150%" y="607.50"></text></g><g><title>Security::CssmClient::Table&lt;Security::MDSClient::Common&gt;::startQuery(Security::CssmQuery const&amp;, bool) (3 samples, 0.08%)</title><rect x="0.4650%" y="581" width="0.0775%" height="15" fill="rgb(233,201,37)" fg:x="18" fg:w="3"/><text x="0.7150%" y="591.50"></text></g><g><title>Security::MDSClient::Directory::dlGetFirst(cssm_query const&amp;, cssm_db_record_attribute_data&amp;, cssm_data*, cssm_db_unique_record*&amp;) (3 samples, 0.08%)</title><rect x="0.4650%" y="565" width="0.0775%" height="15" fill="rgb(221,78,26)" fg:x="18" fg:w="3"/><text x="0.7150%" y="575.50"></text></g><g><title>Security::MDSClient::Directory::cdsa() const (3 samples, 0.08%)</title><rect x="0.4650%" y="549" width="0.0775%" height="15" fill="rgb(250,127,30)" fg:x="18" fg:w="3"/><text x="0.7150%" y="559.50"></text></g><g><title>mds_DbOpen(long, char const*, cssm_net_address const*, unsigned int, cssm_access_credentials const*, void const*, long*) (3 samples, 0.08%)</title><rect x="0.4650%" y="533" width="0.0775%" height="15" fill="rgb(230,49,44)" fg:x="18" fg:w="3"/><text x="0.7150%" y="543.50"></text></g><g><title>Security::MDSSession::DbOpen(char const*, cssm_net_address const*, unsigned int, Security::AccessCredentials const*, void const*, long&amp;) (3 samples, 0.08%)</title><rect x="0.4650%" y="517" width="0.0775%" height="15" fill="rgb(229,67,23)" fg:x="18" fg:w="3"/><text x="0.7150%" y="527.50"></text></g><g><title>Security::MDSSession::updateDataBases() (1 samples, 0.03%)</title><rect x="0.5167%" y="501" width="0.0258%" height="15" fill="rgb(249,83,47)" fg:x="20" fg:w="1"/><text x="0.7667%" y="511.50"></text></g><g><title>Security::MDSSession::LockHelper::obtainLock(char const*, int) (1 samples, 0.03%)</title><rect x="0.5167%" y="485" width="0.0258%" height="15" fill="rgb(215,43,3)" fg:x="20" fg:w="1"/><text x="0.7667%" y="495.50"></text></g><g><title>open (1 samples, 0.03%)</title><rect x="0.5167%" y="469" width="0.0258%" height="15" fill="rgb(238,154,13)" fg:x="20" fg:w="1"/><text x="0.7667%" y="479.50"></text></g><g><title>__open (1 samples, 0.03%)</title><rect x="0.5167%" y="453" width="0.0258%" height="15" fill="rgb(219,56,2)" fg:x="20" fg:w="1"/><text x="0.7667%" y="463.50"></text></g><g><title>&lt;tokio_native_tls::MidHandshake&lt;S&gt; as core::future::future::Future&gt;::poll (14 samples, 0.36%)</title><rect x="0.2067%" y="853" width="0.3617%" height="15" fill="rgb(233,0,4)" fg:x="8" fg:w="14"/><text x="0.4567%" y="863.50"></text></g><g><title>native_tls::imp::MidHandshakeTlsStream&lt;S&gt;::handshake (14 samples, 0.36%)</title><rect x="0.2067%" y="837" width="0.3617%" height="15" fill="rgb(235,30,7)" fg:x="8" fg:w="14"/><text x="0.4567%" y="847.50"></text></g><g><title>security_framework::secure_transport::MidHandshakeClientBuilder&lt;S&gt;::handshake (14 samples, 0.36%)</title><rect x="0.2067%" y="821" width="0.3617%" height="15" fill="rgb(250,79,13)" fg:x="8" fg:w="14"/><text x="0.4567%" y="831.50"></text></g><g><title>security_framework::trust::SecTrust::evaluate_with_error (1 samples, 0.03%)</title><rect x="0.5425%" y="805" width="0.0258%" height="15" fill="rgb(211,146,34)" fg:x="21" fg:w="1"/><text x="0.7925%" y="815.50"></text></g><g><title>SecTrustEvaluateInternal (1 samples, 0.03%)</title><rect x="0.5425%" y="789" width="0.0258%" height="15" fill="rgb(228,22,38)" fg:x="21" fg:w="1"/><text x="0.7925%" y="799.50"></text></g><g><title>SecTrustEvaluateIfNecessary (1 samples, 0.03%)</title><rect x="0.5425%" y="773" width="0.0258%" height="15" fill="rgb(235,168,5)" fg:x="21" fg:w="1"/><text x="0.7925%" y="783.50"></text></g><g><title>_dispatch_lane_barrier_sync_invoke_and_complete (1 samples, 0.03%)</title><rect x="0.5425%" y="757" width="0.0258%" height="15" fill="rgb(221,155,16)" fg:x="21" fg:w="1"/><text x="0.7925%" y="767.50"></text></g><g><title>_dispatch_client_callout (1 samples, 0.03%)</title><rect x="0.5425%" y="741" width="0.0258%" height="15" fill="rgb(215,215,53)" fg:x="21" fg:w="1"/><text x="0.7925%" y="751.50"></text></g><g><title>__SecTrustEvaluateIfNecessary_block_invoke (1 samples, 0.03%)</title><rect x="0.5425%" y="725" width="0.0258%" height="15" fill="rgb(223,4,10)" fg:x="21" fg:w="1"/><text x="0.7925%" y="735.50"></text></g><g><title>_os_activity_initiate_impl (1 samples, 0.03%)</title><rect x="0.5425%" y="709" width="0.0258%" height="15" fill="rgb(234,103,6)" fg:x="21" fg:w="1"/><text x="0.7925%" y="719.50"></text></g><g><title>__SecTrustEvaluateIfNecessary_block_invoke_2 (1 samples, 0.03%)</title><rect x="0.5425%" y="693" width="0.0258%" height="15" fill="rgb(227,97,0)" fg:x="21" fg:w="1"/><text x="0.7925%" y="703.50"></text></g><g><title>SecOSStatusWith (1 samples, 0.03%)</title><rect x="0.5425%" y="677" width="0.0258%" height="15" fill="rgb(234,150,53)" fg:x="21" fg:w="1"/><text x="0.7925%" y="687.50"></text></g><g><title>__SecTrustEvaluateIfNecessary_block_invoke_3 (1 samples, 0.03%)</title><rect x="0.5425%" y="661" width="0.0258%" height="15" fill="rgb(228,201,54)" fg:x="21" fg:w="1"/><text x="0.7925%" y="671.50"></text></g><g><title>securityd_send_sync_and_do (1 samples, 0.03%)</title><rect x="0.5425%" y="645" width="0.0258%" height="15" fill="rgb(222,22,37)" fg:x="21" fg:w="1"/><text x="0.7925%" y="655.50"></text></g><g><title>__handle_trust_evaluate_xpc_block_invoke_2 (1 samples, 0.03%)</title><rect x="0.5425%" y="629" width="0.0258%" height="15" fill="rgb(237,53,32)" fg:x="21" fg:w="1"/><text x="0.7925%" y="639.50"></text></g><g><title>SecXPCDictionaryCopyDictionaryOptional (1 samples, 0.03%)</title><rect x="0.5425%" y="613" width="0.0258%" height="15" fill="rgb(233,25,53)" fg:x="21" fg:w="1"/><text x="0.7925%" y="623.50"></text></g><g><title>SecXPCDictionaryCopyDictionaryAndPossiblyMutateMessage (1 samples, 0.03%)</title><rect x="0.5425%" y="597" width="0.0258%" height="15" fill="rgb(210,40,34)" fg:x="21" fg:w="1"/><text x="0.7925%" y="607.50"></text></g><g><title>SecXPCDictionaryCopyPListAndPossiblyMutateMessage (1 samples, 0.03%)</title><rect x="0.5425%" y="581" width="0.0258%" height="15" fill="rgb(241,220,44)" fg:x="21" fg:w="1"/><text x="0.7925%" y="591.50"></text></g><g><title>der_decode_plist (1 samples, 0.03%)</title><rect x="0.5425%" y="565" width="0.0258%" height="15" fill="rgb(235,28,35)" fg:x="21" fg:w="1"/><text x="0.7925%" y="575.50"></text></g><g><title>der_decode_dictionary (1 samples, 0.03%)</title><rect x="0.5425%" y="549" width="0.0258%" height="15" fill="rgb(210,56,17)" fg:x="21" fg:w="1"/><text x="0.7925%" y="559.50"></text></g><g><title>der_decode_plist (1 samples, 0.03%)</title><rect x="0.5425%" y="533" width="0.0258%" height="15" fill="rgb(224,130,29)" fg:x="21" fg:w="1"/><text x="0.7925%" y="543.50"></text></g><g><title>der_decode_date (1 samples, 0.03%)</title><rect x="0.5425%" y="517" width="0.0258%" height="15" fill="rgb(235,212,8)" fg:x="21" fg:w="1"/><text x="0.7925%" y="527.50"></text></g><g><title>der_decode_commontime_body (1 samples, 0.03%)</title><rect x="0.5425%" y="501" width="0.0258%" height="15" fill="rgb(223,33,50)" fg:x="21" fg:w="1"/><text x="0.7925%" y="511.50"></text></g><g><title>SecCFCalendarDoWithZuluCalendar (1 samples, 0.03%)</title><rect x="0.5425%" y="485" width="0.0258%" height="15" fill="rgb(219,149,13)" fg:x="21" fg:w="1"/><text x="0.7925%" y="495.50"></text></g><g><title>_dispatch_lane_barrier_sync_invoke_and_complete (1 samples, 0.03%)</title><rect x="0.5425%" y="469" width="0.0258%" height="15" fill="rgb(250,156,29)" fg:x="21" fg:w="1"/><text x="0.7925%" y="479.50"></text></g><g><title>_dispatch_client_callout (1 samples, 0.03%)</title><rect x="0.5425%" y="453" width="0.0258%" height="15" fill="rgb(216,193,19)" fg:x="21" fg:w="1"/><text x="0.7925%" y="463.50"></text></g><g><title>__SecCFCalendarDoWithZuluCalendar_block_invoke (1 samples, 0.03%)</title><rect x="0.5425%" y="437" width="0.0258%" height="15" fill="rgb(216,135,14)" fg:x="21" fg:w="1"/><text x="0.7925%" y="447.50"></text></g><g><title>_dispatch_once_callout (1 samples, 0.03%)</title><rect x="0.5425%" y="421" width="0.0258%" height="15" fill="rgb(241,47,5)" fg:x="21" fg:w="1"/><text x="0.7925%" y="431.50"></text></g><g><title>_dispatch_client_callout (1 samples, 0.03%)</title><rect x="0.5425%" y="405" width="0.0258%" height="15" fill="rgb(233,42,35)" fg:x="21" fg:w="1"/><text x="0.7925%" y="415.50"></text></g><g><title>__SecCFCalendarGetZulu_block_invoke (1 samples, 0.03%)</title><rect x="0.5425%" y="389" width="0.0258%" height="15" fill="rgb(231,13,6)" fg:x="21" fg:w="1"/><text x="0.7925%" y="399.50"></text></g><g><title>@objc static NSCalendar._newCalendarWithIdentifier(_:) (1 samples, 0.03%)</title><rect x="0.5425%" y="373" width="0.0258%" height="15" fill="rgb(207,181,40)" fg:x="21" fg:w="1"/><text x="0.7925%" y="383.50"></text></g><g><title>specialized static NSCalendar._newCalendarWithIdentifier(_:) (1 samples, 0.03%)</title><rect x="0.5425%" y="357" width="0.0258%" height="15" fill="rgb(254,173,49)" fg:x="21" fg:w="1"/><text x="0.7925%" y="367.50"></text></g><g><title>Calendar.init(identifier:) (1 samples, 0.03%)</title><rect x="0.5425%" y="341" width="0.0258%" height="15" fill="rgb(221,1,38)" fg:x="21" fg:w="1"/><text x="0.7925%" y="351.50"></text></g><g><title>protocol witness for _CalendarProtocol.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:) in conformance _CalendarGregorian (1 samples, 0.03%)</title><rect x="0.5425%" y="325" width="0.0258%" height="15" fill="rgb(206,124,46)" fg:x="21" fg:w="1"/><text x="0.7925%" y="335.50"></text></g><g><title>_CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:) (1 samples, 0.03%)</title><rect x="0.5425%" y="309" width="0.0258%" height="15" fill="rgb(249,21,11)" fg:x="21" fg:w="1"/><text x="0.7925%" y="319.50"></text></g><g><title>TimeZoneCache.default.getter (1 samples, 0.03%)</title><rect x="0.5425%" y="293" width="0.0258%" height="15" fill="rgb(222,201,40)" fg:x="21" fg:w="1"/><text x="0.7925%" y="303.50"></text></g><g><title>protocol witness for _TimeZoneProtocol.init(identifier:) in conformance _TimeZoneICU (1 samples, 0.03%)</title><rect x="0.5425%" y="277" width="0.0258%" height="15" fill="rgb(235,61,29)" fg:x="21" fg:w="1"/><text x="0.7925%" y="287.50"></text></g><g><title>_TimeZoneICU.init(identifier:) (1 samples, 0.03%)</title><rect x="0.5425%" y="261" width="0.0258%" height="15" fill="rgb(219,207,3)" fg:x="21" fg:w="1"/><text x="0.7925%" y="271.50"></text></g><g><title>specialized _withResizingUCharBuffer(initialSize:_:) (1 samples, 0.03%)</title><rect x="0.5425%" y="245" width="0.0258%" height="15" fill="rgb(222,56,46)" fg:x="21" fg:w="1"/><text x="0.7925%" y="255.50"></text></g><g><title>specialized closure #1 in _withResizingUCharBuffer(initialSize:_:) (1 samples, 0.03%)</title><rect x="0.5425%" y="229" width="0.0258%" height="15" fill="rgb(239,76,54)" fg:x="21" fg:w="1"/><text x="0.7925%" y="239.50"></text></g><g><title>ucal_getCanonicalTimeZoneID (1 samples, 0.03%)</title><rect x="0.5425%" y="213" width="0.0258%" height="15" fill="rgb(231,124,27)" fg:x="21" fg:w="1"/><text x="0.7925%" y="223.50"></text></g><g><title>icu::TimeZone::getCanonicalID(icu::UnicodeString const&amp;, icu::UnicodeString&amp;, signed char&amp;, UErrorCode&amp;) (1 samples, 0.03%)</title><rect x="0.5425%" y="197" width="0.0258%" height="15" fill="rgb(249,195,6)" fg:x="21" fg:w="1"/><text x="0.7925%" y="207.50"></text></g><g><title>icu::ZoneMeta::getCanonicalCLDRID(icu::UnicodeString const&amp;, icu::UnicodeString&amp;, UErrorCode&amp;) (1 samples, 0.03%)</title><rect x="0.5425%" y="181" width="0.0258%" height="15" fill="rgb(237,174,47)" fg:x="21" fg:w="1"/><text x="0.7925%" y="191.50"></text></g><g><title>icu::ZoneMeta::getCanonicalCLDRID(icu::UnicodeString const&amp;, UErrorCode&amp;) (1 samples, 0.03%)</title><rect x="0.5425%" y="165" width="0.0258%" height="15" fill="rgb(206,201,31)" fg:x="21" fg:w="1"/><text x="0.7925%" y="175.50"></text></g><g><title>0x19ecdf578 (1 samples, 0.03%)</title><rect x="0.5425%" y="149" width="0.0258%" height="15" fill="rgb(231,57,52)" fg:x="21" fg:w="1"/><text x="0.7925%" y="159.50"></text></g><g><title>0x19ece2a48 (1 samples, 0.03%)</title><rect x="0.5425%" y="133" width="0.0258%" height="15" fill="rgb(248,177,22)" fg:x="21" fg:w="1"/><text x="0.7925%" y="143.50"></text></g><g><title>0x19ece3738 (1 samples, 0.03%)</title><rect x="0.5425%" y="117" width="0.0258%" height="15" fill="rgb(215,211,37)" fg:x="21" fg:w="1"/><text x="0.7925%" y="127.50"></text></g><g><title>0x19ecb10f8 (1 samples, 0.03%)</title><rect x="0.5425%" y="101" width="0.0258%" height="15" fill="rgb(241,128,51)" fg:x="21" fg:w="1"/><text x="0.7925%" y="111.50"></text></g><g><title>0x19ecb1c14 (1 samples, 0.03%)</title><rect x="0.5425%" y="85" width="0.0258%" height="15" fill="rgb(227,165,31)" fg:x="21" fg:w="1"/><text x="0.7925%" y="95.50"></text></g><g><title>0x19ecb1fac (1 samples, 0.03%)</title><rect x="0.5425%" y="69" width="0.0258%" height="15" fill="rgb(228,167,24)" fg:x="21" fg:w="1"/><text x="0.7925%" y="79.50"></text></g><g><title>uprv_mapFile (1 samples, 0.03%)</title><rect x="0.5425%" y="53" width="0.0258%" height="15" fill="rgb(228,143,12)" fg:x="21" fg:w="1"/><text x="0.7925%" y="63.50"></text></g><g><title>stat (1 samples, 0.03%)</title><rect x="0.5425%" y="37" width="0.0258%" height="15" fill="rgb(249,149,8)" fg:x="21" fg:w="1"/><text x="0.7925%" y="47.50"></text></g><g><title>SSLPreferencesGetInteger (1 samples, 0.03%)</title><rect x="0.5683%" y="725" width="0.0258%" height="15" fill="rgb(243,35,44)" fg:x="22" fg:w="1"/><text x="0.8183%" y="735.50"></text></g><g><title>_CFPreferencesCopyAppValueWithContainerAndConfiguration (1 samples, 0.03%)</title><rect x="0.5683%" y="709" width="0.0258%" height="15" fill="rgb(246,89,9)" fg:x="22" fg:w="1"/><text x="0.8183%" y="719.50"></text></g><g><title>-[_CFXPreferences copyAppValueForKey:identifier:container:configurationURL:] (1 samples, 0.03%)</title><rect x="0.5683%" y="693" width="0.0258%" height="15" fill="rgb(233,213,13)" fg:x="22" fg:w="1"/><text x="0.8183%" y="703.50"></text></g><g><title>-[_CFXPreferences withSearchListForIdentifier:container:cloudConfigurationURL:perform:] (1 samples, 0.03%)</title><rect x="0.5683%" y="677" width="0.0258%" height="15" fill="rgb(233,141,41)" fg:x="22" fg:w="1"/><text x="0.8183%" y="687.50"></text></g><g><title>__108-[_CFXPreferences(SearchListAdditions) withSearchListForIdentifier:container:cloudConfigurationURL:perform:]_block_invoke (1 samples, 0.03%)</title><rect x="0.5683%" y="661" width="0.0258%" height="15" fill="rgb(239,167,4)" fg:x="22" fg:w="1"/><text x="0.8183%" y="671.50"></text></g><g><title>__76-[_CFXPreferences copyAppValueForKey:identifier:container:configurationURL:]_block_invoke (1 samples, 0.03%)</title><rect x="0.5683%" y="645" width="0.0258%" height="15" fill="rgb(209,217,16)" fg:x="22" fg:w="1"/><text x="0.8183%" y="655.50"></text></g><g><title>-[CFPrefsSource copyValueForKey:] (1 samples, 0.03%)</title><rect x="0.5683%" y="629" width="0.0258%" height="15" fill="rgb(219,88,35)" fg:x="22" fg:w="1"/><text x="0.8183%" y="639.50"></text></g><g><title>-[CFPrefsSearchListSource alreadylocked_copyValueForKey:] (1 samples, 0.03%)</title><rect x="0.5683%" y="613" width="0.0258%" height="15" fill="rgb(220,193,23)" fg:x="22" fg:w="1"/><text x="0.8183%" y="623.50"></text></g><g><title>-[CFPrefsSearchListSource alreadylocked_getDictionary:] (1 samples, 0.03%)</title><rect x="0.5683%" y="597" width="0.0258%" height="15" fill="rgb(230,90,52)" fg:x="22" fg:w="1"/><text x="0.8183%" y="607.50"></text></g><g><title>-[CFPrefsSearchListSource alreadylocked_generationCountFromListOfSources:count:] (1 samples, 0.03%)</title><rect x="0.5683%" y="581" width="0.0258%" height="15" fill="rgb(252,106,19)" fg:x="22" fg:w="1"/><text x="0.8183%" y="591.50"></text></g><g><title>generationCountFromListOfSources (1 samples, 0.03%)</title><rect x="0.5683%" y="565" width="0.0258%" height="15" fill="rgb(206,74,20)" fg:x="22" fg:w="1"/><text x="0.8183%" y="575.50"></text></g><g><title>_CFPrefsGetCacheStringForBundleID (1 samples, 0.03%)</title><rect x="0.5942%" y="677" width="0.0258%" height="15" fill="rgb(230,138,44)" fg:x="23" fg:w="1"/><text x="0.8442%" y="687.50"></text></g><g><title>CFBundleGetMainBundle (1 samples, 0.03%)</title><rect x="0.5942%" y="661" width="0.0258%" height="15" fill="rgb(235,182,43)" fg:x="23" fg:w="1"/><text x="0.8442%" y="671.50"></text></g><g><title>_CFBundleCreate (1 samples, 0.03%)</title><rect x="0.5942%" y="645" width="0.0258%" height="15" fill="rgb(242,16,51)" fg:x="23" fg:w="1"/><text x="0.8442%" y="655.50"></text></g><g><title>_CFBundleGetBundleVersionForURL (1 samples, 0.03%)</title><rect x="0.5942%" y="629" width="0.0258%" height="15" fill="rgb(248,9,4)" fg:x="23" fg:w="1"/><text x="0.8442%" y="639.50"></text></g><g><title>_CFIterateDirectory (1 samples, 0.03%)</title><rect x="0.5942%" y="613" width="0.0258%" height="15" fill="rgb(210,31,22)" fg:x="23" fg:w="1"/><text x="0.8442%" y="623.50"></text></g><g><title>readdir (1 samples, 0.03%)</title><rect x="0.5942%" y="597" width="0.0258%" height="15" fill="rgb(239,54,39)" fg:x="23" fg:w="1"/><text x="0.8442%" y="607.50"></text></g><g><title>__getdirentries64 (1 samples, 0.03%)</title><rect x="0.5942%" y="581" width="0.0258%" height="15" fill="rgb(230,99,41)" fg:x="23" fg:w="1"/><text x="0.8442%" y="591.50"></text></g><g><title>-[CFPrefsSearchListSource addNamedVolatileSourceForIdentifier:] (1 samples, 0.03%)</title><rect x="0.6200%" y="629" width="0.0258%" height="15" fill="rgb(253,106,12)" fg:x="24" fg:w="1"/><text x="0.8700%" y="639.50"></text></g><g><title>-[_CFXPreferences withNamedVolatileSourceForIdentifier:perform:] (1 samples, 0.03%)</title><rect x="0.6200%" y="613" width="0.0258%" height="15" fill="rgb(213,46,41)" fg:x="24" fg:w="1"/><text x="0.8700%" y="623.50"></text></g><g><title>__81-[_CFXPreferences(SourceAdditions) withNamedVolatileSourceForIdentifier:perform:]_block_invoke (1 samples, 0.03%)</title><rect x="0.6200%" y="597" width="0.0258%" height="15" fill="rgb(215,133,35)" fg:x="24" fg:w="1"/><text x="0.8700%" y="607.50"></text></g><g><title>_addBackstopValuesForIdentifierAndSource (1 samples, 0.03%)</title><rect x="0.6200%" y="581" width="0.0258%" height="15" fill="rgb(213,28,5)" fg:x="24" fg:w="1"/><text x="0.8700%" y="591.50"></text></g><g><title>_addBackstopValuesForIdentifierAndSource.cold.1 (1 samples, 0.03%)</title><rect x="0.6200%" y="565" width="0.0258%" height="15" fill="rgb(215,77,49)" fg:x="24" fg:w="1"/><text x="0.8700%" y="575.50"></text></g><g><title>-[CFPrefsSource setValues:forKeys:count:copyValues:removeValuesForKeys:count:from:] (1 samples, 0.03%)</title><rect x="0.6200%" y="549" width="0.0258%" height="15" fill="rgb(248,100,22)" fg:x="24" fg:w="1"/><text x="0.8700%" y="559.50"></text></g><g><title>createDeepCopyOfValueForKey (1 samples, 0.03%)</title><rect x="0.6200%" y="533" width="0.0258%" height="15" fill="rgb(208,67,9)" fg:x="24" fg:w="1"/><text x="0.8700%" y="543.50"></text></g><g><title>CFPropertyListCreateDeepCopy (1 samples, 0.03%)</title><rect x="0.6200%" y="517" width="0.0258%" height="15" fill="rgb(219,133,21)" fg:x="24" fg:w="1"/><text x="0.8700%" y="527.50"></text></g><g><title>__CFPropertyListIsValidAux (1 samples, 0.03%)</title><rect x="0.6200%" y="501" width="0.0258%" height="15" fill="rgb(246,46,29)" fg:x="24" fg:w="1"/><text x="0.8700%" y="511.50"></text></g><g><title>CFBasicHashAddValue (1 samples, 0.03%)</title><rect x="0.6200%" y="485" width="0.0258%" height="15" fill="rgb(246,185,52)" fg:x="24" fg:w="1"/><text x="0.8700%" y="495.50"></text></g><g><title>__CFBasicHashAddValue (1 samples, 0.03%)</title><rect x="0.6200%" y="469" width="0.0258%" height="15" fill="rgb(252,136,11)" fg:x="24" fg:w="1"/><text x="0.8700%" y="479.50"></text></g><g><title>__CFBasicHashRehash (1 samples, 0.03%)</title><rect x="0.6200%" y="453" width="0.0258%" height="15" fill="rgb(219,138,53)" fg:x="24" fg:w="1"/><text x="0.8700%" y="463.50"></text></g><g><title>start (25 samples, 0.65%)</title><rect x="0.0258%" y="1029" width="0.6458%" height="15" fill="rgb(211,51,23)" fg:x="1" fg:w="25"/><text x="0.2758%" y="1039.50"></text></g><g><title>main (22 samples, 0.57%)</title><rect x="0.1033%" y="1013" width="0.5683%" height="15" fill="rgb(247,221,28)" fg:x="4" fg:w="22"/><text x="0.3533%" y="1023.50"></text></g><g><title>std::rt::lang_start_internal (22 samples, 0.57%)</title><rect x="0.1033%" y="997" width="0.5683%" height="15" fill="rgb(251,222,45)" fg:x="4" fg:w="22"/><text x="0.3533%" y="1007.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (22 samples, 0.57%)</title><rect x="0.1033%" y="981" width="0.5683%" height="15" fill="rgb(217,162,53)" fg:x="4" fg:w="22"/><text x="0.3533%" y="991.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (22 samples, 0.57%)</title><rect x="0.1033%" y="965" width="0.5683%" height="15" fill="rgb(229,93,14)" fg:x="4" fg:w="22"/><text x="0.3533%" y="975.50"></text></g><g><title>okex::main (22 samples, 0.57%)</title><rect x="0.1033%" y="949" width="0.5683%" height="15" fill="rgb(209,67,49)" fg:x="4" fg:w="22"/><text x="0.3533%" y="959.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (22 samples, 0.57%)</title><rect x="0.1033%" y="933" width="0.5683%" height="15" fill="rgb(213,87,29)" fg:x="4" fg:w="22"/><text x="0.3533%" y="943.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (22 samples, 0.57%)</title><rect x="0.1033%" y="917" width="0.5683%" height="15" fill="rgb(205,151,52)" fg:x="4" fg:w="22"/><text x="0.3533%" y="927.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (22 samples, 0.57%)</title><rect x="0.1033%" y="901" width="0.5683%" height="15" fill="rgb(253,215,39)" fg:x="4" fg:w="22"/><text x="0.3533%" y="911.50"></text></g><g><title>quant_exchange::okex::OkexClient::get_writer_and_reader::_{{closure}} (22 samples, 0.57%)</title><rect x="0.1033%" y="885" width="0.5683%" height="15" fill="rgb(221,220,41)" fg:x="4" fg:w="22"/><text x="0.3533%" y="895.50"></text></g><g><title>tokio_tungstenite::tls::encryption::native_tls::wrap_stream::_{{closure}} (18 samples, 0.46%)</title><rect x="0.2067%" y="869" width="0.4650%" height="15" fill="rgb(218,133,21)" fg:x="8" fg:w="18"/><text x="0.4567%" y="879.50"></text></g><g><title>&lt;tokio_native_tls::StartedHandshakeFuture&lt;F,S&gt; as core::future::future::Future&gt;::poll (4 samples, 0.10%)</title><rect x="0.5683%" y="853" width="0.1033%" height="15" fill="rgb(221,193,43)" fg:x="22" fg:w="4"/><text x="0.8183%" y="863.50"></text></g><g><title>native_tls::imp::TlsConnector::connect (4 samples, 0.10%)</title><rect x="0.5683%" y="837" width="0.1033%" height="15" fill="rgb(240,128,52)" fg:x="22" fg:w="4"/><text x="0.8183%" y="847.50"></text></g><g><title>security_framework::secure_transport::ClientBuilder::handshake (4 samples, 0.10%)</title><rect x="0.5683%" y="821" width="0.1033%" height="15" fill="rgb(253,114,12)" fg:x="22" fg:w="4"/><text x="0.8183%" y="831.50"></text></g><g><title>SSLCreateContext (4 samples, 0.10%)</title><rect x="0.5683%" y="805" width="0.1033%" height="15" fill="rgb(215,223,47)" fg:x="22" fg:w="4"/><text x="0.8183%" y="815.50"></text></g><g><title>SSLCreateContextWithRecordFuncs (4 samples, 0.10%)</title><rect x="0.5683%" y="789" width="0.1033%" height="15" fill="rgb(248,225,23)" fg:x="22" fg:w="4"/><text x="0.8183%" y="799.50"></text></g><g><title>_dispatch_once_callout (4 samples, 0.10%)</title><rect x="0.5683%" y="773" width="0.1033%" height="15" fill="rgb(250,108,0)" fg:x="22" fg:w="4"/><text x="0.8183%" y="783.50"></text></g><g><title>_dispatch_client_callout (4 samples, 0.10%)</title><rect x="0.5683%" y="757" width="0.1033%" height="15" fill="rgb(228,208,7)" fg:x="22" fg:w="4"/><text x="0.8183%" y="767.50"></text></g><g><title>__SSLCreateContextWithRecordFuncs_block_invoke (4 samples, 0.10%)</title><rect x="0.5683%" y="741" width="0.1033%" height="15" fill="rgb(244,45,10)" fg:x="22" fg:w="4"/><text x="0.8183%" y="751.50"></text></g><g><title>_CFPreferencesCopyAppValueWithContainerAndConfiguration (3 samples, 0.08%)</title><rect x="0.5942%" y="725" width="0.0775%" height="15" fill="rgb(207,125,25)" fg:x="23" fg:w="3"/><text x="0.8442%" y="735.50"></text></g><g><title>-[_CFXPreferences copyAppValueForKey:identifier:container:configurationURL:] (3 samples, 0.08%)</title><rect x="0.5942%" y="709" width="0.0775%" height="15" fill="rgb(210,195,18)" fg:x="23" fg:w="3"/><text x="0.8442%" y="719.50"></text></g><g><title>-[_CFXPreferences withSearchListForIdentifier:container:cloudConfigurationURL:perform:] (3 samples, 0.08%)</title><rect x="0.5942%" y="693" width="0.0775%" height="15" fill="rgb(249,80,12)" fg:x="23" fg:w="3"/><text x="0.8442%" y="703.50"></text></g><g><title>__108-[_CFXPreferences(SearchListAdditions) withSearchListForIdentifier:container:cloudConfigurationURL:perform:]_block_invoke (2 samples, 0.05%)</title><rect x="0.6200%" y="677" width="0.0517%" height="15" fill="rgb(221,65,9)" fg:x="24" fg:w="2"/><text x="0.8700%" y="687.50"></text></g><g><title>-[_CFXPreferences withSearchLists:] (2 samples, 0.05%)</title><rect x="0.6200%" y="661" width="0.0517%" height="15" fill="rgb(235,49,36)" fg:x="24" fg:w="2"/><text x="0.8700%" y="671.50"></text></g><g><title>__108-[_CFXPreferences(SearchListAdditions) withSearchListForIdentifier:container:cloudConfigurationURL:perform:]_block_invoke.152 (2 samples, 0.05%)</title><rect x="0.6200%" y="645" width="0.0517%" height="15" fill="rgb(225,32,20)" fg:x="24" fg:w="2"/><text x="0.8700%" y="655.50"></text></g><g><title>-[CFPrefsSearchListSource addSourceForIdentifier:user:byHost:container:] (1 samples, 0.03%)</title><rect x="0.6458%" y="629" width="0.0258%" height="15" fill="rgb(215,141,46)" fg:x="25" fg:w="1"/><text x="0.8958%" y="639.50"></text></g><g><title>-[_CFXPreferences withSourceForIdentifier:user:byHost:container:cloud:perform:] (1 samples, 0.03%)</title><rect x="0.6458%" y="613" width="0.0258%" height="15" fill="rgb(250,160,47)" fg:x="25" fg:w="1"/><text x="0.8958%" y="623.50"></text></g><g><title>__96-[_CFXPreferences(SourceAdditions) withSourceForIdentifier:user:byHost:container:cloud:perform:]_block_invoke.213 (1 samples, 0.03%)</title><rect x="0.6458%" y="597" width="0.0258%" height="15" fill="rgb(216,222,40)" fg:x="25" fg:w="1"/><text x="0.8958%" y="607.50"></text></g><g><title>_CFCopyHomeDirURLForUser (1 samples, 0.03%)</title><rect x="0.6458%" y="581" width="0.0258%" height="15" fill="rgb(234,217,39)" fg:x="25" fg:w="1"/><text x="0.8958%" y="591.50"></text></g><g><title>getpwuid (1 samples, 0.03%)</title><rect x="0.6458%" y="565" width="0.0258%" height="15" fill="rgb(207,178,40)" fg:x="25" fg:w="1"/><text x="0.8958%" y="575.50"></text></g><g><title>search_item_bynumber (1 samples, 0.03%)</title><rect x="0.6458%" y="549" width="0.0258%" height="15" fill="rgb(221,136,13)" fg:x="25" fg:w="1"/><text x="0.8958%" y="559.50"></text></g><g><title>ds_user_byuid (1 samples, 0.03%)</title><rect x="0.6458%" y="533" width="0.0258%" height="15" fill="rgb(249,199,10)" fg:x="25" fg:w="1"/><text x="0.8958%" y="543.50"></text></g><g><title>_od_running (1 samples, 0.03%)</title><rect x="0.6458%" y="517" width="0.0258%" height="15" fill="rgb(249,222,13)" fg:x="25" fg:w="1"/><text x="0.8958%" y="527.50"></text></g><g><title>_od_xpc_pipe (1 samples, 0.03%)</title><rect x="0.6458%" y="501" width="0.0258%" height="15" fill="rgb(244,185,38)" fg:x="25" fg:w="1"/><text x="0.8958%" y="511.50"></text></g><g><title>xpc_pipe_create (1 samples, 0.03%)</title><rect x="0.6458%" y="485" width="0.0258%" height="15" fill="rgb(236,202,9)" fg:x="25" fg:w="1"/><text x="0.8958%" y="495.50"></text></g><g><title>_xpc_pipe_create (1 samples, 0.03%)</title><rect x="0.6458%" y="469" width="0.0258%" height="15" fill="rgb(250,229,37)" fg:x="25" fg:w="1"/><text x="0.8958%" y="479.50"></text></g><g><title>_xpc_mach_port_allocate (1 samples, 0.03%)</title><rect x="0.6458%" y="453" width="0.0258%" height="15" fill="rgb(206,174,23)" fg:x="25" fg:w="1"/><text x="0.8958%" y="463.50"></text></g><g><title>_xpc_mach_port_construct (1 samples, 0.03%)</title><rect x="0.6458%" y="437" width="0.0258%" height="15" fill="rgb(211,33,43)" fg:x="25" fg:w="1"/><text x="0.8958%" y="447.50"></text></g><g><title>_xpc_try_mach_port_construct (1 samples, 0.03%)</title><rect x="0.6458%" y="421" width="0.0258%" height="15" fill="rgb(245,58,50)" fg:x="25" fg:w="1"/><text x="0.8958%" y="431.50"></text></g><g><title>_kernelrpc_mach_port_construct_trap (1 samples, 0.03%)</title><rect x="0.6458%" y="405" width="0.0258%" height="15" fill="rgb(244,68,36)" fg:x="25" fg:w="1"/><text x="0.8958%" y="415.50"></text></g><g><title>start_wqthread (1 samples, 0.03%)</title><rect x="0.6717%" y="1029" width="0.0258%" height="15" fill="rgb(232,229,15)" fg:x="26" fg:w="1"/><text x="0.9217%" y="1039.50"></text></g><g><title>_pthread_wqthread (1 samples, 0.03%)</title><rect x="0.6717%" y="1013" width="0.0258%" height="15" fill="rgb(254,30,23)" fg:x="26" fg:w="1"/><text x="0.9217%" y="1023.50"></text></g><g><title>_dispatch_workloop_worker_thread (1 samples, 0.03%)</title><rect x="0.6717%" y="997" width="0.0258%" height="15" fill="rgb(235,160,14)" fg:x="26" fg:w="1"/><text x="0.9217%" y="1007.50"></text></g><g><title>_dispatch_root_queue_drain_deferred_wlh (1 samples, 0.03%)</title><rect x="0.6717%" y="981" width="0.0258%" height="15" fill="rgb(212,155,44)" fg:x="26" fg:w="1"/><text x="0.9217%" y="991.50"></text></g><g><title>_dispatch_lane_invoke (1 samples, 0.03%)</title><rect x="0.6717%" y="965" width="0.0258%" height="15" fill="rgb(226,2,50)" fg:x="26" fg:w="1"/><text x="0.9217%" y="975.50"></text></g><g><title>_dispatch_lane_serial_drain (1 samples, 0.03%)</title><rect x="0.6717%" y="949" width="0.0258%" height="15" fill="rgb(234,177,6)" fg:x="26" fg:w="1"/><text x="0.9217%" y="959.50"></text></g><g><title>_dispatch_client_callout (1 samples, 0.03%)</title><rect x="0.6717%" y="933" width="0.0258%" height="15" fill="rgb(217,24,9)" fg:x="26" fg:w="1"/><text x="0.9217%" y="943.50"></text></g><g><title>_dispatch_block_async_invoke2 (1 samples, 0.03%)</title><rect x="0.6717%" y="917" width="0.0258%" height="15" fill="rgb(220,13,46)" fg:x="26" fg:w="1"/><text x="0.9217%" y="927.50"></text></g><g><title>invocation function for block in CoreAnalytics::Client::sendXpcMessage_sync(applesauce::xpc::dict, XPCMessagePriority, bool, bool) (1 samples, 0.03%)</title><rect x="0.6717%" y="901" width="0.0258%" height="15" fill="rgb(239,221,27)" fg:x="26" fg:w="1"/><text x="0.9217%" y="911.50"></text></g><g><title>CoreAnalytics::Client::retryXpcMessage_sync(applesauce::xpc::dict const&amp;, XPCMessagePriority, bool) (1 samples, 0.03%)</title><rect x="0.6717%" y="885" width="0.0258%" height="15" fill="rgb(222,198,25)" fg:x="26" fg:w="1"/><text x="0.9217%" y="895.50"></text></g><g><title>CoreAnalytics::Client::retryXpcMessageHelper_sync(applesauce::xpc::dict, XPCMessagePriority, bool, unsigned char, unsigned long long) (1 samples, 0.03%)</title><rect x="0.6717%" y="869" width="0.0258%" height="15" fill="rgb(211,99,13)" fg:x="26" fg:w="1"/><text x="0.9217%" y="879.50"></text></g><g><title>xpc_connection_send_message_with_reply (1 samples, 0.03%)</title><rect x="0.6717%" y="853" width="0.0258%" height="15" fill="rgb(232,111,31)" fg:x="26" fg:w="1"/><text x="0.9217%" y="863.50"></text></g><g><title>_xpc_connection_pack_message (1 samples, 0.03%)</title><rect x="0.6717%" y="837" width="0.0258%" height="15" fill="rgb(245,82,37)" fg:x="26" fg:w="1"/><text x="0.9217%" y="847.50"></text></g><g><title>_xpc_serializer_pack (1 samples, 0.03%)</title><rect x="0.6717%" y="821" width="0.0258%" height="15" fill="rgb(227,149,46)" fg:x="26" fg:w="1"/><text x="0.9217%" y="831.50"></text></g><g><title>_xpc_dictionary_serialize (1 samples, 0.03%)</title><rect x="0.6717%" y="805" width="0.0258%" height="15" fill="rgb(218,36,50)" fg:x="26" fg:w="1"/><text x="0.9217%" y="815.50"></text></g><g><title>_xpc_dictionary_apply_node_f (1 samples, 0.03%)</title><rect x="0.6717%" y="789" width="0.0258%" height="15" fill="rgb(226,80,48)" fg:x="26" fg:w="1"/><text x="0.9217%" y="799.50"></text></g><g><title>pthread_once (1 samples, 0.03%)</title><rect x="0.6975%" y="757" width="0.0258%" height="15" fill="rgb(238,224,15)" fg:x="27" fg:w="1"/><text x="0.9475%" y="767.50"></text></g><g><title>_os_once (1 samples, 0.03%)</title><rect x="0.6975%" y="741" width="0.0258%" height="15" fill="rgb(241,136,10)" fg:x="27" fg:w="1"/><text x="0.9475%" y="751.50"></text></g><g><title>_os_once_callout (1 samples, 0.03%)</title><rect x="0.6975%" y="725" width="0.0258%" height="15" fill="rgb(208,32,45)" fg:x="27" fg:w="1"/><text x="0.9475%" y="735.50"></text></g><g><title>__pthread_once_handler (1 samples, 0.03%)</title><rect x="0.6975%" y="709" width="0.0258%" height="15" fill="rgb(207,135,9)" fg:x="27" fg:w="1"/><text x="0.9475%" y="719.50"></text></g><g><title>si_destination_compare_init_once (1 samples, 0.03%)</title><rect x="0.6975%" y="693" width="0.0258%" height="15" fill="rgb(206,86,44)" fg:x="27" fg:w="1"/><text x="0.9475%" y="703.50"></text></g><g><title>os_log_create (1 samples, 0.03%)</title><rect x="0.6975%" y="677" width="0.0258%" height="15" fill="rgb(245,177,15)" fg:x="27" fg:w="1"/><text x="0.9475%" y="687.50"></text></g><g><title>_dispatch_once_callout (1 samples, 0.03%)</title><rect x="0.6975%" y="661" width="0.0258%" height="15" fill="rgb(206,64,50)" fg:x="27" fg:w="1"/><text x="0.9475%" y="671.50"></text></g><g><title>_dispatch_client_callout (1 samples, 0.03%)</title><rect x="0.6975%" y="645" width="0.0258%" height="15" fill="rgb(234,36,40)" fg:x="27" fg:w="1"/><text x="0.9475%" y="655.50"></text></g><g><title>_os_trace_init_slow (1 samples, 0.03%)</title><rect x="0.6975%" y="629" width="0.0258%" height="15" fill="rgb(213,64,8)" fg:x="27" fg:w="1"/><text x="0.9475%" y="639.50"></text></g><g><title>voucher_activity_get_metadata_buffer (1 samples, 0.03%)</title><rect x="0.6975%" y="613" width="0.0258%" height="15" fill="rgb(210,75,36)" fg:x="27" fg:w="1"/><text x="0.9475%" y="623.50"></text></g><g><title>_dispatch_once_callout (1 samples, 0.03%)</title><rect x="0.6975%" y="597" width="0.0258%" height="15" fill="rgb(229,88,21)" fg:x="27" fg:w="1"/><text x="0.9475%" y="607.50"></text></g><g><title>_dispatch_client_callout (1 samples, 0.03%)</title><rect x="0.6975%" y="581" width="0.0258%" height="15" fill="rgb(252,204,47)" fg:x="27" fg:w="1"/><text x="0.9475%" y="591.50"></text></g><g><title>_firehose_task_buffer_init (1 samples, 0.03%)</title><rect x="0.6975%" y="565" width="0.0258%" height="15" fill="rgb(208,77,27)" fg:x="27" fg:w="1"/><text x="0.9475%" y="575.50"></text></g><g><title>_os_trace_get_logd_port (1 samples, 0.03%)</title><rect x="0.6975%" y="549" width="0.0258%" height="15" fill="rgb(221,76,26)" fg:x="27" fg:w="1"/><text x="0.9475%" y="559.50"></text></g><g><title>bootstrap_look_up2 (1 samples, 0.03%)</title><rect x="0.6975%" y="533" width="0.0258%" height="15" fill="rgb(225,139,18)" fg:x="27" fg:w="1"/><text x="0.9475%" y="543.50"></text></g><g><title>bootstrap_look_up3 (1 samples, 0.03%)</title><rect x="0.6975%" y="517" width="0.0258%" height="15" fill="rgb(230,137,11)" fg:x="27" fg:w="1"/><text x="0.9475%" y="527.50"></text></g><g><title>_xpc_interface_routine (1 samples, 0.03%)</title><rect x="0.6975%" y="501" width="0.0258%" height="15" fill="rgb(212,28,1)" fg:x="27" fg:w="1"/><text x="0.9475%" y="511.50"></text></g><g><title>_xpc_pipe_routine (1 samples, 0.03%)</title><rect x="0.6975%" y="485" width="0.0258%" height="15" fill="rgb(248,164,17)" fg:x="27" fg:w="1"/><text x="0.9475%" y="495.50"></text></g><g><title>_xpc_pipe_mach_msg (1 samples, 0.03%)</title><rect x="0.6975%" y="469" width="0.0258%" height="15" fill="rgb(222,171,42)" fg:x="27" fg:w="1"/><text x="0.9475%" y="479.50"></text></g><g><title>mach_msg (1 samples, 0.03%)</title><rect x="0.6975%" y="453" width="0.0258%" height="15" fill="rgb(243,84,45)" fg:x="27" fg:w="1"/><text x="0.9475%" y="463.50"></text></g><g><title>mach_msg_overwrite (1 samples, 0.03%)</title><rect x="0.6975%" y="437" width="0.0258%" height="15" fill="rgb(252,49,23)" fg:x="27" fg:w="1"/><text x="0.9475%" y="447.50"></text></g><g><title>mach_msg2_trap (1 samples, 0.03%)</title><rect x="0.6975%" y="421" width="0.0258%" height="15" fill="rgb(215,19,7)" fg:x="27" fg:w="1"/><text x="0.9475%" y="431.50"></text></g><g><title>_gai_sort_list (2 samples, 0.05%)</title><rect x="0.6975%" y="805" width="0.0517%" height="15" fill="rgb(238,81,41)" fg:x="27" fg:w="2"/><text x="0.9475%" y="815.50"></text></g><g><title>_isort (2 samples, 0.05%)</title><rect x="0.6975%" y="789" width="0.0517%" height="15" fill="rgb(210,199,37)" fg:x="27" fg:w="2"/><text x="0.9475%" y="799.50"></text></g><g><title>si_destination_compare (2 samples, 0.05%)</title><rect x="0.6975%" y="773" width="0.0517%" height="15" fill="rgb(244,192,49)" fg:x="27" fg:w="2"/><text x="0.9475%" y="783.50"></text></g><g><title>si_destination_lookup (1 samples, 0.03%)</title><rect x="0.7233%" y="757" width="0.0258%" height="15" fill="rgb(226,211,11)" fg:x="28" fg:w="1"/><text x="0.9733%" y="767.50"></text></g><g><title>si_destination_fill_netsrc (1 samples, 0.03%)</title><rect x="0.7233%" y="741" width="0.0258%" height="15" fill="rgb(236,162,54)" fg:x="28" fg:w="1"/><text x="0.9733%" y="751.50"></text></g><g><title>__sendto_nocancel (1 samples, 0.03%)</title><rect x="0.7233%" y="725" width="0.0258%" height="15" fill="rgb(220,229,9)" fg:x="28" fg:w="1"/><text x="0.9733%" y="735.50"></text></g><g><title>_os_log_impl (1 samples, 0.03%)</title><rect x="0.7492%" y="789" width="0.0258%" height="15" fill="rgb(250,87,22)" fg:x="29" fg:w="1"/><text x="0.9992%" y="799.50"></text></g><g><title>_os_log (1 samples, 0.03%)</title><rect x="0.7492%" y="773" width="0.0258%" height="15" fill="rgb(239,43,17)" fg:x="29" fg:w="1"/><text x="0.9992%" y="783.50"></text></g><g><title>_os_log_impl_flatten_and_send (1 samples, 0.03%)</title><rect x="0.7492%" y="757" width="0.0258%" height="15" fill="rgb(231,177,25)" fg:x="29" fg:w="1"/><text x="0.9992%" y="767.50"></text></g><g><title>_os_log_fmt_flatten_object_impl (1 samples, 0.03%)</title><rect x="0.7492%" y="741" width="0.0258%" height="15" fill="rgb(219,179,1)" fg:x="29" fg:w="1"/><text x="0.9992%" y="751.50"></text></g><g><title>_os_log_fmt_flatten_NSCF (1 samples, 0.03%)</title><rect x="0.7492%" y="725" width="0.0258%" height="15" fill="rgb(238,219,53)" fg:x="29" fg:w="1"/><text x="0.9992%" y="735.50"></text></g><g><title>_NS_os_log_callback (1 samples, 0.03%)</title><rect x="0.7492%" y="709" width="0.0258%" height="15" fill="rgb(232,167,36)" fg:x="29" fg:w="1"/><text x="0.9992%" y="719.50"></text></g><g><title>-[NWConcrete_nw_parameters description] (1 samples, 0.03%)</title><rect x="0.7492%" y="693" width="0.0258%" height="15" fill="rgb(244,19,51)" fg:x="29" fg:w="1"/><text x="0.9992%" y="703.50"></text></g><g><title>nw_parameters_copy_description_internal(NWConcrete_nw_parameters*, bool) (1 samples, 0.03%)</title><rect x="0.7492%" y="677" width="0.0258%" height="15" fill="rgb(224,6,22)" fg:x="29" fg:w="1"/><text x="0.9992%" y="687.50"></text></g><g><title>_dispatch_once_callout (1 samples, 0.03%)</title><rect x="0.7492%" y="661" width="0.0258%" height="15" fill="rgb(224,145,5)" fg:x="29" fg:w="1"/><text x="0.9992%" y="671.50"></text></g><g><title>_dispatch_client_callout (1 samples, 0.03%)</title><rect x="0.7492%" y="645" width="0.0258%" height="15" fill="rgb(234,130,49)" fg:x="29" fg:w="1"/><text x="0.9992%" y="655.50"></text></g><g><title>__nwlog_get_private_redacted_block_invoke (1 samples, 0.03%)</title><rect x="0.7492%" y="629" width="0.0258%" height="15" fill="rgb(254,6,2)" fg:x="29" fg:w="1"/><text x="0.9992%" y="639.50"></text></g><g><title>_os_log_send_and_compose_impl (1 samples, 0.03%)</title><rect x="0.7492%" y="613" width="0.0258%" height="15" fill="rgb(208,96,46)" fg:x="29" fg:w="1"/><text x="0.9992%" y="623.50"></text></g><g><title>_os_log_impl_flatten_and_send (1 samples, 0.03%)</title><rect x="0.7492%" y="597" width="0.0258%" height="15" fill="rgb(239,3,39)" fg:x="29" fg:w="1"/><text x="0.9992%" y="607.50"></text></g><g><title>_dispatch_once_callout (1 samples, 0.03%)</title><rect x="0.7750%" y="757" width="0.0258%" height="15" fill="rgb(233,210,1)" fg:x="30" fg:w="1"/><text x="1.0250%" y="767.50"></text></g><g><title>_dispatch_client_callout (1 samples, 0.03%)</title><rect x="0.7750%" y="741" width="0.0258%" height="15" fill="rgb(244,137,37)" fg:x="30" fg:w="1"/><text x="1.0250%" y="751.50"></text></g><g><title>invocation function for block in nw_protocol_setup_ip_definition() (1 samples, 0.03%)</title><rect x="0.7750%" y="725" width="0.0258%" height="15" fill="rgb(240,136,2)" fg:x="30" fg:w="1"/><text x="1.0250%" y="735.50"></text></g><g><title>_dispatch_once_callout (1 samples, 0.03%)</title><rect x="0.7750%" y="709" width="0.0258%" height="15" fill="rgb(239,18,37)" fg:x="30" fg:w="1"/><text x="1.0250%" y="719.50"></text></g><g><title>_dispatch_client_callout (1 samples, 0.03%)</title><rect x="0.7750%" y="693" width="0.0258%" height="15" fill="rgb(218,185,22)" fg:x="30" fg:w="1"/><text x="1.0250%" y="703.50"></text></g><g><title>nw_protocol_register_extended (1 samples, 0.03%)</title><rect x="0.7750%" y="677" width="0.0258%" height="15" fill="rgb(225,218,4)" fg:x="30" fg:w="1"/><text x="1.0250%" y="687.50"></text></g><g><title>nw_allow_use_of_dispatch_internal (1 samples, 0.03%)</title><rect x="0.7750%" y="661" width="0.0258%" height="15" fill="rgb(230,182,32)" fg:x="30" fg:w="1"/><text x="1.0250%" y="671.50"></text></g><g><title>networkd_settings_init (1 samples, 0.03%)</title><rect x="0.7750%" y="645" width="0.0258%" height="15" fill="rgb(242,56,43)" fg:x="30" fg:w="1"/><text x="1.0250%" y="655.50"></text></g><g><title>networkd_settings_update_from_token(int) (1 samples, 0.03%)</title><rect x="0.7750%" y="629" width="0.0258%" height="15" fill="rgb(233,99,24)" fg:x="30" fg:w="1"/><text x="1.0250%" y="639.50"></text></g><g><title>networkd_settings_read_from_file() (1 samples, 0.03%)</title><rect x="0.7750%" y="613" width="0.0258%" height="15" fill="rgb(234,209,42)" fg:x="30" fg:w="1"/><text x="1.0250%" y="623.50"></text></g><g><title>open (1 samples, 0.03%)</title><rect x="0.7750%" y="597" width="0.0258%" height="15" fill="rgb(227,7,12)" fg:x="30" fg:w="1"/><text x="1.0250%" y="607.50"></text></g><g><title>__open (1 samples, 0.03%)</title><rect x="0.7750%" y="581" width="0.0258%" height="15" fill="rgb(245,203,43)" fg:x="30" fg:w="1"/><text x="1.0250%" y="591.50"></text></g><g><title>nw_parameters_create_legacy_tcp_socket (2 samples, 0.05%)</title><rect x="0.7750%" y="789" width="0.0517%" height="15" fill="rgb(238,205,33)" fg:x="30" fg:w="2"/><text x="1.0250%" y="799.50"></text></g><g><title>nw_parameters_create (2 samples, 0.05%)</title><rect x="0.7750%" y="773" width="0.0517%" height="15" fill="rgb(231,56,7)" fg:x="30" fg:w="2"/><text x="1.0250%" y="783.50"></text></g><g><title>_objc_msgSend_uncached (1 samples, 0.03%)</title><rect x="0.8008%" y="757" width="0.0258%" height="15" fill="rgb(244,186,29)" fg:x="31" fg:w="1"/><text x="1.0508%" y="767.50"></text></g><g><title>lookUpImpOrForward (1 samples, 0.03%)</title><rect x="0.8008%" y="741" width="0.0258%" height="15" fill="rgb(234,111,31)" fg:x="31" fg:w="1"/><text x="1.0508%" y="751.50"></text></g><g><title>&lt;str as std::net::socket_addr::ToSocketAddrs&gt;::to_socket_addrs (6 samples, 0.15%)</title><rect x="0.6975%" y="885" width="0.1550%" height="15" fill="rgb(241,149,10)" fg:x="27" fg:w="6"/><text x="0.9475%" y="895.50"></text></g><g><title>&lt;std::sys::net::connection::socket::LookupHost as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (6 samples, 0.15%)</title><rect x="0.6975%" y="869" width="0.1550%" height="15" fill="rgb(249,206,44)" fg:x="27" fg:w="6"/><text x="0.9475%" y="879.50"></text></g><g><title>&lt;std::sys::net::connection::socket::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from::_{{closure}} (6 samples, 0.15%)</title><rect x="0.6975%" y="853" width="0.1550%" height="15" fill="rgb(251,153,30)" fg:x="27" fg:w="6"/><text x="0.9475%" y="863.50"></text></g><g><title>getaddrinfo (6 samples, 0.15%)</title><rect x="0.6975%" y="837" width="0.1550%" height="15" fill="rgb(239,152,38)" fg:x="27" fg:w="6"/><text x="0.9475%" y="847.50"></text></g><g><title>si_addrinfo (6 samples, 0.15%)</title><rect x="0.6975%" y="821" width="0.1550%" height="15" fill="rgb(249,139,47)" fg:x="27" fg:w="6"/><text x="0.9475%" y="831.50"></text></g><g><title>nw_path_libinfo_path_check (4 samples, 0.10%)</title><rect x="0.7492%" y="805" width="0.1033%" height="15" fill="rgb(244,64,35)" fg:x="29" fg:w="4"/><text x="0.9992%" y="815.50"></text></g><g><title>nw_path_create_evaluator_for_endpoint (1 samples, 0.03%)</title><rect x="0.8267%" y="789" width="0.0258%" height="15" fill="rgb(216,46,15)" fg:x="32" fg:w="1"/><text x="1.0767%" y="799.50"></text></g><g><title>nw_path_evaluator_evaluate(NWConcrete_nw_path_evaluator*, int*) (1 samples, 0.03%)</title><rect x="0.8267%" y="773" width="0.0258%" height="15" fill="rgb(250,74,19)" fg:x="32" fg:w="1"/><text x="1.0767%" y="783.50"></text></g><g><title>necp_client_action (1 samples, 0.03%)</title><rect x="0.8267%" y="757" width="0.0258%" height="15" fill="rgb(249,42,33)" fg:x="32" fg:w="1"/><text x="1.0767%" y="767.50"></text></g><g><title>DYLD-STUB$$mach_absolute_time (1 samples, 0.03%)</title><rect x="1.7050%" y="773" width="0.0258%" height="15" fill="rgb(242,149,17)" fg:x="66" fg:w="1"/><text x="1.9550%" y="783.50"></text></g><g><title>mach_absolute_time (120 samples, 3.10%)</title><rect x="1.7308%" y="773" width="3.1000%" height="15" fill="rgb(244,29,21)" fg:x="67" fg:w="120"/><text x="1.9808%" y="783.50">mac..</text></g><g><title>std::sys::pal::unix::time::Timespec::now (133 samples, 3.44%)</title><rect x="1.4725%" y="821" width="3.4358%" height="15" fill="rgb(220,130,37)" fg:x="57" fg:w="133"/><text x="1.7225%" y="831.50">std..</text></g><g><title>clock_gettime (132 samples, 3.41%)</title><rect x="1.4983%" y="805" width="3.4100%" height="15" fill="rgb(211,67,2)" fg:x="58" fg:w="132"/><text x="1.7483%" y="815.50">clo..</text></g><g><title>clock_gettime_nsec_np (130 samples, 3.36%)</title><rect x="1.5500%" y="789" width="3.3583%" height="15" fill="rgb(235,68,52)" fg:x="60" fg:w="130"/><text x="1.8000%" y="799.50">clo..</text></g><g><title>mach_timebase_info (3 samples, 0.08%)</title><rect x="4.8308%" y="773" width="0.0775%" height="15" fill="rgb(246,142,3)" fg:x="187" fg:w="3"/><text x="5.0808%" y="783.50"></text></g><g><title>DYLD-STUB$$mach_absolute_time (1 samples, 0.03%)</title><rect x="4.9858%" y="757" width="0.0258%" height="15" fill="rgb(241,25,7)" fg:x="193" fg:w="1"/><text x="5.2358%" y="767.50"></text></g><g><title>DYLD-STUB$$mach_timebase_info (1 samples, 0.03%)</title><rect x="5.0116%" y="757" width="0.0258%" height="15" fill="rgb(242,119,39)" fg:x="194" fg:w="1"/><text x="5.2616%" y="767.50"></text></g><g><title>mach_absolute_time (23 samples, 0.59%)</title><rect x="5.0375%" y="757" width="0.5942%" height="15" fill="rgb(241,98,45)" fg:x="195" fg:w="23"/><text x="5.2875%" y="767.50"></text></g><g><title>std::time::Instant::elapsed (29 samples, 0.75%)</title><rect x="4.9083%" y="821" width="0.7492%" height="15" fill="rgb(254,28,30)" fg:x="190" fg:w="29"/><text x="5.1583%" y="831.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (29 samples, 0.75%)</title><rect x="4.9083%" y="805" width="0.7492%" height="15" fill="rgb(241,142,54)" fg:x="190" fg:w="29"/><text x="5.1583%" y="815.50"></text></g><g><title>clock_gettime (29 samples, 0.75%)</title><rect x="4.9083%" y="789" width="0.7492%" height="15" fill="rgb(222,85,15)" fg:x="190" fg:w="29"/><text x="5.1583%" y="799.50"></text></g><g><title>clock_gettime_nsec_np (28 samples, 0.72%)</title><rect x="4.9341%" y="773" width="0.7233%" height="15" fill="rgb(210,85,47)" fg:x="191" fg:w="28"/><text x="5.1841%" y="783.50"></text></g><g><title>mach_timebase_info (1 samples, 0.03%)</title><rect x="5.6316%" y="757" width="0.0258%" height="15" fill="rgb(224,206,25)" fg:x="218" fg:w="1"/><text x="5.8816%" y="767.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (1 samples, 0.03%)</title><rect x="5.6575%" y="821" width="0.0258%" height="15" fill="rgb(243,201,19)" fg:x="219" fg:w="1"/><text x="5.9075%" y="831.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (26 samples, 0.67%)</title><rect x="5.6833%" y="821" width="0.6717%" height="15" fill="rgb(236,59,4)" fg:x="220" fg:w="26"/><text x="5.9333%" y="831.50"></text></g><g><title>DYLD-STUB$$pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="6.6908%" y="773" width="0.0258%" height="15" fill="rgb(254,179,45)" fg:x="259" fg:w="1"/><text x="6.9408%" y="783.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (6 samples, 0.15%)</title><rect x="6.6908%" y="789" width="0.1550%" height="15" fill="rgb(226,14,10)" fg:x="259" fg:w="6"/><text x="6.9408%" y="799.50"></text></g><g><title>_pthread_cond_wait (5 samples, 0.13%)</title><rect x="6.7166%" y="773" width="0.1292%" height="15" fill="rgb(244,27,41)" fg:x="260" fg:w="5"/><text x="6.9666%" y="783.50"></text></g><g><title>__psynch_cvwait (3 samples, 0.08%)</title><rect x="6.7683%" y="757" width="0.0775%" height="15" fill="rgb(235,35,32)" fg:x="262" fg:w="3"/><text x="7.0183%" y="767.50"></text></g><g><title>mio::poll::Poll::poll (1 samples, 0.03%)</title><rect x="7.1816%" y="773" width="0.0258%" height="15" fill="rgb(218,68,31)" fg:x="278" fg:w="1"/><text x="7.4316%" y="783.50"></text></g><g><title>DYLD-STUB$$clock_gettime (6 samples, 0.15%)</title><rect x="7.3108%" y="757" width="0.1550%" height="15" fill="rgb(207,120,37)" fg:x="283" fg:w="6"/><text x="7.5608%" y="767.50"></text></g><g><title>DYLD-STUB$$mach_timebase_info (3 samples, 0.08%)</title><rect x="7.5433%" y="725" width="0.0775%" height="15" fill="rgb(227,98,0)" fg:x="292" fg:w="3"/><text x="7.7933%" y="735.50"></text></g><g><title>mach_absolute_time (33 samples, 0.85%)</title><rect x="7.6208%" y="725" width="0.8525%" height="15" fill="rgb(207,7,3)" fg:x="295" fg:w="33"/><text x="7.8708%" y="735.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (50 samples, 1.29%)</title><rect x="7.2074%" y="773" width="1.2917%" height="15" fill="rgb(206,98,19)" fg:x="279" fg:w="50"/><text x="7.4574%" y="783.50"></text></g><g><title>clock_gettime (40 samples, 1.03%)</title><rect x="7.4658%" y="757" width="1.0333%" height="15" fill="rgb(217,5,26)" fg:x="289" fg:w="40"/><text x="7.7158%" y="767.50"></text></g><g><title>clock_gettime_nsec_np (38 samples, 0.98%)</title><rect x="7.5174%" y="741" width="0.9817%" height="15" fill="rgb(235,190,38)" fg:x="291" fg:w="38"/><text x="7.7674%" y="751.50"></text></g><g><title>mach_timebase_info (1 samples, 0.03%)</title><rect x="8.4733%" y="725" width="0.0258%" height="15" fill="rgb(247,86,24)" fg:x="328" fg:w="1"/><text x="8.7233%" y="735.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (4 samples, 0.10%)</title><rect x="8.4991%" y="773" width="0.1033%" height="15" fill="rgb(205,101,16)" fg:x="329" fg:w="4"/><text x="8.7491%" y="783.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (266 samples, 6.87%)</title><rect x="8.6024%" y="773" width="6.8716%" height="15" fill="rgb(246,168,33)" fg:x="333" fg:w="266"/><text x="8.8524%" y="783.50">tokio::ru..</text></g><g><title>mio::poll::Poll::poll (182 samples, 4.70%)</title><rect x="10.7724%" y="757" width="4.7016%" height="15" fill="rgb(231,114,1)" fg:x="417" fg:w="182"/><text x="11.0224%" y="767.50">mio::..</text></g><g><title>kevent (165 samples, 4.26%)</title><rect x="11.2116%" y="741" width="4.2625%" height="15" fill="rgb(207,184,53)" fg:x="434" fg:w="165"/><text x="11.4616%" y="751.50">kevent</text></g><g><title>tokio::runtime::signal::Driver::process (3 samples, 0.08%)</title><rect x="15.4740%" y="773" width="0.0775%" height="15" fill="rgb(224,95,51)" fg:x="599" fg:w="3"/><text x="15.7240%" y="783.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (339 samples, 8.76%)</title><rect x="6.8458%" y="789" width="8.7574%" height="15" fill="rgb(212,188,45)" fg:x="265" fg:w="339"/><text x="7.0958%" y="799.50">tokio::runti..</text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (2 samples, 0.05%)</title><rect x="15.5515%" y="773" width="0.0517%" height="15" fill="rgb(223,154,38)" fg:x="602" fg:w="2"/><text x="15.8015%" y="783.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (4 samples, 0.10%)</title><rect x="15.7840%" y="773" width="0.1033%" height="15" fill="rgb(251,22,52)" fg:x="611" fg:w="4"/><text x="16.0340%" y="783.50"></text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (15 samples, 0.39%)</title><rect x="15.6032%" y="789" width="0.3875%" height="15" fill="rgb(229,209,22)" fg:x="604" fg:w="15"/><text x="15.8532%" y="799.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (4 samples, 0.10%)</title><rect x="15.8874%" y="773" width="0.1033%" height="15" fill="rgb(234,138,34)" fg:x="615" fg:w="4"/><text x="16.1374%" y="783.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.03%)</title><rect x="15.9649%" y="757" width="0.0258%" height="15" fill="rgb(212,95,11)" fg:x="618" fg:w="1"/><text x="16.2149%" y="767.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (370 samples, 9.56%)</title><rect x="6.4583%" y="805" width="9.5583%" height="15" fill="rgb(240,179,47)" fg:x="250" fg:w="370"/><text x="6.7083%" y="815.50">tokio::runtime..</text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (1 samples, 0.03%)</title><rect x="15.9907%" y="789" width="0.0258%" height="15" fill="rgb(240,163,11)" fg:x="619" fg:w="1"/><text x="16.2407%" y="799.50"></text></g><g><title>_tlv_get_addr (3 samples, 0.08%)</title><rect x="16.5332%" y="757" width="0.0775%" height="15" fill="rgb(236,37,12)" fg:x="640" fg:w="3"/><text x="16.7832%" y="767.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (24 samples, 0.62%)</title><rect x="16.0165%" y="805" width="0.6200%" height="15" fill="rgb(232,164,16)" fg:x="620" fg:w="24"/><text x="16.2665%" y="815.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (5 samples, 0.13%)</title><rect x="16.5074%" y="789" width="0.1292%" height="15" fill="rgb(244,205,15)" fg:x="639" fg:w="5"/><text x="16.7574%" y="799.50"></text></g><g><title>tokio::runtime::context::with_scheduler (5 samples, 0.13%)</title><rect x="16.5074%" y="773" width="0.1292%" height="15" fill="rgb(223,117,47)" fg:x="639" fg:w="5"/><text x="16.7574%" y="783.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (1 samples, 0.03%)</title><rect x="16.6107%" y="757" width="0.0258%" height="15" fill="rgb(244,107,35)" fg:x="643" fg:w="1"/><text x="16.8607%" y="767.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (9 samples, 0.23%)</title><rect x="16.6365%" y="805" width="0.2325%" height="15" fill="rgb(205,140,8)" fg:x="644" fg:w="9"/><text x="16.8865%" y="815.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (8 samples, 0.21%)</title><rect x="16.6624%" y="789" width="0.2067%" height="15" fill="rgb(228,84,46)" fg:x="645" fg:w="8"/><text x="16.9124%" y="799.50"></text></g><g><title>mio::poll::Poll::poll (7 samples, 0.18%)</title><rect x="16.6882%" y="773" width="0.1808%" height="15" fill="rgb(254,188,9)" fg:x="646" fg:w="7"/><text x="16.9382%" y="783.50"></text></g><g><title>kevent (7 samples, 0.18%)</title><rect x="16.6882%" y="757" width="0.1808%" height="15" fill="rgb(206,112,54)" fg:x="646" fg:w="7"/><text x="16.9382%" y="767.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (408 samples, 10.54%)</title><rect x="6.3549%" y="821" width="10.5399%" height="15" fill="rgb(216,84,49)" fg:x="246" fg:w="408"/><text x="6.6049%" y="831.50">tokio::runtime:..</text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (1 samples, 0.03%)</title><rect x="16.8690%" y="805" width="0.0258%" height="15" fill="rgb(214,194,35)" fg:x="653" fg:w="1"/><text x="17.1190%" y="815.50"></text></g><g><title>_tlv_get_addr (1 samples, 0.03%)</title><rect x="16.9982%" y="805" width="0.0258%" height="15" fill="rgb(249,28,3)" fg:x="658" fg:w="1"/><text x="17.2482%" y="815.50"></text></g><g><title>pthread_cond_signal (3 samples, 0.08%)</title><rect x="17.0240%" y="789" width="0.0775%" height="15" fill="rgb(222,56,52)" fg:x="659" fg:w="3"/><text x="17.2740%" y="799.50"></text></g><g><title>__psynch_cvsignal (3 samples, 0.08%)</title><rect x="17.0240%" y="773" width="0.0775%" height="15" fill="rgb(245,217,50)" fg:x="659" fg:w="3"/><text x="17.2740%" y="783.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (6 samples, 0.15%)</title><rect x="17.0240%" y="805" width="0.1550%" height="15" fill="rgb(213,201,24)" fg:x="659" fg:w="6"/><text x="17.2740%" y="815.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (3 samples, 0.08%)</title><rect x="17.1015%" y="789" width="0.0775%" height="15" fill="rgb(248,116,28)" fg:x="662" fg:w="3"/><text x="17.3515%" y="799.50"></text></g><g><title>clock_gettime (3 samples, 0.08%)</title><rect x="17.1015%" y="773" width="0.0775%" height="15" fill="rgb(219,72,43)" fg:x="662" fg:w="3"/><text x="17.3515%" y="783.50"></text></g><g><title>clock_gettime_nsec_np (3 samples, 0.08%)</title><rect x="17.1015%" y="757" width="0.0775%" height="15" fill="rgb(209,138,14)" fg:x="662" fg:w="3"/><text x="17.3515%" y="767.50"></text></g><g><title>mach_absolute_time (3 samples, 0.08%)</title><rect x="17.1015%" y="741" width="0.0775%" height="15" fill="rgb(222,18,33)" fg:x="662" fg:w="3"/><text x="17.3515%" y="751.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (345 samples, 8.91%)</title><rect x="17.1790%" y="805" width="8.9124%" height="15" fill="rgb(213,199,7)" fg:x="665" fg:w="345"/><text x="17.4290%" y="815.50">tokio::runtim..</text></g><g><title>mio::waker::Waker::wake (344 samples, 8.89%)</title><rect x="17.2049%" y="789" width="8.8866%" height="15" fill="rgb(250,110,10)" fg:x="666" fg:w="344"/><text x="17.4549%" y="799.50">mio::waker::W..</text></g><g><title>kevent (344 samples, 8.89%)</title><rect x="17.2049%" y="773" width="8.8866%" height="15" fill="rgb(248,123,6)" fg:x="666" fg:w="344"/><text x="17.4549%" y="783.50">kevent</text></g><g><title>&lt;core::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (125 samples, 3.23%)</title><rect x="26.0914%" y="773" width="3.2291%" height="15" fill="rgb(206,91,31)" fg:x="1010" fg:w="125"/><text x="26.3414%" y="783.50">&lt;co..</text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="29.3206%" y="773" width="0.0258%" height="15" fill="rgb(211,154,13)" fg:x="1135" fg:w="1"/><text x="29.5706%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;(quant_exchange::okex::OkexClient::process_message::{{closure}},)&gt; (17 samples, 0.44%)</title><rect x="29.3464%" y="773" width="0.4392%" height="15" fill="rgb(225,148,7)" fg:x="1136" fg:w="17"/><text x="29.5964%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;quant_exchange::error::Error&gt; (18 samples, 0.46%)</title><rect x="29.7856%" y="773" width="0.4650%" height="15" fill="rgb(220,160,43)" fg:x="1153" fg:w="18"/><text x="30.0356%" y="783.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (415 samples, 10.72%)</title><rect x="54.6887%" y="741" width="10.7207%" height="15" fill="rgb(213,52,39)" fg:x="2117" fg:w="415"/><text x="54.9387%" y="751.50">&lt;tokio::sync::ba..</text></g><g><title>_tlv_get_addr (150 samples, 3.87%)</title><rect x="61.5345%" y="725" width="3.8750%" height="15" fill="rgb(243,137,7)" fg:x="2382" fg:w="150"/><text x="61.7845%" y="735.50">_tlv..</text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (34 samples, 0.88%)</title><rect x="65.4095%" y="741" width="0.8783%" height="15" fill="rgb(230,79,13)" fg:x="2532" fg:w="34"/><text x="65.6595%" y="751.50"></text></g><g><title>&lt;tokio_tungstenite::WebSocketStream&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (39 samples, 1.01%)</title><rect x="66.2878%" y="741" width="1.0075%" height="15" fill="rgb(247,105,23)" fg:x="2566" fg:w="39"/><text x="66.5378%" y="751.50"></text></g><g><title>_tlv_get_addr (58 samples, 1.50%)</title><rect x="67.2953%" y="741" width="1.4983%" height="15" fill="rgb(223,179,41)" fg:x="2605" fg:w="58"/><text x="67.5453%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;quant_exchange::error::Error&gt; (52 samples, 1.34%)</title><rect x="68.7936%" y="741" width="1.3433%" height="15" fill="rgb(218,9,34)" fg:x="2663" fg:w="52"/><text x="69.0436%" y="751.50"></text></g><g><title>futures_util::lock::bilock::BiLock&lt;T&gt;::poll_lock (17 samples, 0.44%)</title><rect x="70.1369%" y="741" width="0.4392%" height="15" fill="rgb(222,106,8)" fg:x="2715" fg:w="17"/><text x="70.3869%" y="751.50"></text></g><g><title>&lt;tokio_tungstenite::WebSocketStream&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (60 samples, 1.55%)</title><rect x="72.1777%" y="725" width="1.5500%" height="15" fill="rgb(211,220,0)" fg:x="2794" fg:w="60"/><text x="72.4277%" y="735.50"></text></g><g><title>tungstenite::protocol::WebSocketContext::read (1 samples, 0.03%)</title><rect x="73.7019%" y="709" width="0.0258%" height="15" fill="rgb(229,52,16)" fg:x="2853" fg:w="1"/><text x="73.9519%" y="719.50"></text></g><g><title>tungstenite::protocol::frame::FrameCodec::read_frame (1 samples, 0.03%)</title><rect x="73.7019%" y="693" width="0.0258%" height="15" fill="rgb(212,155,18)" fg:x="2853" fg:w="1"/><text x="73.9519%" y="703.50"></text></g><g><title>&lt;tokio_tungstenite::compat::AllowStd&lt;S&gt; as std::io::Read&gt;::read (1 samples, 0.03%)</title><rect x="73.7019%" y="677" width="0.0258%" height="15" fill="rgb(242,21,14)" fg:x="2853" fg:w="1"/><text x="73.9519%" y="687.50"></text></g><g><title>&lt;tokio_tungstenite::stream::MaybeTlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.03%)</title><rect x="73.7019%" y="661" width="0.0258%" height="15" fill="rgb(222,19,48)" fg:x="2853" fg:w="1"/><text x="73.9519%" y="671.50"></text></g><g><title>&lt;security_framework::secure_transport::SslStream&lt;S&gt; as std::io::Read&gt;::read (1 samples, 0.03%)</title><rect x="73.7019%" y="645" width="0.0258%" height="15" fill="rgb(232,45,27)" fg:x="2853" fg:w="1"/><text x="73.9519%" y="655.50"></text></g><g><title>SSLRead (1 samples, 0.03%)</title><rect x="73.7019%" y="629" width="0.0258%" height="15" fill="rgb(249,103,42)" fg:x="2853" fg:w="1"/><text x="73.9519%" y="639.50"></text></g><g><title>SSLClose (1 samples, 0.03%)</title><rect x="73.7019%" y="613" width="0.0258%" height="15" fill="rgb(246,81,33)" fg:x="2853" fg:w="1"/><text x="73.9519%" y="623.50"></text></g><g><title>SSLRecordServiceWriteQueueInternal (1 samples, 0.03%)</title><rect x="73.7019%" y="597" width="0.0258%" height="15" fill="rgb(252,33,42)" fg:x="2853" fg:w="1"/><text x="73.9519%" y="607.50"></text></g><g><title>security_framework::secure_transport::write_func (1 samples, 0.03%)</title><rect x="73.7019%" y="581" width="0.0258%" height="15" fill="rgb(209,212,41)" fg:x="2853" fg:w="1"/><text x="73.9519%" y="591.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (1 samples, 0.03%)</title><rect x="73.7019%" y="565" width="0.0258%" height="15" fill="rgb(207,154,6)" fg:x="2853" fg:w="1"/><text x="73.9519%" y="575.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (1 samples, 0.03%)</title><rect x="73.7019%" y="549" width="0.0258%" height="15" fill="rgb(223,64,47)" fg:x="2853" fg:w="1"/><text x="73.9519%" y="559.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (1 samples, 0.03%)</title><rect x="73.7019%" y="533" width="0.0258%" height="15" fill="rgb(211,161,38)" fg:x="2853" fg:w="1"/><text x="73.9519%" y="543.50"></text></g><g><title>__sendto (1 samples, 0.03%)</title><rect x="73.7019%" y="517" width="0.0258%" height="15" fill="rgb(219,138,40)" fg:x="2853" fg:w="1"/><text x="73.9519%" y="527.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (213 samples, 5.50%)</title><rect x="70.5761%" y="741" width="5.5025%" height="15" fill="rgb(241,228,46)" fg:x="2732" fg:w="213"/><text x="70.8261%" y="751.50">futures..</text></g><g><title>futures_util::lock::bilock::BiLock&lt;T&gt;::poll_lock (91 samples, 2.35%)</title><rect x="73.7277%" y="725" width="2.3508%" height="15" fill="rgb(223,209,38)" fg:x="2854" fg:w="91"/><text x="73.9777%" y="735.50">f..</text></g><g><title>tokio::macros::support::thread_rng_n (368 samples, 9.51%)</title><rect x="76.0785%" y="741" width="9.5066%" height="15" fill="rgb(236,164,45)" fg:x="2945" fg:w="368"/><text x="76.3285%" y="751.50">tokio::macros:..</text></g><g><title>_tlv_get_addr (205 samples, 5.30%)</title><rect x="80.2893%" y="725" width="5.2958%" height="15" fill="rgb(231,15,5)" fg:x="3108" fg:w="205"/><text x="80.5393%" y="735.50">_tlv_g..</text></g><g><title>tokio::runtime::context::defer (4 samples, 0.10%)</title><rect x="85.5851%" y="741" width="0.1033%" height="15" fill="rgb(252,35,15)" fg:x="3313" fg:w="4"/><text x="85.8351%" y="751.50"></text></g><g><title>_tlv_get_addr (1 samples, 0.03%)</title><rect x="85.6626%" y="725" width="0.0258%" height="15" fill="rgb(248,181,18)" fg:x="3316" fg:w="1"/><text x="85.9126%" y="735.50"></text></g><g><title>tokio::runtime::scheduler::defer::Defer::defer (1 samples, 0.03%)</title><rect x="85.6885%" y="741" width="0.0258%" height="15" fill="rgb(233,39,42)" fg:x="3317" fg:w="1"/><text x="85.9385%" y="751.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (168 samples, 4.34%)</title><rect x="85.7143%" y="741" width="4.3400%" height="15" fill="rgb(238,110,33)" fg:x="3318" fg:w="168"/><text x="85.9643%" y="751.50">tokio..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (57 samples, 1.47%)</title><rect x="90.0542%" y="741" width="1.4725%" height="15" fill="rgb(233,195,10)" fg:x="3486" fg:w="57"/><text x="90.3042%" y="751.50"></text></g><g><title>&lt;core::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (2,224 samples, 57.45%)</title><rect x="34.5647%" y="757" width="57.4529%" height="15" fill="rgb(254,105,3)" fg:x="1338" fg:w="2224"/><text x="34.8147%" y="767.50">&lt;core::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::task::coop::Budget::has_remaining (19 samples, 0.49%)</title><rect x="91.5267%" y="741" width="0.4908%" height="15" fill="rgb(221,225,9)" fg:x="3543" fg:w="19"/><text x="91.7767%" y="751.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (40 samples, 1.03%)</title><rect x="92.0176%" y="757" width="1.0333%" height="15" fill="rgb(224,227,45)" fg:x="3562" fg:w="40"/><text x="92.2676%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;(quant_exchange::okex::OkexClient::process_message::{{closure}},)&gt; (92 samples, 2.38%)</title><rect x="93.0509%" y="757" width="2.3766%" height="15" fill="rgb(229,198,43)" fg:x="3602" fg:w="92"/><text x="93.3009%" y="767.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;quant_exchange::error::Error&gt; (74 samples, 1.91%)</title><rect x="95.4275%" y="757" width="1.9117%" height="15" fill="rgb(206,209,35)" fg:x="3694" fg:w="74"/><text x="95.6775%" y="767.50">c..</text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (29 samples, 0.75%)</title><rect x="97.3392%" y="757" width="0.7492%" height="15" fill="rgb(245,195,53)" fg:x="3768" fg:w="29"/><text x="97.5892%" y="767.50"></text></g><g><title>tokio::macros::support::thread_rng_n (24 samples, 0.62%)</title><rect x="98.0883%" y="757" width="0.6200%" height="15" fill="rgb(240,92,26)" fg:x="3797" fg:w="24"/><text x="98.3383%" y="767.50"></text></g><g><title>okex::main::_{{closure}}::_{{closure}} (2,683 samples, 69.31%)</title><rect x="30.2506%" y="773" width="69.3103%" height="15" fill="rgb(207,40,23)" fg:x="1171" fg:w="2683"/><text x="30.5006%" y="783.50">okex::main::_{{closure}}::_{{closure}}</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (33 samples, 0.85%)</title><rect x="98.7083%" y="757" width="0.8525%" height="15" fill="rgb(223,111,35)" fg:x="3821" fg:w="33"/><text x="98.9583%" y="767.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (2,846 samples, 73.52%)</title><rect x="26.0914%" y="789" width="73.5211%" height="15" fill="rgb(229,147,28)" fg:x="1010" fg:w="2846"/><text x="26.3414%" y="799.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (2 samples, 0.05%)</title><rect x="99.5608%" y="773" width="0.0517%" height="15" fill="rgb(211,29,28)" fg:x="3854" fg:w="2"/><text x="99.8108%" y="783.50"></text></g><g><title>_tlv_get_addr (1 samples, 0.03%)</title><rect x="99.5867%" y="757" width="0.0258%" height="15" fill="rgb(228,72,33)" fg:x="3855" fg:w="1"/><text x="99.8367%" y="767.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (2 samples, 0.05%)</title><rect x="99.6125%" y="789" width="0.0517%" height="15" fill="rgb(205,214,31)" fg:x="3856" fg:w="2"/><text x="99.8625%" y="799.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (3,205 samples, 82.80%)</title><rect x="16.8949%" y="821" width="82.7951%" height="15" fill="rgb(224,111,15)" fg:x="654" fg:w="3205"/><text x="17.1449%" y="831.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2,849 samples, 73.60%)</title><rect x="26.0914%" y="805" width="73.5986%" height="15" fill="rgb(253,21,26)" fg:x="1010" fg:w="2849"/><text x="26.3414%" y="815.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::state::State::transition_to_running (1 samples, 0.03%)</title><rect x="99.6642%" y="789" width="0.0258%" height="15" fill="rgb(245,139,43)" fg:x="3858" fg:w="1"/><text x="99.9142%" y="799.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (3,837 samples, 99.12%)</title><rect x="0.8525%" y="837" width="99.1217%" height="15" fill="rgb(252,170,7)" fg:x="33" fg:w="3837"/><text x="1.1025%" y="847.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_if_work_pending (11 samples, 0.28%)</title><rect x="99.6900%" y="821" width="0.2842%" height="15" fill="rgb(231,118,14)" fg:x="3859" fg:w="11"/><text x="99.9400%" y="831.50"></text></g><g><title>all (3,871 samples, 100%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(238,83,0)" fg:x="0" fg:w="3871"/><text x="0.2500%" y="1055.50"></text></g><g><title>thread_start (3,844 samples, 99.30%)</title><rect x="0.6975%" y="1029" width="99.3025%" height="15" fill="rgb(221,39,39)" fg:x="27" fg:w="3844"/><text x="0.9475%" y="1039.50">thread_start</text></g><g><title>_pthread_start (3,844 samples, 99.30%)</title><rect x="0.6975%" y="1013" width="99.3025%" height="15" fill="rgb(222,119,46)" fg:x="27" fg:w="3844"/><text x="0.9475%" y="1023.50">_pthread_start</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (3,844 samples, 99.30%)</title><rect x="0.6975%" y="997" width="99.3025%" height="15" fill="rgb(222,165,49)" fg:x="27" fg:w="3844"/><text x="0.9475%" y="1007.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (3,844 samples, 99.30%)</title><rect x="0.6975%" y="981" width="99.3025%" height="15" fill="rgb(219,113,52)" fg:x="27" fg:w="3844"/><text x="0.9475%" y="991.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (3,844 samples, 99.30%)</title><rect x="0.6975%" y="965" width="99.3025%" height="15" fill="rgb(214,7,15)" fg:x="27" fg:w="3844"/><text x="0.9475%" y="975.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (3,844 samples, 99.30%)</title><rect x="0.6975%" y="949" width="99.3025%" height="15" fill="rgb(235,32,4)" fg:x="27" fg:w="3844"/><text x="0.9475%" y="959.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (3,844 samples, 99.30%)</title><rect x="0.6975%" y="933" width="99.3025%" height="15" fill="rgb(238,90,54)" fg:x="27" fg:w="3844"/><text x="0.9475%" y="943.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (3,844 samples, 99.30%)</title><rect x="0.6975%" y="917" width="99.3025%" height="15" fill="rgb(213,208,19)" fg:x="27" fg:w="3844"/><text x="0.9475%" y="927.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (3,844 samples, 99.30%)</title><rect x="0.6975%" y="901" width="99.3025%" height="15" fill="rgb(233,156,4)" fg:x="27" fg:w="3844"/><text x="0.9475%" y="911.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (3,838 samples, 99.15%)</title><rect x="0.8525%" y="885" width="99.1475%" height="15" fill="rgb(207,194,5)" fg:x="33" fg:w="3838"/><text x="1.1025%" y="895.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (3,838 samples, 99.15%)</title><rect x="0.8525%" y="869" width="99.1475%" height="15" fill="rgb(206,111,30)" fg:x="33" fg:w="3838"/><text x="1.1025%" y="879.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (3,838 samples, 99.15%)</title><rect x="0.8525%" y="853" width="99.1475%" height="15" fill="rgb(243,70,54)" fg:x="33" fg:w="3838"/><text x="1.1025%" y="863.50">tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (1 samples, 0.03%)</title><rect x="99.9742%" y="837" width="0.0258%" height="15" fill="rgb(242,28,8)" fg:x="3870" fg:w="1"/><text x="100.2242%" y="847.50"></text></g></svg></svg>