<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="886" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="869.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="869.00"> </text><svg id="frames" x="10" width="1180" total_samples="5539"><g><title>qos_class_main (1 samples, 0.02%)</title><rect x="0.0000%" y="821" width="0.0181%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="831.50"></text></g><g><title>start_wqthread (1 samples, 0.02%)</title><rect x="0.0000%" y="805" width="0.0181%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="815.50"></text></g><g><title>dyld4::ProcessConfig::ProcessConfig(dyld4::KernelArgs const*, dyld4::SyscallDelegate&amp;, lsl::Allocator&amp;) (1 samples, 0.02%)</title><rect x="0.0181%" y="789" width="0.0181%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.2681%" y="799.50"></text></g><g><title>dyld4::ProcessConfig::Security::Security(dyld4::ProcessConfig::Process&amp;, dyld4::SyscallDelegate&amp;) (1 samples, 0.02%)</title><rect x="0.0181%" y="773" width="0.0181%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.2681%" y="783.50"></text></g><g><title>strlen (1 samples, 0.02%)</title><rect x="0.0181%" y="757" width="0.0181%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.2681%" y="767.50"></text></g><g><title>dyld3::kdebug_trace_dyld_region(unsigned int, int, int, char const*, unsigned char const (*) [16], fsobj_id, fsid, void const*) (1 samples, 0.02%)</title><rect x="0.0361%" y="773" width="0.0181%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="1"/><text x="0.2861%" y="783.50"></text></g><g><title>kdebug_trace (1 samples, 0.02%)</title><rect x="0.0361%" y="757" width="0.0181%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="1"/><text x="0.2861%" y="767.50"></text></g><g><title>kdebug_is_enabled (1 samples, 0.02%)</title><rect x="0.0361%" y="741" width="0.0181%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="1"/><text x="0.2861%" y="751.50"></text></g><g><title>dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator()() const (3 samples, 0.05%)</title><rect x="0.0181%" y="805" width="0.0542%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="3"/><text x="0.2681%" y="815.50"></text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, mach_o::Header const*) (2 samples, 0.04%)</title><rect x="0.0361%" y="789" width="0.0361%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="2"/><text x="0.2861%" y="799.50"></text></g><g><title>dyld4::APIs::runAllInitializersForMain() (1 samples, 0.02%)</title><rect x="0.0542%" y="773" width="0.0181%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="1"/><text x="0.3042%" y="783.50"></text></g><g><title>dyld4::ExternallyViewableState::setLibSystemInitialized() (1 samples, 0.02%)</title><rect x="0.0542%" y="757" width="0.0181%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="1"/><text x="0.3042%" y="767.50"></text></g><g><title>dyld4::ExternallyViewableState::setDyldState(unsigned char) (1 samples, 0.02%)</title><rect x="0.0542%" y="741" width="0.0181%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="1"/><text x="0.3042%" y="751.50"></text></g><g><title>dyld4::ExternallyViewableState::generateAtlas(lsl::Allocator&amp;) (1 samples, 0.02%)</title><rect x="0.0542%" y="725" width="0.0181%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="1"/><text x="0.3042%" y="735.50"></text></g><g><title>dyld4::ExternallyViewableState::generateCompactInfo(lsl::Allocator&amp;, AAREncoder&amp;) (1 samples, 0.02%)</title><rect x="0.0542%" y="709" width="0.0181%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="1"/><text x="0.3042%" y="719.50"></text></g><g><title>dyld4::Atlas::ProcessSnapshot::serialize() (1 samples, 0.02%)</title><rect x="0.0542%" y="693" width="0.0181%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="1"/><text x="0.3042%" y="703.50"></text></g><g><title>dyld4::Atlas::ProcessSnapshot::Serializer::serialize() (1 samples, 0.02%)</title><rect x="0.0542%" y="677" width="0.0181%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="1"/><text x="0.3042%" y="687.50"></text></g><g><title>lsl::emitPVLEUInt64(unsigned long long, lsl::Vector&lt;std::byte&gt;&amp;) (1 samples, 0.02%)</title><rect x="0.0542%" y="661" width="0.0181%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="1"/><text x="0.3042%" y="671.50"></text></g><g><title>std::__1::pair&lt;std::byte const*, std::__1::back_insert_iterator&lt;lsl::Vector&lt;std::byte&gt;&gt;&gt; std::__1::__copy_impl&lt;std::__1::_ClassicAlgPolicy&gt;::operator()[abi:nn190102]&lt;std::byte const*, std::byte const*, std::__1::back_insert_iterator&lt;lsl::Vector&lt;std::byte&gt;&gt;&gt;(std::byte const*, std::byte const*, std::__1::back_insert_iterator&lt;lsl::Vector&lt;std::byte&gt;&gt;) const (1 samples, 0.02%)</title><rect x="0.0542%" y="645" width="0.0181%" height="15" fill="rgb(221,200,47)" fg:x="3" fg:w="1"/><text x="0.3042%" y="655.50"></text></g><g><title>tokio::runtime::builder::Builder::build (1 samples, 0.02%)</title><rect x="0.0722%" y="725" width="0.0181%" height="15" fill="rgb(226,26,5)" fg:x="4" fg:w="1"/><text x="0.3222%" y="735.50"></text></g><g><title>tokio::runtime::driver::Driver::new (1 samples, 0.02%)</title><rect x="0.0722%" y="709" width="0.0181%" height="15" fill="rgb(249,33,26)" fg:x="4" fg:w="1"/><text x="0.3222%" y="719.50"></text></g><g><title>tokio::runtime::signal::Driver::new (1 samples, 0.02%)</title><rect x="0.0722%" y="693" width="0.0181%" height="15" fill="rgb(235,183,28)" fg:x="4" fg:w="1"/><text x="0.3222%" y="703.50"></text></g><g><title>std::sync::once_lock::OnceLock&lt;T&gt;::initialize (1 samples, 0.02%)</title><rect x="0.0722%" y="677" width="0.0181%" height="15" fill="rgb(221,5,38)" fg:x="4" fg:w="1"/><text x="0.3222%" y="687.50"></text></g><g><title>std::sys::sync::once::queue::Once::call (1 samples, 0.02%)</title><rect x="0.0722%" y="661" width="0.0181%" height="15" fill="rgb(247,18,42)" fg:x="4" fg:w="1"/><text x="0.3222%" y="671.50"></text></g><g><title>std::sync::poison::once::Once::call_once_force::_{{closure}} (1 samples, 0.02%)</title><rect x="0.0722%" y="645" width="0.0181%" height="15" fill="rgb(241,131,45)" fg:x="4" fg:w="1"/><text x="0.3222%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="0.0722%" y="629" width="0.0181%" height="15" fill="rgb(249,31,29)" fg:x="4" fg:w="1"/><text x="0.3222%" y="639.50"></text></g><g><title>&lt;tokio::signal::registry::EventInfo as core::default::Default&gt;::default (1 samples, 0.02%)</title><rect x="0.0722%" y="613" width="0.0181%" height="15" fill="rgb(225,111,53)" fg:x="4" fg:w="1"/><text x="0.3222%" y="623.50"></text></g><g><title>tokio::sync::notify::Notify::notify_waiters (1 samples, 0.02%)</title><rect x="0.0722%" y="597" width="0.0181%" height="15" fill="rgb(238,160,17)" fg:x="4" fg:w="1"/><text x="0.3222%" y="607.50"></text></g><g><title>&lt;tokio_tungstenite::handshake::MidHandshake&lt;Role&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="0.0903%" y="661" width="0.0181%" height="15" fill="rgb(214,148,48)" fg:x="5" fg:w="1"/><text x="0.3403%" y="671.50"></text></g><g><title>tungstenite::handshake::MidHandshake&lt;Role&gt;::handshake (1 samples, 0.02%)</title><rect x="0.0903%" y="645" width="0.0181%" height="15" fill="rgb(232,36,49)" fg:x="5" fg:w="1"/><text x="0.3403%" y="655.50"></text></g><g><title>tungstenite::handshake::machine::HandshakeMachine&lt;Stream&gt;::single_round (1 samples, 0.02%)</title><rect x="0.0903%" y="629" width="0.0181%" height="15" fill="rgb(209,103,24)" fg:x="5" fg:w="1"/><text x="0.3403%" y="639.50"></text></g><g><title>tungstenite::buffer::ReadBuffer&lt;_&gt;::read_from (1 samples, 0.02%)</title><rect x="0.0903%" y="613" width="0.0181%" height="15" fill="rgb(229,88,8)" fg:x="5" fg:w="1"/><text x="0.3403%" y="623.50"></text></g><g><title>&lt;tokio_tungstenite::compat::AllowStd&lt;S&gt; as std::io::Read&gt;::read (1 samples, 0.02%)</title><rect x="0.0903%" y="597" width="0.0181%" height="15" fill="rgb(213,181,19)" fg:x="5" fg:w="1"/><text x="0.3403%" y="607.50"></text></g><g><title>&lt;tokio_tungstenite::stream::MaybeTlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.02%)</title><rect x="0.0903%" y="581" width="0.0181%" height="15" fill="rgb(254,191,54)" fg:x="5" fg:w="1"/><text x="0.3403%" y="591.50"></text></g><g><title>&lt;security_framework::secure_transport::SslStream&lt;S&gt; as std::io::Read&gt;::read (1 samples, 0.02%)</title><rect x="0.0903%" y="565" width="0.0181%" height="15" fill="rgb(241,83,37)" fg:x="5" fg:w="1"/><text x="0.3403%" y="575.50"></text></g><g><title>SSLRead (1 samples, 0.02%)</title><rect x="0.0903%" y="549" width="0.0181%" height="15" fill="rgb(233,36,39)" fg:x="5" fg:w="1"/><text x="0.3403%" y="559.50"></text></g><g><title>SSLRecordReadInternal (1 samples, 0.02%)</title><rect x="0.0903%" y="533" width="0.0181%" height="15" fill="rgb(226,3,54)" fg:x="5" fg:w="1"/><text x="0.3403%" y="543.50"></text></g><g><title>security_framework::secure_transport::read_func (1 samples, 0.02%)</title><rect x="0.0903%" y="517" width="0.0181%" height="15" fill="rgb(245,192,40)" fg:x="5" fg:w="1"/><text x="0.3403%" y="527.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (1 samples, 0.02%)</title><rect x="0.0903%" y="501" width="0.0181%" height="15" fill="rgb(238,167,29)" fg:x="5" fg:w="1"/><text x="0.3403%" y="511.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (1 samples, 0.02%)</title><rect x="0.0903%" y="485" width="0.0181%" height="15" fill="rgb(232,182,51)" fg:x="5" fg:w="1"/><text x="0.3403%" y="495.50"></text></g><g><title>__recvfrom (1 samples, 0.02%)</title><rect x="0.0903%" y="469" width="0.0181%" height="15" fill="rgb(231,60,39)" fg:x="5" fg:w="1"/><text x="0.3403%" y="479.50"></text></g><g><title>mio::net::tcp::stream::TcpStream::connect (1 samples, 0.02%)</title><rect x="0.1083%" y="661" width="0.0181%" height="15" fill="rgb(208,69,12)" fg:x="6" fg:w="1"/><text x="0.3583%" y="671.50"></text></g><g><title>socket (1 samples, 0.02%)</title><rect x="0.1083%" y="645" width="0.0181%" height="15" fill="rgb(235,93,37)" fg:x="6" fg:w="1"/><text x="0.3583%" y="655.50"></text></g><g><title>SSLRecordReadInternal (1 samples, 0.02%)</title><rect x="0.1264%" y="565" width="0.0181%" height="15" fill="rgb(213,116,39)" fg:x="7" fg:w="1"/><text x="0.3764%" y="575.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="0.1264%" y="549" width="0.0181%" height="15" fill="rgb(222,207,29)" fg:x="7" fg:w="1"/><text x="0.3764%" y="559.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="0.1264%" y="533" width="0.0181%" height="15" fill="rgb(206,96,30)" fg:x="7" fg:w="1"/><text x="0.3764%" y="543.50"></text></g><g><title>ccec_generate_key_internal_fips_ws (1 samples, 0.02%)</title><rect x="0.1444%" y="453" width="0.0181%" height="15" fill="rgb(218,138,4)" fg:x="8" fg:w="1"/><text x="0.3944%" y="463.50"></text></g><g><title>ccec_make_pub_from_priv_ws (1 samples, 0.02%)</title><rect x="0.1444%" y="437" width="0.0181%" height="15" fill="rgb(250,191,14)" fg:x="8" fg:w="1"/><text x="0.3944%" y="447.50"></text></g><g><title>ccec_mult_blinded_ws (1 samples, 0.02%)</title><rect x="0.1444%" y="421" width="0.0181%" height="15" fill="rgb(239,60,40)" fg:x="8" fg:w="1"/><text x="0.3944%" y="431.50"></text></g><g><title>ccec_mult_default_ws (1 samples, 0.02%)</title><rect x="0.1444%" y="405" width="0.0181%" height="15" fill="rgb(206,27,48)" fg:x="8" fg:w="1"/><text x="0.3944%" y="415.50"></text></g><g><title>ccec_mult_XYCZadd_ws (1 samples, 0.02%)</title><rect x="0.1444%" y="389" width="0.0181%" height="15" fill="rgb(225,35,8)" fg:x="8" fg:w="1"/><text x="0.3944%" y="399.50"></text></g><g><title>ccn_sub_asm (1 samples, 0.02%)</title><rect x="0.1444%" y="373" width="0.0181%" height="15" fill="rgb(250,213,24)" fg:x="8" fg:w="1"/><text x="0.3944%" y="383.50"></text></g><g><title>ccec_sign_composite_msg_ws (1 samples, 0.02%)</title><rect x="0.1625%" y="437" width="0.0181%" height="15" fill="rgb(247,123,22)" fg:x="9" fg:w="1"/><text x="0.4125%" y="447.50"></text></g><g><title>ccec_sign_composite_ws (1 samples, 0.02%)</title><rect x="0.1625%" y="421" width="0.0181%" height="15" fill="rgb(231,138,38)" fg:x="9" fg:w="1"/><text x="0.4125%" y="431.50"></text></g><g><title>ccec_sign_internal_ws (1 samples, 0.02%)</title><rect x="0.1625%" y="405" width="0.0181%" height="15" fill="rgb(231,145,46)" fg:x="9" fg:w="1"/><text x="0.4125%" y="415.50"></text></g><g><title>ccec_sign_internal_inner_ws (1 samples, 0.02%)</title><rect x="0.1625%" y="389" width="0.0181%" height="15" fill="rgb(251,118,11)" fg:x="9" fg:w="1"/><text x="0.4125%" y="399.50"></text></g><g><title>ccec_affinify_x_only_ws (1 samples, 0.02%)</title><rect x="0.1625%" y="373" width="0.0181%" height="15" fill="rgb(217,147,25)" fg:x="9" fg:w="1"/><text x="0.4125%" y="383.50"></text></g><g><title>ccn_mulmod_p256 (1 samples, 0.02%)</title><rect x="0.1625%" y="357" width="0.0181%" height="15" fill="rgb(247,81,37)" fg:x="9" fg:w="1"/><text x="0.4125%" y="367.50"></text></g><g><title>tls_handshake_continue (3 samples, 0.05%)</title><rect x="0.1444%" y="565" width="0.0542%" height="15" fill="rgb(209,12,38)" fg:x="8" fg:w="3"/><text x="0.3944%" y="575.50"></text></g><g><title>SSLAdvanceHandshake (3 samples, 0.05%)</title><rect x="0.1444%" y="549" width="0.0542%" height="15" fill="rgb(227,1,9)" fg:x="8" fg:w="3"/><text x="0.3944%" y="559.50"></text></g><g><title>SSLPrepareAndQueueMessage (3 samples, 0.05%)</title><rect x="0.1444%" y="533" width="0.0542%" height="15" fill="rgb(248,47,43)" fg:x="8" fg:w="3"/><text x="0.3944%" y="543.50"></text></g><g><title>SSLEncodeKeyExchange (3 samples, 0.05%)</title><rect x="0.1444%" y="517" width="0.0542%" height="15" fill="rgb(221,10,30)" fg:x="8" fg:w="3"/><text x="0.3944%" y="527.50"></text></g><g><title>sslEcdhCreateKey (3 samples, 0.05%)</title><rect x="0.1444%" y="501" width="0.0542%" height="15" fill="rgb(210,229,1)" fg:x="8" fg:w="3"/><text x="0.3944%" y="511.50"></text></g><g><title>ccec_generate_key (3 samples, 0.05%)</title><rect x="0.1444%" y="485" width="0.0542%" height="15" fill="rgb(222,148,37)" fg:x="8" fg:w="3"/><text x="0.3944%" y="495.50"></text></g><g><title>ccec_generate_key_fips_ws (3 samples, 0.05%)</title><rect x="0.1444%" y="469" width="0.0542%" height="15" fill="rgb(234,67,33)" fg:x="8" fg:w="3"/><text x="0.3944%" y="479.50"></text></g><g><title>ccec_pairwise_consistency_check_ws (2 samples, 0.04%)</title><rect x="0.1625%" y="453" width="0.0361%" height="15" fill="rgb(247,98,35)" fg:x="9" fg:w="2"/><text x="0.4125%" y="463.50"></text></g><g><title>ccec_verify_composite_msg_ws (1 samples, 0.02%)</title><rect x="0.1805%" y="437" width="0.0181%" height="15" fill="rgb(247,138,52)" fg:x="10" fg:w="1"/><text x="0.4305%" y="447.50"></text></g><g><title>ccec_verify_composite_digest_ws (1 samples, 0.02%)</title><rect x="0.1805%" y="421" width="0.0181%" height="15" fill="rgb(213,79,30)" fg:x="10" fg:w="1"/><text x="0.4305%" y="431.50"></text></g><g><title>ccec_verify_internal_with_base_ws (1 samples, 0.02%)</title><rect x="0.1805%" y="405" width="0.0181%" height="15" fill="rgb(246,177,23)" fg:x="10" fg:w="1"/><text x="0.4305%" y="415.50"></text></g><g><title>ccec_twin_mult_ws (1 samples, 0.02%)</title><rect x="0.1805%" y="389" width="0.0181%" height="15" fill="rgb(230,62,27)" fg:x="10" fg:w="1"/><text x="0.4305%" y="399.50"></text></g><g><title>ccec_double_ws (1 samples, 0.02%)</title><rect x="0.1805%" y="373" width="0.0181%" height="15" fill="rgb(216,154,8)" fg:x="10" fg:w="1"/><text x="0.4305%" y="383.50"></text></g><g><title>ccn_sub_asm (1 samples, 0.02%)</title><rect x="0.1805%" y="357" width="0.0181%" height="15" fill="rgb(244,35,45)" fg:x="10" fg:w="1"/><text x="0.4305%" y="367.50"></text></g><g><title>SSLProcessHandshakeMessage (1 samples, 0.02%)</title><rect x="0.1986%" y="533" width="0.0181%" height="15" fill="rgb(251,115,12)" fg:x="11" fg:w="1"/><text x="0.4486%" y="543.50"></text></g><g><title>SSLProcessServerKeyExchange (1 samples, 0.02%)</title><rect x="0.1986%" y="517" width="0.0181%" height="15" fill="rgb(240,54,50)" fg:x="11" fg:w="1"/><text x="0.4486%" y="527.50"></text></g><g><title>SSLVerifySignedServerKeyExchangeTls12 (1 samples, 0.02%)</title><rect x="0.1986%" y="501" width="0.0181%" height="15" fill="rgb(233,84,52)" fg:x="11" fg:w="1"/><text x="0.4486%" y="511.50"></text></g><g><title>sslRawVerify (1 samples, 0.02%)</title><rect x="0.1986%" y="485" width="0.0181%" height="15" fill="rgb(207,117,47)" fg:x="11" fg:w="1"/><text x="0.4486%" y="495.50"></text></g><g><title>ccec_verify (1 samples, 0.02%)</title><rect x="0.1986%" y="469" width="0.0181%" height="15" fill="rgb(249,43,39)" fg:x="11" fg:w="1"/><text x="0.4486%" y="479.50"></text></g><g><title>ccec_verify_digest_ws (1 samples, 0.02%)</title><rect x="0.1986%" y="453" width="0.0181%" height="15" fill="rgb(209,38,44)" fg:x="11" fg:w="1"/><text x="0.4486%" y="463.50"></text></g><g><title>ccec_verify_internal_with_base_ws (1 samples, 0.02%)</title><rect x="0.1986%" y="437" width="0.0181%" height="15" fill="rgb(236,212,23)" fg:x="11" fg:w="1"/><text x="0.4486%" y="447.50"></text></g><g><title>ccec_twin_mult_ws (1 samples, 0.02%)</title><rect x="0.1986%" y="421" width="0.0181%" height="15" fill="rgb(242,79,21)" fg:x="11" fg:w="1"/><text x="0.4486%" y="431.50"></text></g><g><title>ccn_mulmod_p256 (1 samples, 0.02%)</title><rect x="0.1986%" y="405" width="0.0181%" height="15" fill="rgb(211,96,35)" fg:x="11" fg:w="1"/><text x="0.4486%" y="415.50"></text></g><g><title>CSSM_CL_CertGetFirstCachedFieldValue (1 samples, 0.02%)</title><rect x="0.2166%" y="437" width="0.0181%" height="15" fill="rgb(253,215,40)" fg:x="12" fg:w="1"/><text x="0.4666%" y="447.50"></text></g><g><title>cssm_CertGetFirstCachedFieldValue(long, long, cssm_data const*, long*, unsigned int*, cssm_data**) (1 samples, 0.02%)</title><rect x="0.2166%" y="421" width="0.0181%" height="15" fill="rgb(211,81,21)" fg:x="12" fg:w="1"/><text x="0.4666%" y="431.50"></text></g><g><title>AppleX509CLSession::CertGetFirstCachedFieldValue(long, Security::CssmData const&amp;, unsigned int&amp;, cssm_data*&amp;) (1 samples, 0.02%)</title><rect x="0.2166%" y="405" width="0.0181%" height="15" fill="rgb(208,190,38)" fg:x="12" fg:w="1"/><text x="0.4666%" y="415.50"></text></g><g><title>getField_PublicKeyStruct(DecodedItem&amp;, unsigned int, unsigned int&amp;, Security::CssmOwnedData&amp;) (1 samples, 0.02%)</title><rect x="0.2166%" y="389" width="0.0181%" height="15" fill="rgb(235,213,38)" fg:x="12" fg:w="1"/><text x="0.4666%" y="399.50"></text></g><g><title>CL_extractCSSMKeyNSS(SecAsn1PubKeyInfo const&amp;, Security::Allocator&amp;, DecodedCert const*) (1 samples, 0.02%)</title><rect x="0.2166%" y="373" width="0.0181%" height="15" fill="rgb(237,122,38)" fg:x="12" fg:w="1"/><text x="0.4666%" y="383.50"></text></g><g><title>getGlobalCspHand (1 samples, 0.02%)</title><rect x="0.2166%" y="357" width="0.0181%" height="15" fill="rgb(244,218,35)" fg:x="12" fg:w="1"/><text x="0.4666%" y="367.50"></text></g><g><title>CSSM_ModuleLoad (1 samples, 0.02%)</title><rect x="0.2166%" y="341" width="0.0181%" height="15" fill="rgb(240,68,47)" fg:x="12" fg:w="1"/><text x="0.4666%" y="351.50"></text></g><g><title>Security::CssmClient::Table&lt;Security::MDSClient::Common&gt;::startQuery(Security::CssmQuery const&amp;, bool) (1 samples, 0.02%)</title><rect x="0.2166%" y="325" width="0.0181%" height="15" fill="rgb(210,16,53)" fg:x="12" fg:w="1"/><text x="0.4666%" y="335.50"></text></g><g><title>Security::MDSClient::Directory::dlGetFirst(cssm_query const&amp;, cssm_db_record_attribute_data&amp;, cssm_data*, cssm_db_unique_record*&amp;) (1 samples, 0.02%)</title><rect x="0.2166%" y="309" width="0.0181%" height="15" fill="rgb(235,124,12)" fg:x="12" fg:w="1"/><text x="0.4666%" y="319.50"></text></g><g><title>mds_DataGetFirst(cssm_dl_db_handle, cssm_query const*, long*, cssm_db_record_attribute_data*, cssm_data*, cssm_db_unique_record**) (1 samples, 0.02%)</title><rect x="0.2166%" y="293" width="0.0181%" height="15" fill="rgb(224,169,11)" fg:x="12" fg:w="1"/><text x="0.4666%" y="303.50"></text></g><g><title>Security::MDSSession::DataGetFirst(long, Security::CssmQuery const*, cssm_db_record_attribute_data*, Security::CssmData*, cssm_db_unique_record*&amp;) (1 samples, 0.02%)</title><rect x="0.2166%" y="277" width="0.0181%" height="15" fill="rgb(250,166,2)" fg:x="12" fg:w="1"/><text x="0.4666%" y="287.50"></text></g><g><title>Security::MDSSession::updateDataBases() (1 samples, 0.02%)</title><rect x="0.2166%" y="261" width="0.0181%" height="15" fill="rgb(242,216,29)" fg:x="12" fg:w="1"/><text x="0.4666%" y="271.50"></text></g><g><title>Security::safeCopyFile(char const*, unsigned int, char const*, unsigned short) (1 samples, 0.02%)</title><rect x="0.2166%" y="245" width="0.0181%" height="15" fill="rgb(230,116,27)" fg:x="12" fg:w="1"/><text x="0.4666%" y="255.50"></text></g><g><title>Security::UnixError::throwMeNoLogging(int) (1 samples, 0.02%)</title><rect x="0.2166%" y="229" width="0.0181%" height="15" fill="rgb(228,99,48)" fg:x="12" fg:w="1"/><text x="0.4666%" y="239.50"></text></g><g><title>__cxa_throw (1 samples, 0.02%)</title><rect x="0.2166%" y="213" width="0.0181%" height="15" fill="rgb(253,11,6)" fg:x="12" fg:w="1"/><text x="0.4666%" y="223.50"></text></g><g><title>_Unwind_RaiseException (1 samples, 0.02%)</title><rect x="0.2166%" y="197" width="0.0181%" height="15" fill="rgb(247,143,39)" fg:x="12" fg:w="1"/><text x="0.4666%" y="207.50"></text></g><g><title>unwind_phase2 (1 samples, 0.02%)</title><rect x="0.2166%" y="181" width="0.0181%" height="15" fill="rgb(236,97,10)" fg:x="12" fg:w="1"/><text x="0.4666%" y="191.50"></text></g><g><title>__gxx_personality_v0 (1 samples, 0.02%)</title><rect x="0.2166%" y="165" width="0.0181%" height="15" fill="rgb(233,208,19)" fg:x="12" fg:w="1"/><text x="0.4666%" y="175.50"></text></g><g><title>unw_set_reg (1 samples, 0.02%)</title><rect x="0.2166%" y="149" width="0.0181%" height="15" fill="rgb(216,164,2)" fg:x="12" fg:w="1"/><text x="0.4666%" y="159.50"></text></g><g><title>libunwind::UnwindCursor&lt;libunwind::LocalAddressSpace, libunwind::Registers_arm64&gt;::setInfoBasedOnIPRegister(bool) (1 samples, 0.02%)</title><rect x="0.2166%" y="133" width="0.0181%" height="15" fill="rgb(220,129,5)" fg:x="12" fg:w="1"/><text x="0.4666%" y="143.50"></text></g><g><title>dyld4::APIs::_dyld_find_unwind_sections(void*, dyld_unwind_sections*) (1 samples, 0.02%)</title><rect x="0.2166%" y="117" width="0.0181%" height="15" fill="rgb(242,17,10)" fg:x="12" fg:w="1"/><text x="0.4666%" y="127.50"></text></g><g><title>dyld3::MachOLoaded::findSectionContent(char const*, char const*, unsigned long long&amp;) const (1 samples, 0.02%)</title><rect x="0.2166%" y="101" width="0.0181%" height="15" fill="rgb(242,107,0)" fg:x="12" fg:w="1"/><text x="0.4666%" y="111.50"></text></g><g><title>mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.02%)</title><rect x="0.2166%" y="85" width="0.0181%" height="15" fill="rgb(251,28,31)" fg:x="12" fg:w="1"/><text x="0.4666%" y="95.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (1 samples, 0.02%)</title><rect x="0.2166%" y="69" width="0.0181%" height="15" fill="rgb(233,223,10)" fg:x="12" fg:w="1"/><text x="0.4666%" y="79.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.02%)</title><rect x="0.2166%" y="53" width="0.0181%" height="15" fill="rgb(215,21,27)" fg:x="12" fg:w="1"/><text x="0.4666%" y="63.50"></text></g><g><title>strnlen (1 samples, 0.02%)</title><rect x="0.2166%" y="37" width="0.0181%" height="15" fill="rgb(232,23,21)" fg:x="12" fg:w="1"/><text x="0.4666%" y="47.50"></text></g><g><title>Security::MetaRecord::unpackRecord(Security::ReadSection const&amp;, Security::Allocator&amp;, cssm_db_record_attribute_data*, Security::CssmData*, unsigned int) const (1 samples, 0.02%)</title><rect x="0.2347%" y="213" width="0.0181%" height="15" fill="rgb(244,5,23)" fg:x="13" fg:w="1"/><text x="0.4847%" y="223.50"></text></g><g><title>Security::MetaAttribute::unpackAttribute(Security::ReadSection const&amp;, Security::Allocator&amp;, unsigned int&amp;, cssm_data*&amp;) const (1 samples, 0.02%)</title><rect x="0.2347%" y="197" width="0.0181%" height="15" fill="rgb(226,81,46)" fg:x="13" fg:w="1"/><text x="0.4847%" y="207.50"></text></g><g><title>Security::TrackingAllocator::malloc(unsigned long) (1 samples, 0.02%)</title><rect x="0.2347%" y="181" width="0.0181%" height="15" fill="rgb(247,70,30)" fg:x="13" fg:w="1"/><text x="0.4847%" y="191.50"></text></g><g><title>Security::TrackingAllocator::malloc(unsigned long) (1 samples, 0.02%)</title><rect x="0.2347%" y="165" width="0.0181%" height="15" fill="rgb(212,68,19)" fg:x="13" fg:w="1"/><text x="0.4847%" y="175.50"></text></g><g><title>DefaultAllocator::malloc(unsigned long) (1 samples, 0.02%)</title><rect x="0.2347%" y="149" width="0.0181%" height="15" fill="rgb(240,187,13)" fg:x="13" fg:w="1"/><text x="0.4847%" y="159.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="0.2347%" y="133" width="0.0181%" height="15" fill="rgb(223,113,26)" fg:x="13" fg:w="1"/><text x="0.4847%" y="143.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="0.2347%" y="117" width="0.0181%" height="15" fill="rgb(206,192,2)" fg:x="13" fg:w="1"/><text x="0.4847%" y="127.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="0.2347%" y="101" width="0.0181%" height="15" fill="rgb(241,108,4)" fg:x="13" fg:w="1"/><text x="0.4847%" y="111.50"></text></g><g><title>Security::DatabaseSession::DbOpen(char const*, cssm_net_address const*, unsigned int, Security::AccessCredentials const*, void const*, long&amp;) (2 samples, 0.04%)</title><rect x="0.2347%" y="293" width="0.0361%" height="15" fill="rgb(247,173,49)" fg:x="13" fg:w="2"/><text x="0.4847%" y="303.50"></text></g><g><title>Security::DatabaseManager::dbOpen(Security::DatabaseSession&amp;, Security::DbName const&amp;, unsigned int, Security::AccessCredentials const*, void const*) (2 samples, 0.04%)</title><rect x="0.2347%" y="277" width="0.0361%" height="15" fill="rgb(224,114,35)" fg:x="13" fg:w="2"/><text x="0.4847%" y="287.50"></text></g><g><title>Security::Database::_dbOpen(Security::DatabaseSession&amp;, unsigned int, Security::AccessCredentials const*, void const*) (2 samples, 0.04%)</title><rect x="0.2347%" y="261" width="0.0361%" height="15" fill="rgb(245,159,27)" fg:x="13" fg:w="2"/><text x="0.4847%" y="271.50"></text></g><g><title>Security::AppleDatabase::dbOpen(Security::DbContext&amp;) (2 samples, 0.04%)</title><rect x="0.2347%" y="245" width="0.0361%" height="15" fill="rgb(245,172,44)" fg:x="13" fg:w="2"/><text x="0.4847%" y="255.50"></text></g><g><title>Security::DbModifier::getDbVersion(bool) (2 samples, 0.04%)</title><rect x="0.2347%" y="229" width="0.0361%" height="15" fill="rgb(236,23,11)" fg:x="13" fg:w="2"/><text x="0.4847%" y="239.50"></text></g><g><title>Security::TrackingAllocator::~TrackingAllocator() (1 samples, 0.02%)</title><rect x="0.2528%" y="213" width="0.0181%" height="15" fill="rgb(205,117,38)" fg:x="14" fg:w="1"/><text x="0.5028%" y="223.50"></text></g><g><title>std::__1::__tree&lt;std::__1::__value_type&lt;long, BinaryKey const*&gt;, std::__1::__map_value_compare&lt;long, std::__1::__value_type&lt;long, BinaryKey const*&gt;, std::__1::less&lt;long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;long, BinaryKey const*&gt;&gt;&gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;long, BinaryKey const*&gt;, void*&gt;*) (1 samples, 0.02%)</title><rect x="0.2528%" y="197" width="0.0181%" height="15" fill="rgb(237,72,25)" fg:x="14" fg:w="1"/><text x="0.5028%" y="207.50"></text></g><g><title>std::__1::__tree&lt;std::__1::__value_type&lt;long, BinaryKey const*&gt;, std::__1::__map_value_compare&lt;long, std::__1::__value_type&lt;long, BinaryKey const*&gt;, std::__1::less&lt;long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;long, BinaryKey const*&gt;&gt;&gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;long, BinaryKey const*&gt;, void*&gt;*) (1 samples, 0.02%)</title><rect x="0.2528%" y="181" width="0.0181%" height="15" fill="rgb(244,70,9)" fg:x="14" fg:w="1"/><text x="0.5028%" y="191.50"></text></g><g><title>std::__1::__tree&lt;std::__1::__value_type&lt;long, BinaryKey const*&gt;, std::__1::__map_value_compare&lt;long, std::__1::__value_type&lt;long, BinaryKey const*&gt;, std::__1::less&lt;long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;long, BinaryKey const*&gt;&gt;&gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;long, BinaryKey const*&gt;, void*&gt;*) (1 samples, 0.02%)</title><rect x="0.2528%" y="165" width="0.0181%" height="15" fill="rgb(217,125,39)" fg:x="14" fg:w="1"/><text x="0.5028%" y="175.50"></text></g><g><title>std::__1::__tree&lt;std::__1::__value_type&lt;long, BinaryKey const*&gt;, std::__1::__map_value_compare&lt;long, std::__1::__value_type&lt;long, BinaryKey const*&gt;, std::__1::less&lt;long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;long, BinaryKey const*&gt;&gt;&gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;long, BinaryKey const*&gt;, void*&gt;*) (1 samples, 0.02%)</title><rect x="0.2528%" y="149" width="0.0181%" height="15" fill="rgb(235,36,10)" fg:x="14" fg:w="1"/><text x="0.5028%" y="159.50"></text></g><g><title>std::__1::__tree&lt;std::__1::__value_type&lt;long, BinaryKey const*&gt;, std::__1::__map_value_compare&lt;long, std::__1::__value_type&lt;long, BinaryKey const*&gt;, std::__1::less&lt;long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;long, BinaryKey const*&gt;&gt;&gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;long, BinaryKey const*&gt;, void*&gt;*) (1 samples, 0.02%)</title><rect x="0.2528%" y="133" width="0.0181%" height="15" fill="rgb(251,123,47)" fg:x="14" fg:w="1"/><text x="0.5028%" y="143.50"></text></g><g><title>std::__1::__tree&lt;std::__1::__value_type&lt;long, BinaryKey const*&gt;, std::__1::__map_value_compare&lt;long, std::__1::__value_type&lt;long, BinaryKey const*&gt;, std::__1::less&lt;long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;long, BinaryKey const*&gt;&gt;&gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;long, BinaryKey const*&gt;, void*&gt;*) (1 samples, 0.02%)</title><rect x="0.2528%" y="117" width="0.0181%" height="15" fill="rgb(221,13,13)" fg:x="14" fg:w="1"/><text x="0.5028%" y="127.50"></text></g><g><title>std::__1::__tree&lt;std::__1::__value_type&lt;long, BinaryKey const*&gt;, std::__1::__map_value_compare&lt;long, std::__1::__value_type&lt;long, BinaryKey const*&gt;, std::__1::less&lt;long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;long, BinaryKey const*&gt;&gt;&gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;long, BinaryKey const*&gt;, void*&gt;*) (1 samples, 0.02%)</title><rect x="0.2528%" y="101" width="0.0181%" height="15" fill="rgb(238,131,9)" fg:x="14" fg:w="1"/><text x="0.5028%" y="111.50"></text></g><g><title>std::__1::__tree&lt;std::__1::__value_type&lt;long, BinaryKey const*&gt;, std::__1::__map_value_compare&lt;long, std::__1::__value_type&lt;long, BinaryKey const*&gt;, std::__1::less&lt;long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;long, BinaryKey const*&gt;&gt;&gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;long, BinaryKey const*&gt;, void*&gt;*) (1 samples, 0.02%)</title><rect x="0.2528%" y="85" width="0.0181%" height="15" fill="rgb(211,50,8)" fg:x="14" fg:w="1"/><text x="0.5028%" y="95.50"></text></g><g><title>std::__1::__tree&lt;std::__1::__value_type&lt;long, BinaryKey const*&gt;, std::__1::__map_value_compare&lt;long, std::__1::__value_type&lt;long, BinaryKey const*&gt;, std::__1::less&lt;long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;long, BinaryKey const*&gt;&gt;&gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;long, BinaryKey const*&gt;, void*&gt;*) (1 samples, 0.02%)</title><rect x="0.2528%" y="69" width="0.0181%" height="15" fill="rgb(245,182,24)" fg:x="14" fg:w="1"/><text x="0.5028%" y="79.50"></text></g><g><title>tiny_free_no_lock (1 samples, 0.02%)</title><rect x="0.2528%" y="53" width="0.0181%" height="15" fill="rgb(242,14,37)" fg:x="14" fg:w="1"/><text x="0.5028%" y="63.50"></text></g><g><title>Security::GetMDSDBDir() (1 samples, 0.02%)</title><rect x="0.2708%" y="277" width="0.0181%" height="15" fill="rgb(246,228,12)" fg:x="15" fg:w="1"/><text x="0.5208%" y="287.50"></text></g><g><title>confstr (1 samples, 0.02%)</title><rect x="0.2708%" y="261" width="0.0181%" height="15" fill="rgb(213,55,15)" fg:x="15" fg:w="1"/><text x="0.5208%" y="271.50"></text></g><g><title>_dirhelper_internal (1 samples, 0.02%)</title><rect x="0.2708%" y="245" width="0.0181%" height="15" fill="rgb(209,9,3)" fg:x="15" fg:w="1"/><text x="0.5208%" y="255.50"></text></g><g><title>__user_local_dirname (1 samples, 0.02%)</title><rect x="0.2708%" y="229" width="0.0181%" height="15" fill="rgb(230,59,30)" fg:x="15" fg:w="1"/><text x="0.5208%" y="239.50"></text></g><g><title>mbr_uid_to_uuid (1 samples, 0.02%)</title><rect x="0.2708%" y="213" width="0.0181%" height="15" fill="rgb(209,121,21)" fg:x="15" fg:w="1"/><text x="0.5208%" y="223.50"></text></g><g><title>mbr_identifier_to_uuid (1 samples, 0.02%)</title><rect x="0.2708%" y="197" width="0.0181%" height="15" fill="rgb(220,109,13)" fg:x="15" fg:w="1"/><text x="0.5208%" y="207.50"></text></g><g><title>mbr_identifier_translate (1 samples, 0.02%)</title><rect x="0.2708%" y="181" width="0.0181%" height="15" fill="rgb(232,18,1)" fg:x="15" fg:w="1"/><text x="0.5208%" y="191.50"></text></g><g><title>_mbr_od_available (1 samples, 0.02%)</title><rect x="0.2708%" y="165" width="0.0181%" height="15" fill="rgb(215,41,42)" fg:x="15" fg:w="1"/><text x="0.5208%" y="175.50"></text></g><g><title>_mbr_xpc_pipe (1 samples, 0.02%)</title><rect x="0.2708%" y="149" width="0.0181%" height="15" fill="rgb(224,123,36)" fg:x="15" fg:w="1"/><text x="0.5208%" y="159.50"></text></g><g><title>pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="0.2708%" y="133" width="0.0181%" height="15" fill="rgb(240,125,3)" fg:x="15" fg:w="1"/><text x="0.5208%" y="143.50"></text></g><g><title>Security::KeychainCore::Certificate::publicKey() (5 samples, 0.09%)</title><rect x="0.2166%" y="469" width="0.0903%" height="15" fill="rgb(205,98,50)" fg:x="12" fg:w="5"/><text x="0.4666%" y="479.50"></text></g><g><title>Security::KeychainCore::Certificate::copyFirstFieldValue(cssm_data const&amp;) (5 samples, 0.09%)</title><rect x="0.2166%" y="453" width="0.0903%" height="15" fill="rgb(205,185,37)" fg:x="12" fg:w="5"/><text x="0.4666%" y="463.50"></text></g><g><title>Security::KeychainCore::Certificate::clHandle() (4 samples, 0.07%)</title><rect x="0.2347%" y="437" width="0.0722%" height="15" fill="rgb(238,207,15)" fg:x="13" fg:w="4"/><text x="0.4847%" y="447.50"></text></g><g><title>Security::CssmClient::AttachmentImpl::activate() (4 samples, 0.07%)</title><rect x="0.2347%" y="421" width="0.0722%" height="15" fill="rgb(213,199,42)" fg:x="13" fg:w="4"/><text x="0.4847%" y="431.50"></text></g><g><title>Security::CssmClient::ModuleImpl::activate() (4 samples, 0.07%)</title><rect x="0.2347%" y="405" width="0.0722%" height="15" fill="rgb(235,201,11)" fg:x="13" fg:w="4"/><text x="0.4847%" y="415.50"></text></g><g><title>CSSM_ModuleLoad (4 samples, 0.07%)</title><rect x="0.2347%" y="389" width="0.0722%" height="15" fill="rgb(207,46,11)" fg:x="13" fg:w="4"/><text x="0.4847%" y="399.50"></text></g><g><title>Security::CssmClient::Table&lt;Security::MDSClient::Common&gt;::startQuery(Security::CssmQuery const&amp;, bool) (4 samples, 0.07%)</title><rect x="0.2347%" y="373" width="0.0722%" height="15" fill="rgb(241,35,35)" fg:x="13" fg:w="4"/><text x="0.4847%" y="383.50"></text></g><g><title>Security::MDSClient::Directory::dlGetFirst(cssm_query const&amp;, cssm_db_record_attribute_data&amp;, cssm_data*, cssm_db_unique_record*&amp;) (4 samples, 0.07%)</title><rect x="0.2347%" y="357" width="0.0722%" height="15" fill="rgb(243,32,47)" fg:x="13" fg:w="4"/><text x="0.4847%" y="367.50"></text></g><g><title>Security::MDSClient::Directory::cdsa() const (4 samples, 0.07%)</title><rect x="0.2347%" y="341" width="0.0722%" height="15" fill="rgb(247,202,23)" fg:x="13" fg:w="4"/><text x="0.4847%" y="351.50"></text></g><g><title>mds_DbOpen(long, char const*, cssm_net_address const*, unsigned int, cssm_access_credentials const*, void const*, long*) (4 samples, 0.07%)</title><rect x="0.2347%" y="325" width="0.0722%" height="15" fill="rgb(219,102,11)" fg:x="13" fg:w="4"/><text x="0.4847%" y="335.50"></text></g><g><title>Security::MDSSession::DbOpen(char const*, cssm_net_address const*, unsigned int, Security::AccessCredentials const*, void const*, long&amp;) (4 samples, 0.07%)</title><rect x="0.2347%" y="309" width="0.0722%" height="15" fill="rgb(243,110,44)" fg:x="13" fg:w="4"/><text x="0.4847%" y="319.50"></text></g><g><title>Security::MDSSession::updateDataBases() (2 samples, 0.04%)</title><rect x="0.2708%" y="293" width="0.0361%" height="15" fill="rgb(222,74,54)" fg:x="15" fg:w="2"/><text x="0.5208%" y="303.50"></text></g><g><title>lstat (1 samples, 0.02%)</title><rect x="0.2889%" y="277" width="0.0181%" height="15" fill="rgb(216,99,12)" fg:x="16" fg:w="1"/><text x="0.5389%" y="287.50"></text></g><g><title>SecTrustCopyPublicKey (6 samples, 0.11%)</title><rect x="0.2166%" y="501" width="0.1083%" height="15" fill="rgb(226,22,26)" fg:x="12" fg:w="6"/><text x="0.4666%" y="511.50"></text></g><g><title>SecCertificateCopyPublicKey$LEGACYMAC (6 samples, 0.11%)</title><rect x="0.2166%" y="485" width="0.1083%" height="15" fill="rgb(217,163,10)" fg:x="12" fg:w="6"/><text x="0.4666%" y="495.50"></text></g><g><title>countLegacyAPI (1 samples, 0.02%)</title><rect x="0.3069%" y="469" width="0.0181%" height="15" fill="rgb(213,25,53)" fg:x="17" fg:w="1"/><text x="0.5569%" y="479.50"></text></g><g><title>_dispatch_once_callout (1 samples, 0.02%)</title><rect x="0.3069%" y="453" width="0.0181%" height="15" fill="rgb(252,105,26)" fg:x="17" fg:w="1"/><text x="0.5569%" y="463.50"></text></g><g><title>_dispatch_client_callout (1 samples, 0.02%)</title><rect x="0.3069%" y="437" width="0.0181%" height="15" fill="rgb(220,39,43)" fg:x="17" fg:w="1"/><text x="0.5569%" y="447.50"></text></g><g><title>__countLegacyAPI_block_invoke (1 samples, 0.02%)</title><rect x="0.3069%" y="421" width="0.0181%" height="15" fill="rgb(229,68,48)" fg:x="17" fg:w="1"/><text x="0.5569%" y="431.50"></text></g><g><title>+[SecCoreAnalytics sendEventLazy:builder:] (1 samples, 0.02%)</title><rect x="0.3069%" y="405" width="0.0181%" height="15" fill="rgb(252,8,32)" fg:x="17" fg:w="1"/><text x="0.5569%" y="415.50"></text></g><g><title>AnalyticsSendEventInternal(NSString const*, NSDictionary&lt;NSString*, NSObject*&gt;* () block_pointer, XPCMessagePriority, EventPayloadFormat, NSDictionary&lt;NSString*, NSObject*&gt;*) (1 samples, 0.02%)</title><rect x="0.3069%" y="389" width="0.0181%" height="15" fill="rgb(223,20,43)" fg:x="17" fg:w="1"/><text x="0.5569%" y="399.50"></text></g><g><title>CASPIEnter() (1 samples, 0.02%)</title><rect x="0.3069%" y="373" width="0.0181%" height="15" fill="rgb(229,81,49)" fg:x="17" fg:w="1"/><text x="0.5569%" y="383.50"></text></g><g><title>_dispatch_once_callout (1 samples, 0.02%)</title><rect x="0.3069%" y="357" width="0.0181%" height="15" fill="rgb(236,28,36)" fg:x="17" fg:w="1"/><text x="0.5569%" y="367.50"></text></g><g><title>_dispatch_client_callout (1 samples, 0.02%)</title><rect x="0.3069%" y="341" width="0.0181%" height="15" fill="rgb(249,185,26)" fg:x="17" fg:w="1"/><text x="0.5569%" y="351.50"></text></g><g><title>sSetupSharedLogDomains() (1 samples, 0.02%)</title><rect x="0.3069%" y="325" width="0.0181%" height="15" fill="rgb(249,174,33)" fg:x="17" fg:w="1"/><text x="0.5569%" y="335.50"></text></g><g><title>os_log_create (1 samples, 0.02%)</title><rect x="0.3069%" y="309" width="0.0181%" height="15" fill="rgb(233,201,37)" fg:x="17" fg:w="1"/><text x="0.5569%" y="319.50"></text></g><g><title>_os_log_preferences_refresh (1 samples, 0.02%)</title><rect x="0.3069%" y="293" width="0.0181%" height="15" fill="rgb(221,78,26)" fg:x="17" fg:w="1"/><text x="0.5569%" y="303.50"></text></g><g><title>_os_log_stream_filter_refresh (1 samples, 0.02%)</title><rect x="0.3069%" y="277" width="0.0181%" height="15" fill="rgb(250,127,30)" fg:x="17" fg:w="1"/><text x="0.5569%" y="287.50"></text></g><g><title>_os_log_matches_filter (1 samples, 0.02%)</title><rect x="0.3069%" y="261" width="0.0181%" height="15" fill="rgb(230,49,44)" fg:x="17" fg:w="1"/><text x="0.5569%" y="271.50"></text></g><g><title>xpc_array_apply (1 samples, 0.02%)</title><rect x="0.3069%" y="245" width="0.0181%" height="15" fill="rgb(229,67,23)" fg:x="17" fg:w="1"/><text x="0.5569%" y="255.50"></text></g><g><title>___os_log_matches_logical_expression_filter_block_invoke (1 samples, 0.02%)</title><rect x="0.3069%" y="229" width="0.0181%" height="15" fill="rgb(249,83,47)" fg:x="17" fg:w="1"/><text x="0.5569%" y="239.50"></text></g><g><title>_os_log_matches_filter (1 samples, 0.02%)</title><rect x="0.3069%" y="213" width="0.0181%" height="15" fill="rgb(215,43,3)" fg:x="17" fg:w="1"/><text x="0.5569%" y="223.50"></text></g><g><title>xpc_array_apply (1 samples, 0.02%)</title><rect x="0.3069%" y="197" width="0.0181%" height="15" fill="rgb(238,154,13)" fg:x="17" fg:w="1"/><text x="0.5569%" y="207.50"></text></g><g><title>___os_log_matches_logical_expression_filter_block_invoke (1 samples, 0.02%)</title><rect x="0.3069%" y="181" width="0.0181%" height="15" fill="rgb(219,56,2)" fg:x="17" fg:w="1"/><text x="0.5569%" y="191.50"></text></g><g><title>_os_log_matches_filter (1 samples, 0.02%)</title><rect x="0.3069%" y="165" width="0.0181%" height="15" fill="rgb(233,0,4)" fg:x="17" fg:w="1"/><text x="0.5569%" y="175.50"></text></g><g><title>_os_log_simple_filter_subtype_matches_string (1 samples, 0.02%)</title><rect x="0.3069%" y="149" width="0.0181%" height="15" fill="rgb(235,30,7)" fg:x="17" fg:w="1"/><text x="0.5569%" y="159.50"></text></g><g><title>xpc_dictionary_get_dictionary (1 samples, 0.02%)</title><rect x="0.3069%" y="133" width="0.0181%" height="15" fill="rgb(250,79,13)" fg:x="17" fg:w="1"/><text x="0.5569%" y="143.50"></text></g><g><title>_xpc_dictionary_look_up (1 samples, 0.02%)</title><rect x="0.3069%" y="117" width="0.0181%" height="15" fill="rgb(211,146,34)" fg:x="17" fg:w="1"/><text x="0.5569%" y="127.50"></text></g><g><title>_platform_strcmp$VARIANT$Base (1 samples, 0.02%)</title><rect x="0.3069%" y="101" width="0.0181%" height="15" fill="rgb(228,22,38)" fg:x="17" fg:w="1"/><text x="0.5569%" y="111.50"></text></g><g><title>SecCEPCrlDistributionPoints (1 samples, 0.02%)</title><rect x="0.3250%" y="453" width="0.0181%" height="15" fill="rgb(235,168,5)" fg:x="18" fg:w="1"/><text x="0.5750%" y="463.50"></text></g><g><title>parseGeneralNamesContent (1 samples, 0.02%)</title><rect x="0.3250%" y="437" width="0.0181%" height="15" fill="rgb(221,155,16)" fg:x="18" fg:w="1"/><text x="0.5750%" y="447.50"></text></g><g><title>appendCRLDPFromGeneralNames (1 samples, 0.02%)</title><rect x="0.3250%" y="421" width="0.0181%" height="15" fill="rgb(215,215,53)" fg:x="18" fg:w="1"/><text x="0.5750%" y="431.50"></text></g><g><title>CFURLCreateWithBytes (1 samples, 0.02%)</title><rect x="0.3250%" y="405" width="0.0181%" height="15" fill="rgb(223,4,10)" fg:x="18" fg:w="1"/><text x="0.5750%" y="415.50"></text></g><g><title>_CFURLCreateURLStringWithBytes (1 samples, 0.02%)</title><rect x="0.3250%" y="389" width="0.0181%" height="15" fill="rgb(234,103,6)" fg:x="18" fg:w="1"/><text x="0.5750%" y="399.50"></text></g><g><title>__CFStringCreateImmutableFunnel3 (1 samples, 0.02%)</title><rect x="0.3250%" y="373" width="0.0181%" height="15" fill="rgb(227,97,0)" fg:x="18" fg:w="1"/><text x="0.5750%" y="383.50"></text></g><g><title>__CFSearchStringROM (1 samples, 0.02%)</title><rect x="0.3250%" y="357" width="0.0181%" height="15" fill="rgb(234,150,53)" fg:x="18" fg:w="1"/><text x="0.5750%" y="367.50"></text></g><g><title>SSLHandshake (13 samples, 0.23%)</title><rect x="0.1264%" y="597" width="0.2347%" height="15" fill="rgb(228,201,54)" fg:x="7" fg:w="13"/><text x="0.3764%" y="607.50"></text></g><g><title>SSLHandshakeProceed (13 samples, 0.23%)</title><rect x="0.1264%" y="581" width="0.2347%" height="15" fill="rgb(222,22,37)" fg:x="7" fg:w="13"/><text x="0.3764%" y="591.50"></text></g><g><title>tls_handshake_process (9 samples, 0.16%)</title><rect x="0.1986%" y="565" width="0.1625%" height="15" fill="rgb(237,53,32)" fg:x="11" fg:w="9"/><text x="0.4486%" y="575.50"></text></g><g><title>SSLProcessHandshakeRecordInner (9 samples, 0.16%)</title><rect x="0.1986%" y="549" width="0.1625%" height="15" fill="rgb(233,25,53)" fg:x="11" fg:w="9"/><text x="0.4486%" y="559.50"></text></g><g><title>tls_handshake_message_callback (8 samples, 0.14%)</title><rect x="0.2166%" y="533" width="0.1444%" height="15" fill="rgb(210,40,34)" fg:x="12" fg:w="8"/><text x="0.4666%" y="543.50"></text></g><g><title>tls_helper_set_peer_pubkey (8 samples, 0.14%)</title><rect x="0.2166%" y="517" width="0.1444%" height="15" fill="rgb(241,220,44)" fg:x="12" fg:w="8"/><text x="0.4666%" y="527.50"></text></g><g><title>tls_helper_create_cfarray_from_certificates (2 samples, 0.04%)</title><rect x="0.3250%" y="501" width="0.0361%" height="15" fill="rgb(235,28,35)" fg:x="18" fg:w="2"/><text x="0.5750%" y="511.50"></text></g><g><title>SecCertificateCreateWithData (2 samples, 0.04%)</title><rect x="0.3250%" y="485" width="0.0361%" height="15" fill="rgb(210,56,17)" fg:x="18" fg:w="2"/><text x="0.5750%" y="495.50"></text></g><g><title>SecCertificateParse (2 samples, 0.04%)</title><rect x="0.3250%" y="469" width="0.0361%" height="15" fill="rgb(224,130,29)" fg:x="18" fg:w="2"/><text x="0.5750%" y="479.50"></text></g><g><title>createNormalizedX501Name (1 samples, 0.02%)</title><rect x="0.3430%" y="453" width="0.0181%" height="15" fill="rgb(235,212,8)" fg:x="19" fg:w="1"/><text x="0.5930%" y="463.50"></text></g><g><title>__CFDataInit (1 samples, 0.02%)</title><rect x="0.3430%" y="437" width="0.0181%" height="15" fill="rgb(223,33,50)" fg:x="19" fg:w="1"/><text x="0.5930%" y="447.50"></text></g><g><title>_dispatch_once_callout (1 samples, 0.02%)</title><rect x="0.3611%" y="437" width="0.0181%" height="15" fill="rgb(219,149,13)" fg:x="20" fg:w="1"/><text x="0.6111%" y="447.50"></text></g><g><title>_dispatch_client_callout (1 samples, 0.02%)</title><rect x="0.3611%" y="421" width="0.0181%" height="15" fill="rgb(250,156,29)" fg:x="20" fg:w="1"/><text x="0.6111%" y="431.50"></text></g><g><title>__SecTrustGetCurrentAccessGroups_block_invoke (1 samples, 0.02%)</title><rect x="0.3611%" y="405" width="0.0181%" height="15" fill="rgb(216,193,19)" fg:x="20" fg:w="1"/><text x="0.6111%" y="415.50"></text></g><g><title>CFArrayCreateForCFTypes.7294 (1 samples, 0.02%)</title><rect x="0.3611%" y="389" width="0.0181%" height="15" fill="rgb(216,135,14)" fg:x="20" fg:w="1"/><text x="0.6111%" y="399.50"></text></g><g><title>-[NSArray initWithArray:range:copyItems:] (1 samples, 0.02%)</title><rect x="0.3611%" y="373" width="0.0181%" height="15" fill="rgb(241,47,5)" fg:x="20" fg:w="1"/><text x="0.6111%" y="383.50"></text></g><g><title>__NSArrayI_new (1 samples, 0.02%)</title><rect x="0.3611%" y="357" width="0.0181%" height="15" fill="rgb(233,42,35)" fg:x="20" fg:w="1"/><text x="0.6111%" y="367.50"></text></g><g><title>_objc_msgSend_uncached (1 samples, 0.02%)</title><rect x="0.3611%" y="341" width="0.0181%" height="15" fill="rgb(231,13,6)" fg:x="20" fg:w="1"/><text x="0.6111%" y="351.50"></text></g><g><title>lookUpImpOrForward (1 samples, 0.02%)</title><rect x="0.3611%" y="325" width="0.0181%" height="15" fill="rgb(207,181,40)" fg:x="20" fg:w="1"/><text x="0.6111%" y="335.50"></text></g><g><title>realizeAndInitializeIfNeeded_locked(objc_object*, objc_class*, bool) (1 samples, 0.02%)</title><rect x="0.3611%" y="309" width="0.0181%" height="15" fill="rgb(254,173,49)" fg:x="20" fg:w="1"/><text x="0.6111%" y="319.50"></text></g><g><title>realizeClassMaybeSwiftMaybeRelock(objc_class*, locker_mixin&lt;lockdebug::lock_mixin&lt;objc_lock_base_t&gt;&gt;&amp;, bool) (1 samples, 0.02%)</title><rect x="0.3611%" y="293" width="0.0181%" height="15" fill="rgb(221,1,38)" fg:x="20" fg:w="1"/><text x="0.6111%" y="303.50"></text></g><g><title>realizeClassWithoutSwift(objc_class*, objc_class*) (1 samples, 0.02%)</title><rect x="0.3611%" y="277" width="0.0181%" height="15" fill="rgb(206,124,46)" fg:x="20" fg:w="1"/><text x="0.6111%" y="287.50"></text></g><g><title>realizeClassWithoutSwift(objc_class*, objc_class*) (1 samples, 0.02%)</title><rect x="0.3611%" y="261" width="0.0181%" height="15" fill="rgb(249,21,11)" fg:x="20" fg:w="1"/><text x="0.6111%" y="271.50"></text></g><g><title>SecXPCDictionaryCopyChainOptional (1 samples, 0.02%)</title><rect x="0.3791%" y="405" width="0.0181%" height="15" fill="rgb(222,201,40)" fg:x="21" fg:w="1"/><text x="0.6291%" y="415.50"></text></g><g><title>SecCertificateCreateWithXPCArrayAtIndex (1 samples, 0.02%)</title><rect x="0.3791%" y="389" width="0.0181%" height="15" fill="rgb(235,61,29)" fg:x="21" fg:w="1"/><text x="0.6291%" y="399.50"></text></g><g><title>SecCertificateCreateWithBytes (1 samples, 0.02%)</title><rect x="0.3791%" y="373" width="0.0181%" height="15" fill="rgb(219,207,3)" fg:x="21" fg:w="1"/><text x="0.6291%" y="383.50"></text></g><g><title>SecCertificateGetTypeID (1 samples, 0.02%)</title><rect x="0.3791%" y="357" width="0.0181%" height="15" fill="rgb(222,56,46)" fg:x="21" fg:w="1"/><text x="0.6291%" y="367.50"></text></g><g><title>&lt;tokio_native_tls::MidHandshake&lt;S&gt; as core::future::future::Future&gt;::poll (16 samples, 0.29%)</title><rect x="0.1264%" y="645" width="0.2889%" height="15" fill="rgb(239,76,54)" fg:x="7" fg:w="16"/><text x="0.3764%" y="655.50"></text></g><g><title>native_tls::imp::MidHandshakeTlsStream&lt;S&gt;::handshake (16 samples, 0.29%)</title><rect x="0.1264%" y="629" width="0.2889%" height="15" fill="rgb(231,124,27)" fg:x="7" fg:w="16"/><text x="0.3764%" y="639.50"></text></g><g><title>security_framework::secure_transport::MidHandshakeClientBuilder&lt;S&gt;::handshake (16 samples, 0.29%)</title><rect x="0.1264%" y="613" width="0.2889%" height="15" fill="rgb(249,195,6)" fg:x="7" fg:w="16"/><text x="0.3764%" y="623.50"></text></g><g><title>security_framework::trust::SecTrust::evaluate_with_error (3 samples, 0.05%)</title><rect x="0.3611%" y="597" width="0.0542%" height="15" fill="rgb(237,174,47)" fg:x="20" fg:w="3"/><text x="0.6111%" y="607.50"></text></g><g><title>SecTrustEvaluateInternal (3 samples, 0.05%)</title><rect x="0.3611%" y="581" width="0.0542%" height="15" fill="rgb(206,201,31)" fg:x="20" fg:w="3"/><text x="0.6111%" y="591.50"></text></g><g><title>SecTrustEvaluateIfNecessary (3 samples, 0.05%)</title><rect x="0.3611%" y="565" width="0.0542%" height="15" fill="rgb(231,57,52)" fg:x="20" fg:w="3"/><text x="0.6111%" y="575.50"></text></g><g><title>_dispatch_lane_barrier_sync_invoke_and_complete (3 samples, 0.05%)</title><rect x="0.3611%" y="549" width="0.0542%" height="15" fill="rgb(248,177,22)" fg:x="20" fg:w="3"/><text x="0.6111%" y="559.50"></text></g><g><title>_dispatch_client_callout (3 samples, 0.05%)</title><rect x="0.3611%" y="533" width="0.0542%" height="15" fill="rgb(215,211,37)" fg:x="20" fg:w="3"/><text x="0.6111%" y="543.50"></text></g><g><title>__SecTrustEvaluateIfNecessary_block_invoke (3 samples, 0.05%)</title><rect x="0.3611%" y="517" width="0.0542%" height="15" fill="rgb(241,128,51)" fg:x="20" fg:w="3"/><text x="0.6111%" y="527.50"></text></g><g><title>_os_activity_initiate_impl (3 samples, 0.05%)</title><rect x="0.3611%" y="501" width="0.0542%" height="15" fill="rgb(227,165,31)" fg:x="20" fg:w="3"/><text x="0.6111%" y="511.50"></text></g><g><title>__SecTrustEvaluateIfNecessary_block_invoke_2 (3 samples, 0.05%)</title><rect x="0.3611%" y="485" width="0.0542%" height="15" fill="rgb(228,167,24)" fg:x="20" fg:w="3"/><text x="0.6111%" y="495.50"></text></g><g><title>SecOSStatusWith (3 samples, 0.05%)</title><rect x="0.3611%" y="469" width="0.0542%" height="15" fill="rgb(228,143,12)" fg:x="20" fg:w="3"/><text x="0.6111%" y="479.50"></text></g><g><title>__SecTrustEvaluateIfNecessary_block_invoke_3 (3 samples, 0.05%)</title><rect x="0.3611%" y="453" width="0.0542%" height="15" fill="rgb(249,149,8)" fg:x="20" fg:w="3"/><text x="0.6111%" y="463.50"></text></g><g><title>securityd_send_sync_and_do (2 samples, 0.04%)</title><rect x="0.3791%" y="437" width="0.0361%" height="15" fill="rgb(243,35,44)" fg:x="21" fg:w="2"/><text x="0.6291%" y="447.50"></text></g><g><title>__handle_trust_evaluate_xpc_block_invoke_2 (2 samples, 0.04%)</title><rect x="0.3791%" y="421" width="0.0361%" height="15" fill="rgb(246,89,9)" fg:x="21" fg:w="2"/><text x="0.6291%" y="431.50"></text></g><g><title>SecXPCDictionaryCopyDictionaryOptional (1 samples, 0.02%)</title><rect x="0.3972%" y="405" width="0.0181%" height="15" fill="rgb(233,213,13)" fg:x="22" fg:w="1"/><text x="0.6472%" y="415.50"></text></g><g><title>SecXPCDictionaryCopyDictionaryAndPossiblyMutateMessage (1 samples, 0.02%)</title><rect x="0.3972%" y="389" width="0.0181%" height="15" fill="rgb(233,141,41)" fg:x="22" fg:w="1"/><text x="0.6472%" y="399.50"></text></g><g><title>SecXPCDictionaryCopyPListAndPossiblyMutateMessage (1 samples, 0.02%)</title><rect x="0.3972%" y="373" width="0.0181%" height="15" fill="rgb(239,167,4)" fg:x="22" fg:w="1"/><text x="0.6472%" y="383.50"></text></g><g><title>der_decode_plist (1 samples, 0.02%)</title><rect x="0.3972%" y="357" width="0.0181%" height="15" fill="rgb(209,217,16)" fg:x="22" fg:w="1"/><text x="0.6472%" y="367.50"></text></g><g><title>der_decode_dictionary (1 samples, 0.02%)</title><rect x="0.3972%" y="341" width="0.0181%" height="15" fill="rgb(219,88,35)" fg:x="22" fg:w="1"/><text x="0.6472%" y="351.50"></text></g><g><title>der_decode_plist (1 samples, 0.02%)</title><rect x="0.3972%" y="325" width="0.0181%" height="15" fill="rgb(220,193,23)" fg:x="22" fg:w="1"/><text x="0.6472%" y="335.50"></text></g><g><title>der_decode_date (1 samples, 0.02%)</title><rect x="0.3972%" y="309" width="0.0181%" height="15" fill="rgb(230,90,52)" fg:x="22" fg:w="1"/><text x="0.6472%" y="319.50"></text></g><g><title>der_decode_commontime_body (1 samples, 0.02%)</title><rect x="0.3972%" y="293" width="0.0181%" height="15" fill="rgb(252,106,19)" fg:x="22" fg:w="1"/><text x="0.6472%" y="303.50"></text></g><g><title>SecCFCalendarDoWithZuluCalendar (1 samples, 0.02%)</title><rect x="0.3972%" y="277" width="0.0181%" height="15" fill="rgb(206,74,20)" fg:x="22" fg:w="1"/><text x="0.6472%" y="287.50"></text></g><g><title>_dispatch_lane_barrier_sync_invoke_and_complete (1 samples, 0.02%)</title><rect x="0.3972%" y="261" width="0.0181%" height="15" fill="rgb(230,138,44)" fg:x="22" fg:w="1"/><text x="0.6472%" y="271.50"></text></g><g><title>_dispatch_client_callout (1 samples, 0.02%)</title><rect x="0.3972%" y="245" width="0.0181%" height="15" fill="rgb(235,182,43)" fg:x="22" fg:w="1"/><text x="0.6472%" y="255.50"></text></g><g><title>__SecCFCalendarDoWithZuluCalendar_block_invoke (1 samples, 0.02%)</title><rect x="0.3972%" y="229" width="0.0181%" height="15" fill="rgb(242,16,51)" fg:x="22" fg:w="1"/><text x="0.6472%" y="239.50"></text></g><g><title>_dispatch_once_callout (1 samples, 0.02%)</title><rect x="0.3972%" y="213" width="0.0181%" height="15" fill="rgb(248,9,4)" fg:x="22" fg:w="1"/><text x="0.6472%" y="223.50"></text></g><g><title>_dispatch_client_callout (1 samples, 0.02%)</title><rect x="0.3972%" y="197" width="0.0181%" height="15" fill="rgb(210,31,22)" fg:x="22" fg:w="1"/><text x="0.6472%" y="207.50"></text></g><g><title>__SecCFCalendarGetZulu_block_invoke (1 samples, 0.02%)</title><rect x="0.3972%" y="181" width="0.0181%" height="15" fill="rgb(239,54,39)" fg:x="22" fg:w="1"/><text x="0.6472%" y="191.50"></text></g><g><title>@objc static NSCalendar._newCalendarWithIdentifier(_:) (1 samples, 0.02%)</title><rect x="0.3972%" y="165" width="0.0181%" height="15" fill="rgb(230,99,41)" fg:x="22" fg:w="1"/><text x="0.6472%" y="175.50"></text></g><g><title>specialized static NSCalendar._newCalendarWithIdentifier(_:) (1 samples, 0.02%)</title><rect x="0.3972%" y="149" width="0.0181%" height="15" fill="rgb(253,106,12)" fg:x="22" fg:w="1"/><text x="0.6472%" y="159.50"></text></g><g><title>Calendar.init(identifier:) (1 samples, 0.02%)</title><rect x="0.3972%" y="133" width="0.0181%" height="15" fill="rgb(213,46,41)" fg:x="22" fg:w="1"/><text x="0.6472%" y="143.50"></text></g><g><title>protocol witness for _CalendarProtocol.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:) in conformance _CalendarGregorian (1 samples, 0.02%)</title><rect x="0.3972%" y="117" width="0.0181%" height="15" fill="rgb(215,133,35)" fg:x="22" fg:w="1"/><text x="0.6472%" y="127.50"></text></g><g><title>_CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:) (1 samples, 0.02%)</title><rect x="0.3972%" y="101" width="0.0181%" height="15" fill="rgb(213,28,5)" fg:x="22" fg:w="1"/><text x="0.6472%" y="111.50"></text></g><g><title>TimeZoneCache.default.getter (1 samples, 0.02%)</title><rect x="0.3972%" y="85" width="0.0181%" height="15" fill="rgb(215,77,49)" fg:x="22" fg:w="1"/><text x="0.6472%" y="95.50"></text></g><g><title>@objc _NSSwiftProcessInfo.environment.getter (1 samples, 0.02%)</title><rect x="0.3972%" y="69" width="0.0181%" height="15" fill="rgb(248,100,22)" fg:x="22" fg:w="1"/><text x="0.6472%" y="79.50"></text></g><g><title>specialized _ProcessInfo.environment.getter (1 samples, 0.02%)</title><rect x="0.3972%" y="53" width="0.0181%" height="15" fill="rgb(208,67,9)" fg:x="22" fg:w="1"/><text x="0.6472%" y="63.50"></text></g><g><title>swift_bridgeObjectRelease (1 samples, 0.02%)</title><rect x="0.3972%" y="37" width="0.0181%" height="15" fill="rgb(219,133,21)" fg:x="22" fg:w="1"/><text x="0.6472%" y="47.50"></text></g><g><title>start (23 samples, 0.42%)</title><rect x="0.0181%" y="821" width="0.4152%" height="15" fill="rgb(246,46,29)" fg:x="1" fg:w="23"/><text x="0.2681%" y="831.50"></text></g><g><title>main (20 samples, 0.36%)</title><rect x="0.0722%" y="805" width="0.3611%" height="15" fill="rgb(246,185,52)" fg:x="4" fg:w="20"/><text x="0.3222%" y="815.50"></text></g><g><title>std::rt::lang_start_internal (20 samples, 0.36%)</title><rect x="0.0722%" y="789" width="0.3611%" height="15" fill="rgb(252,136,11)" fg:x="4" fg:w="20"/><text x="0.3222%" y="799.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (20 samples, 0.36%)</title><rect x="0.0722%" y="773" width="0.3611%" height="15" fill="rgb(219,138,53)" fg:x="4" fg:w="20"/><text x="0.3222%" y="783.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (20 samples, 0.36%)</title><rect x="0.0722%" y="757" width="0.3611%" height="15" fill="rgb(211,51,23)" fg:x="4" fg:w="20"/><text x="0.3222%" y="767.50"></text></g><g><title>okex::main (20 samples, 0.36%)</title><rect x="0.0722%" y="741" width="0.3611%" height="15" fill="rgb(247,221,28)" fg:x="4" fg:w="20"/><text x="0.3222%" y="751.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (19 samples, 0.34%)</title><rect x="0.0903%" y="725" width="0.3430%" height="15" fill="rgb(251,222,45)" fg:x="5" fg:w="19"/><text x="0.3403%" y="735.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (19 samples, 0.34%)</title><rect x="0.0903%" y="709" width="0.3430%" height="15" fill="rgb(217,162,53)" fg:x="5" fg:w="19"/><text x="0.3403%" y="719.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (19 samples, 0.34%)</title><rect x="0.0903%" y="693" width="0.3430%" height="15" fill="rgb(229,93,14)" fg:x="5" fg:w="19"/><text x="0.3403%" y="703.50"></text></g><g><title>quant_exchange::okex::OkexClient::get_writer_and_reader::_{{closure}} (19 samples, 0.34%)</title><rect x="0.0903%" y="677" width="0.3430%" height="15" fill="rgb(209,67,49)" fg:x="5" fg:w="19"/><text x="0.3403%" y="687.50"></text></g><g><title>tokio_tungstenite::tls::encryption::native_tls::wrap_stream::_{{closure}} (17 samples, 0.31%)</title><rect x="0.1264%" y="661" width="0.3069%" height="15" fill="rgb(213,87,29)" fg:x="7" fg:w="17"/><text x="0.3764%" y="671.50"></text></g><g><title>&lt;tokio_native_tls::StartedHandshakeFuture&lt;F,S&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="0.4152%" y="645" width="0.0181%" height="15" fill="rgb(205,151,52)" fg:x="23" fg:w="1"/><text x="0.6652%" y="655.50"></text></g><g><title>native_tls::imp::TlsConnector::connect (1 samples, 0.02%)</title><rect x="0.4152%" y="629" width="0.0181%" height="15" fill="rgb(253,215,39)" fg:x="23" fg:w="1"/><text x="0.6652%" y="639.50"></text></g><g><title>security_framework::secure_transport::ClientBuilder::handshake (1 samples, 0.02%)</title><rect x="0.4152%" y="613" width="0.0181%" height="15" fill="rgb(221,220,41)" fg:x="23" fg:w="1"/><text x="0.6652%" y="623.50"></text></g><g><title>SSLCreateContext (1 samples, 0.02%)</title><rect x="0.4152%" y="597" width="0.0181%" height="15" fill="rgb(218,133,21)" fg:x="23" fg:w="1"/><text x="0.6652%" y="607.50"></text></g><g><title>SSLCreateContextWithRecordFuncs (1 samples, 0.02%)</title><rect x="0.4152%" y="581" width="0.0181%" height="15" fill="rgb(221,193,43)" fg:x="23" fg:w="1"/><text x="0.6652%" y="591.50"></text></g><g><title>_dispatch_once_callout (1 samples, 0.02%)</title><rect x="0.4152%" y="565" width="0.0181%" height="15" fill="rgb(240,128,52)" fg:x="23" fg:w="1"/><text x="0.6652%" y="575.50"></text></g><g><title>_dispatch_client_callout (1 samples, 0.02%)</title><rect x="0.4152%" y="549" width="0.0181%" height="15" fill="rgb(253,114,12)" fg:x="23" fg:w="1"/><text x="0.6652%" y="559.50"></text></g><g><title>__SSLCreateContextWithRecordFuncs_block_invoke (1 samples, 0.02%)</title><rect x="0.4152%" y="533" width="0.0181%" height="15" fill="rgb(215,223,47)" fg:x="23" fg:w="1"/><text x="0.6652%" y="543.50"></text></g><g><title>_CFPreferencesCopyAppValueWithContainerAndConfiguration (1 samples, 0.02%)</title><rect x="0.4152%" y="517" width="0.0181%" height="15" fill="rgb(248,225,23)" fg:x="23" fg:w="1"/><text x="0.6652%" y="527.50"></text></g><g><title>-[_CFXPreferences copyAppValueForKey:identifier:container:configurationURL:] (1 samples, 0.02%)</title><rect x="0.4152%" y="501" width="0.0181%" height="15" fill="rgb(250,108,0)" fg:x="23" fg:w="1"/><text x="0.6652%" y="511.50"></text></g><g><title>-[_CFXPreferences withSearchListForIdentifier:container:cloudConfigurationURL:perform:] (1 samples, 0.02%)</title><rect x="0.4152%" y="485" width="0.0181%" height="15" fill="rgb(228,208,7)" fg:x="23" fg:w="1"/><text x="0.6652%" y="495.50"></text></g><g><title>__108-[_CFXPreferences(SearchListAdditions) withSearchListForIdentifier:container:cloudConfigurationURL:perform:]_block_invoke (1 samples, 0.02%)</title><rect x="0.4152%" y="469" width="0.0181%" height="15" fill="rgb(244,45,10)" fg:x="23" fg:w="1"/><text x="0.6652%" y="479.50"></text></g><g><title>-[_CFXPreferences withSearchLists:] (1 samples, 0.02%)</title><rect x="0.4152%" y="453" width="0.0181%" height="15" fill="rgb(207,125,25)" fg:x="23" fg:w="1"/><text x="0.6652%" y="463.50"></text></g><g><title>__108-[_CFXPreferences(SearchListAdditions) withSearchListForIdentifier:container:cloudConfigurationURL:perform:]_block_invoke.152 (1 samples, 0.02%)</title><rect x="0.4152%" y="437" width="0.0181%" height="15" fill="rgb(210,195,18)" fg:x="23" fg:w="1"/><text x="0.6652%" y="447.50"></text></g><g><title>-[CFPrefsSearchListSource addSourceForIdentifier:user:byHost:container:] (1 samples, 0.02%)</title><rect x="0.4152%" y="421" width="0.0181%" height="15" fill="rgb(249,80,12)" fg:x="23" fg:w="1"/><text x="0.6652%" y="431.50"></text></g><g><title>-[_CFXPreferences withSourceForIdentifier:user:byHost:container:cloud:perform:] (1 samples, 0.02%)</title><rect x="0.4152%" y="405" width="0.0181%" height="15" fill="rgb(221,65,9)" fg:x="23" fg:w="1"/><text x="0.6652%" y="415.50"></text></g><g><title>__96-[_CFXPreferences(SourceAdditions) withSourceForIdentifier:user:byHost:container:cloud:perform:]_block_invoke.213 (1 samples, 0.02%)</title><rect x="0.4152%" y="389" width="0.0181%" height="15" fill="rgb(235,49,36)" fg:x="23" fg:w="1"/><text x="0.6652%" y="399.50"></text></g><g><title>_CFCopyHomeDirURLForUser (1 samples, 0.02%)</title><rect x="0.4152%" y="373" width="0.0181%" height="15" fill="rgb(225,32,20)" fg:x="23" fg:w="1"/><text x="0.6652%" y="383.50"></text></g><g><title>getpwuid (1 samples, 0.02%)</title><rect x="0.4152%" y="357" width="0.0181%" height="15" fill="rgb(215,141,46)" fg:x="23" fg:w="1"/><text x="0.6652%" y="367.50"></text></g><g><title>search_item_bynumber (1 samples, 0.02%)</title><rect x="0.4152%" y="341" width="0.0181%" height="15" fill="rgb(250,160,47)" fg:x="23" fg:w="1"/><text x="0.6652%" y="351.50"></text></g><g><title>ds_user_byuid (1 samples, 0.02%)</title><rect x="0.4152%" y="325" width="0.0181%" height="15" fill="rgb(216,222,40)" fg:x="23" fg:w="1"/><text x="0.6652%" y="335.50"></text></g><g><title>_od_running (1 samples, 0.02%)</title><rect x="0.4152%" y="309" width="0.0181%" height="15" fill="rgb(234,217,39)" fg:x="23" fg:w="1"/><text x="0.6652%" y="319.50"></text></g><g><title>issetugid (1 samples, 0.02%)</title><rect x="0.4152%" y="293" width="0.0181%" height="15" fill="rgb(207,178,40)" fg:x="23" fg:w="1"/><text x="0.6652%" y="303.50"></text></g><g><title>_gai_sort_list (1 samples, 0.02%)</title><rect x="0.4333%" y="597" width="0.0181%" height="15" fill="rgb(221,136,13)" fg:x="24" fg:w="1"/><text x="0.6833%" y="607.50"></text></g><g><title>_isort (1 samples, 0.02%)</title><rect x="0.4333%" y="581" width="0.0181%" height="15" fill="rgb(249,199,10)" fg:x="24" fg:w="1"/><text x="0.6833%" y="591.50"></text></g><g><title>si_destination_compare (1 samples, 0.02%)</title><rect x="0.4333%" y="565" width="0.0181%" height="15" fill="rgb(249,222,13)" fg:x="24" fg:w="1"/><text x="0.6833%" y="575.50"></text></g><g><title>pthread_once (1 samples, 0.02%)</title><rect x="0.4333%" y="549" width="0.0181%" height="15" fill="rgb(244,185,38)" fg:x="24" fg:w="1"/><text x="0.6833%" y="559.50"></text></g><g><title>_os_once (1 samples, 0.02%)</title><rect x="0.4333%" y="533" width="0.0181%" height="15" fill="rgb(236,202,9)" fg:x="24" fg:w="1"/><text x="0.6833%" y="543.50"></text></g><g><title>_os_once_callout (1 samples, 0.02%)</title><rect x="0.4333%" y="517" width="0.0181%" height="15" fill="rgb(250,229,37)" fg:x="24" fg:w="1"/><text x="0.6833%" y="527.50"></text></g><g><title>__pthread_once_handler (1 samples, 0.02%)</title><rect x="0.4333%" y="501" width="0.0181%" height="15" fill="rgb(206,174,23)" fg:x="24" fg:w="1"/><text x="0.6833%" y="511.50"></text></g><g><title>si_destination_compare_init_once (1 samples, 0.02%)</title><rect x="0.4333%" y="485" width="0.0181%" height="15" fill="rgb(211,33,43)" fg:x="24" fg:w="1"/><text x="0.6833%" y="495.50"></text></g><g><title>os_log_create (1 samples, 0.02%)</title><rect x="0.4333%" y="469" width="0.0181%" height="15" fill="rgb(245,58,50)" fg:x="24" fg:w="1"/><text x="0.6833%" y="479.50"></text></g><g><title>_os_log_preferences_refresh (1 samples, 0.02%)</title><rect x="0.4333%" y="453" width="0.0181%" height="15" fill="rgb(244,68,36)" fg:x="24" fg:w="1"/><text x="0.6833%" y="463.50"></text></g><g><title>_os_log_preference_load_cache (1 samples, 0.02%)</title><rect x="0.4333%" y="437" width="0.0181%" height="15" fill="rgb(232,229,15)" fg:x="24" fg:w="1"/><text x="0.6833%" y="447.50"></text></g><g><title>_os_trace_read_plist_at (1 samples, 0.02%)</title><rect x="0.4333%" y="421" width="0.0181%" height="15" fill="rgb(254,30,23)" fg:x="24" fg:w="1"/><text x="0.6833%" y="431.50"></text></g><g><title>_os_trace_read_file_at (1 samples, 0.02%)</title><rect x="0.4333%" y="405" width="0.0181%" height="15" fill="rgb(235,160,14)" fg:x="24" fg:w="1"/><text x="0.6833%" y="415.50"></text></g><g><title>__openat (1 samples, 0.02%)</title><rect x="0.4333%" y="389" width="0.0181%" height="15" fill="rgb(212,155,44)" fg:x="24" fg:w="1"/><text x="0.6833%" y="399.50"></text></g><g><title>nw_path_create_evaluator_for_endpoint (1 samples, 0.02%)</title><rect x="0.4513%" y="581" width="0.0181%" height="15" fill="rgb(226,2,50)" fg:x="25" fg:w="1"/><text x="0.7013%" y="591.50"></text></g><g><title>necp_client_action (1 samples, 0.02%)</title><rect x="0.4513%" y="565" width="0.0181%" height="15" fill="rgb(234,177,6)" fg:x="25" fg:w="1"/><text x="0.7013%" y="575.50"></text></g><g><title>nw_path_libinfo_path_check (2 samples, 0.04%)</title><rect x="0.4513%" y="597" width="0.0361%" height="15" fill="rgb(217,24,9)" fg:x="25" fg:w="2"/><text x="0.7013%" y="607.50"></text></g><g><title>objc_alloc (1 samples, 0.02%)</title><rect x="0.4694%" y="581" width="0.0181%" height="15" fill="rgb(220,13,46)" fg:x="26" fg:w="1"/><text x="0.7194%" y="591.50"></text></g><g><title>&lt;str as std::net::socket_addr::ToSocketAddrs&gt;::to_socket_addrs (4 samples, 0.07%)</title><rect x="0.4333%" y="677" width="0.0722%" height="15" fill="rgb(239,221,27)" fg:x="24" fg:w="4"/><text x="0.6833%" y="687.50"></text></g><g><title>&lt;std::sys::net::connection::socket::LookupHost as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (4 samples, 0.07%)</title><rect x="0.4333%" y="661" width="0.0722%" height="15" fill="rgb(222,198,25)" fg:x="24" fg:w="4"/><text x="0.6833%" y="671.50"></text></g><g><title>&lt;std::sys::net::connection::socket::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from::_{{closure}} (4 samples, 0.07%)</title><rect x="0.4333%" y="645" width="0.0722%" height="15" fill="rgb(211,99,13)" fg:x="24" fg:w="4"/><text x="0.6833%" y="655.50"></text></g><g><title>getaddrinfo (4 samples, 0.07%)</title><rect x="0.4333%" y="629" width="0.0722%" height="15" fill="rgb(232,111,31)" fg:x="24" fg:w="4"/><text x="0.6833%" y="639.50"></text></g><g><title>si_addrinfo (4 samples, 0.07%)</title><rect x="0.4333%" y="613" width="0.0722%" height="15" fill="rgb(245,82,37)" fg:x="24" fg:w="4"/><text x="0.6833%" y="623.50"></text></g><g><title>search_addrinfo (1 samples, 0.02%)</title><rect x="0.4875%" y="597" width="0.0181%" height="15" fill="rgb(227,149,46)" fg:x="27" fg:w="1"/><text x="0.7375%" y="607.50"></text></g><g><title>mdns_addrinfo (1 samples, 0.02%)</title><rect x="0.4875%" y="581" width="0.0181%" height="15" fill="rgb(218,36,50)" fg:x="27" fg:w="1"/><text x="0.7375%" y="591.50"></text></g><g><title>_mdns_search_ex (1 samples, 0.02%)</title><rect x="0.4875%" y="565" width="0.0181%" height="15" fill="rgb(226,80,48)" fg:x="27" fg:w="1"/><text x="0.7375%" y="575.50"></text></g><g><title>DNSServiceProcessResult (1 samples, 0.02%)</title><rect x="0.4875%" y="549" width="0.0181%" height="15" fill="rgb(238,224,15)" fg:x="27" fg:w="1"/><text x="0.7375%" y="559.50"></text></g><g><title>__recvfrom_nocancel (1 samples, 0.02%)</title><rect x="0.4875%" y="533" width="0.0181%" height="15" fill="rgb(241,136,10)" fg:x="27" fg:w="1"/><text x="0.7375%" y="543.50"></text></g><g><title>clock_gettime_nsec_np (7 samples, 0.13%)</title><rect x="0.8666%" y="581" width="0.1264%" height="15" fill="rgb(208,32,45)" fg:x="48" fg:w="7"/><text x="1.1166%" y="591.50"></text></g><g><title>mach_absolute_time (6 samples, 0.11%)</title><rect x="0.8846%" y="565" width="0.1083%" height="15" fill="rgb(207,135,9)" fg:x="49" fg:w="6"/><text x="1.1346%" y="575.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (15 samples, 0.27%)</title><rect x="0.8485%" y="613" width="0.2708%" height="15" fill="rgb(206,86,44)" fg:x="47" fg:w="15"/><text x="1.0985%" y="623.50"></text></g><g><title>clock_gettime (15 samples, 0.27%)</title><rect x="0.8485%" y="597" width="0.2708%" height="15" fill="rgb(245,177,15)" fg:x="47" fg:w="15"/><text x="1.0985%" y="607.50"></text></g><g><title>mach_absolute_time (7 samples, 0.13%)</title><rect x="0.9930%" y="581" width="0.1264%" height="15" fill="rgb(206,64,50)" fg:x="55" fg:w="7"/><text x="1.2430%" y="591.50"></text></g><g><title>clock_gettime_nsec_np (19 samples, 0.34%)</title><rect x="1.1193%" y="565" width="0.3430%" height="15" fill="rgb(234,36,40)" fg:x="62" fg:w="19"/><text x="1.3693%" y="575.50"></text></g><g><title>mach_absolute_time (18 samples, 0.32%)</title><rect x="1.1374%" y="549" width="0.3250%" height="15" fill="rgb(213,64,8)" fg:x="63" fg:w="18"/><text x="1.3874%" y="559.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (26 samples, 0.47%)</title><rect x="1.1193%" y="597" width="0.4694%" height="15" fill="rgb(210,75,36)" fg:x="62" fg:w="26"/><text x="1.3693%" y="607.50"></text></g><g><title>clock_gettime (26 samples, 0.47%)</title><rect x="1.1193%" y="581" width="0.4694%" height="15" fill="rgb(229,88,21)" fg:x="62" fg:w="26"/><text x="1.3693%" y="591.50"></text></g><g><title>mach_absolute_time (7 samples, 0.13%)</title><rect x="1.4624%" y="565" width="0.1264%" height="15" fill="rgb(252,204,47)" fg:x="81" fg:w="7"/><text x="1.7124%" y="575.50"></text></g><g><title>std::time::Instant::elapsed (27 samples, 0.49%)</title><rect x="1.1193%" y="613" width="0.4875%" height="15" fill="rgb(208,77,27)" fg:x="62" fg:w="27"/><text x="1.3693%" y="623.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (1 samples, 0.02%)</title><rect x="1.5887%" y="597" width="0.0181%" height="15" fill="rgb(221,76,26)" fg:x="88" fg:w="1"/><text x="1.8387%" y="607.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_parked (1 samples, 0.02%)</title><rect x="1.6068%" y="613" width="0.0181%" height="15" fill="rgb(225,139,18)" fg:x="89" fg:w="1"/><text x="1.8568%" y="623.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (6 samples, 0.11%)</title><rect x="1.6248%" y="613" width="0.1083%" height="15" fill="rgb(230,137,11)" fg:x="90" fg:w="6"/><text x="1.8748%" y="623.50"></text></g><g><title>clock_gettime (1 samples, 0.02%)</title><rect x="1.8054%" y="565" width="0.0181%" height="15" fill="rgb(212,28,1)" fg:x="100" fg:w="1"/><text x="2.0554%" y="575.50"></text></g><g><title>mach_absolute_time (3 samples, 0.05%)</title><rect x="1.8595%" y="517" width="0.0542%" height="15" fill="rgb(248,164,17)" fg:x="103" fg:w="3"/><text x="2.1095%" y="527.50"></text></g><g><title>clock_gettime_nsec_np (6 samples, 0.11%)</title><rect x="1.8234%" y="533" width="0.1083%" height="15" fill="rgb(222,171,42)" fg:x="101" fg:w="6"/><text x="2.0734%" y="543.50"></text></g><g><title>mach_timebase_info (1 samples, 0.02%)</title><rect x="1.9137%" y="517" width="0.0181%" height="15" fill="rgb(243,84,45)" fg:x="106" fg:w="1"/><text x="2.1637%" y="527.50"></text></g><g><title>clock_gettime (7 samples, 0.13%)</title><rect x="1.8234%" y="549" width="0.1264%" height="15" fill="rgb(252,49,23)" fg:x="101" fg:w="7"/><text x="2.0734%" y="559.50"></text></g><g><title>mach_absolute_time (1 samples, 0.02%)</title><rect x="1.9318%" y="533" width="0.0181%" height="15" fill="rgb(215,19,7)" fg:x="107" fg:w="1"/><text x="2.1818%" y="543.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (9 samples, 0.16%)</title><rect x="1.8234%" y="565" width="0.1625%" height="15" fill="rgb(238,81,41)" fg:x="101" fg:w="9"/><text x="2.0734%" y="575.50"></text></g><g><title>clock_gettime_nsec_np (2 samples, 0.04%)</title><rect x="1.9498%" y="549" width="0.0361%" height="15" fill="rgb(210,199,37)" fg:x="108" fg:w="2"/><text x="2.1998%" y="559.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.02%)</title><rect x="1.9859%" y="565" width="0.0181%" height="15" fill="rgb(244,192,49)" fg:x="110" fg:w="1"/><text x="2.2359%" y="575.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (1 samples, 0.02%)</title><rect x="2.0040%" y="565" width="0.0181%" height="15" fill="rgb(226,211,11)" fg:x="111" fg:w="1"/><text x="2.2540%" y="575.50"></text></g><g><title>kevent (26 samples, 0.47%)</title><rect x="2.2928%" y="549" width="0.4694%" height="15" fill="rgb(236,162,54)" fg:x="127" fg:w="26"/><text x="2.5428%" y="559.50"></text></g><g><title>mio::poll::Poll::poll (42 samples, 0.76%)</title><rect x="2.7622%" y="549" width="0.7583%" height="15" fill="rgb(220,229,9)" fg:x="153" fg:w="42"/><text x="3.0122%" y="559.50"></text></g><g><title>kevent (38 samples, 0.69%)</title><rect x="2.8344%" y="533" width="0.6860%" height="15" fill="rgb(250,87,22)" fg:x="157" fg:w="38"/><text x="3.0844%" y="543.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (96 samples, 1.73%)</title><rect x="1.8054%" y="581" width="1.7332%" height="15" fill="rgb(239,43,17)" fg:x="100" fg:w="96"/><text x="2.0554%" y="591.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (84 samples, 1.52%)</title><rect x="2.0220%" y="565" width="1.5165%" height="15" fill="rgb(231,177,25)" fg:x="112" fg:w="84"/><text x="2.2720%" y="575.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (1 samples, 0.02%)</title><rect x="3.5205%" y="549" width="0.0181%" height="15" fill="rgb(219,179,1)" fg:x="195" fg:w="1"/><text x="3.7705%" y="559.50"></text></g><g><title>tokio::runtime::park::wake (1 samples, 0.02%)</title><rect x="3.5205%" y="533" width="0.0181%" height="15" fill="rgb(238,219,53)" fg:x="195" fg:w="1"/><text x="3.7705%" y="543.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.02%)</title><rect x="3.5205%" y="517" width="0.0181%" height="15" fill="rgb(232,167,36)" fg:x="195" fg:w="1"/><text x="3.7705%" y="527.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.02%)</title><rect x="3.5205%" y="501" width="0.0181%" height="15" fill="rgb(244,19,51)" fg:x="195" fg:w="1"/><text x="3.7705%" y="511.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (98 samples, 1.77%)</title><rect x="1.7873%" y="597" width="1.7693%" height="15" fill="rgb(224,6,22)" fg:x="99" fg:w="98"/><text x="2.0373%" y="607.50"></text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (1 samples, 0.02%)</title><rect x="3.5385%" y="581" width="0.0181%" height="15" fill="rgb(224,145,5)" fg:x="196" fg:w="1"/><text x="3.7885%" y="591.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (1 samples, 0.02%)</title><rect x="3.5385%" y="565" width="0.0181%" height="15" fill="rgb(234,130,49)" fg:x="196" fg:w="1"/><text x="3.7885%" y="575.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (3 samples, 0.05%)</title><rect x="3.5566%" y="597" width="0.0542%" height="15" fill="rgb(254,6,2)" fg:x="197" fg:w="3"/><text x="3.8066%" y="607.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (105 samples, 1.90%)</title><rect x="1.7332%" y="613" width="1.8956%" height="15" fill="rgb(208,96,46)" fg:x="96" fg:w="105"/><text x="1.9832%" y="623.50">t..</text></g><g><title>tokio::runtime::time::Driver::park_internal (1 samples, 0.02%)</title><rect x="3.6108%" y="597" width="0.0181%" height="15" fill="rgb(239,3,39)" fg:x="200" fg:w="1"/><text x="3.8608%" y="607.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (1 samples, 0.02%)</title><rect x="3.6108%" y="581" width="0.0181%" height="15" fill="rgb(233,210,1)" fg:x="200" fg:w="1"/><text x="3.8608%" y="591.50"></text></g><g><title>mio::poll::Poll::poll (1 samples, 0.02%)</title><rect x="3.6108%" y="565" width="0.0181%" height="15" fill="rgb(244,137,37)" fg:x="200" fg:w="1"/><text x="3.8608%" y="575.50"></text></g><g><title>kevent (1 samples, 0.02%)</title><rect x="3.6108%" y="549" width="0.0181%" height="15" fill="rgb(240,136,2)" fg:x="200" fg:w="1"/><text x="3.8608%" y="559.50"></text></g><g><title>kevent (43 samples, 0.78%)</title><rect x="3.6469%" y="581" width="0.7763%" height="15" fill="rgb(239,18,37)" fg:x="202" fg:w="43"/><text x="3.8969%" y="591.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (118 samples, 2.13%)</title><rect x="3.6469%" y="597" width="2.1303%" height="15" fill="rgb(218,185,22)" fg:x="202" fg:w="118"/><text x="3.8969%" y="607.50">t..</text></g><g><title>mio::waker::Waker::wake (75 samples, 1.35%)</title><rect x="4.4232%" y="581" width="1.3540%" height="15" fill="rgb(225,218,4)" fg:x="245" fg:w="75"/><text x="4.6732%" y="591.50"></text></g><g><title>kevent (75 samples, 1.35%)</title><rect x="4.4232%" y="565" width="1.3540%" height="15" fill="rgb(230,182,32)" fg:x="245" fg:w="75"/><text x="4.6732%" y="575.50"></text></g><g><title>&lt;core::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="5.7772%" y="565" width="0.0181%" height="15" fill="rgb(242,56,43)" fg:x="320" fg:w="1"/><text x="6.0272%" y="575.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="5.7953%" y="565" width="0.0181%" height="15" fill="rgb(233,99,24)" fg:x="321" fg:w="1"/><text x="6.0453%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;quant_exchange::okex::OkexClient::process_message::{{closure}}&gt; (2 samples, 0.04%)</title><rect x="5.8133%" y="565" width="0.0361%" height="15" fill="rgb(234,209,42)" fg:x="322" fg:w="2"/><text x="6.0633%" y="575.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (2 samples, 0.04%)</title><rect x="7.0951%" y="533" width="0.0361%" height="15" fill="rgb(227,7,12)" fg:x="393" fg:w="2"/><text x="7.3451%" y="543.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (2 samples, 0.04%)</title><rect x="7.1313%" y="533" width="0.0361%" height="15" fill="rgb(245,203,43)" fg:x="395" fg:w="2"/><text x="7.3813%" y="543.50"></text></g><g><title>_tlv_get_addr (7 samples, 0.13%)</title><rect x="7.1674%" y="533" width="0.1264%" height="15" fill="rgb(238,205,33)" fg:x="397" fg:w="7"/><text x="7.4174%" y="543.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (1 samples, 0.02%)</title><rect x="7.2937%" y="533" width="0.0181%" height="15" fill="rgb(231,56,7)" fg:x="404" fg:w="1"/><text x="7.5437%" y="543.50"></text></g><g><title>_tlv_get_addr (8 samples, 0.14%)</title><rect x="8.5575%" y="501" width="0.1444%" height="15" fill="rgb(244,186,29)" fg:x="474" fg:w="8"/><text x="8.8075%" y="511.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (40 samples, 0.72%)</title><rect x="7.9978%" y="517" width="0.7222%" height="15" fill="rgb(234,111,31)" fg:x="443" fg:w="40"/><text x="8.2478%" y="527.50"></text></g><g><title>tokio::runtime::context::defer (1 samples, 0.02%)</title><rect x="8.7019%" y="501" width="0.0181%" height="15" fill="rgb(241,149,10)" fg:x="482" fg:w="1"/><text x="8.9519%" y="511.50"></text></g><g><title>_tlv_get_addr (1 samples, 0.02%)</title><rect x="8.7019%" y="485" width="0.0181%" height="15" fill="rgb(249,206,44)" fg:x="482" fg:w="1"/><text x="8.9519%" y="495.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="8.7200%" y="517" width="0.0181%" height="15" fill="rgb(251,153,30)" fg:x="483" fg:w="1"/><text x="8.9700%" y="527.50"></text></g><g><title>&lt;tokio_tungstenite::WebSocketStream&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (3 samples, 0.05%)</title><rect x="8.7380%" y="517" width="0.0542%" height="15" fill="rgb(239,152,38)" fg:x="484" fg:w="3"/><text x="8.9880%" y="527.50"></text></g><g><title>_tlv_get_addr (8 samples, 0.14%)</title><rect x="8.7922%" y="517" width="0.1444%" height="15" fill="rgb(249,139,47)" fg:x="487" fg:w="8"/><text x="9.0422%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;quant_exchange::okex::OkexClient::receive_ws_response::{{closure}}&gt; (2 samples, 0.04%)</title><rect x="8.9366%" y="517" width="0.0361%" height="15" fill="rgb(244,64,35)" fg:x="495" fg:w="2"/><text x="9.1866%" y="527.50"></text></g><g><title>futures_util::lock::bilock::BiLock&lt;T&gt;::poll_lock (3 samples, 0.05%)</title><rect x="8.9727%" y="517" width="0.0542%" height="15" fill="rgb(216,46,15)" fg:x="497" fg:w="3"/><text x="9.2227%" y="527.50"></text></g><g><title>&lt;core::result::Result&lt;T,tungstenite::error::Error&gt; as tungstenite::protocol::CheckConnectionReset&gt;::check_connection_reset (1 samples, 0.02%)</title><rect x="9.1894%" y="485" width="0.0181%" height="15" fill="rgb(250,74,19)" fg:x="509" fg:w="1"/><text x="9.4394%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;tungstenite::error::Error&gt; (1 samples, 0.02%)</title><rect x="9.2074%" y="485" width="0.0181%" height="15" fill="rgb(249,42,33)" fg:x="510" fg:w="1"/><text x="9.4574%" y="495.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (10 samples, 0.18%)</title><rect x="9.2255%" y="485" width="0.1805%" height="15" fill="rgb(242,149,17)" fg:x="511" fg:w="10"/><text x="9.4755%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;tungstenite::error::Error&gt; (3 samples, 0.05%)</title><rect x="9.4602%" y="469" width="0.0542%" height="15" fill="rgb(244,29,21)" fg:x="524" fg:w="3"/><text x="9.7102%" y="479.50"></text></g><g><title>tokio_tungstenite::compat::cvt (7 samples, 0.13%)</title><rect x="9.4060%" y="485" width="0.1264%" height="15" fill="rgb(220,130,37)" fg:x="521" fg:w="7"/><text x="9.6560%" y="495.50"></text></g><g><title>std::io::error::Error::kind (1 samples, 0.02%)</title><rect x="9.5144%" y="469" width="0.0181%" height="15" fill="rgb(211,67,2)" fg:x="527" fg:w="1"/><text x="9.7644%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,tungstenite::error::Error&gt; as tungstenite::protocol::CheckConnectionReset&gt;::check_connection_reset (2 samples, 0.04%)</title><rect x="9.6227%" y="469" width="0.0361%" height="15" fill="rgb(235,68,52)" fg:x="533" fg:w="2"/><text x="9.8727%" y="479.50"></text></g><g><title>&lt;tokio_tungstenite::compat::AllowStd&lt;S&gt; as std::io::Read&gt;::read (4 samples, 0.07%)</title><rect x="9.6588%" y="469" width="0.0722%" height="15" fill="rgb(246,142,3)" fg:x="535" fg:w="4"/><text x="9.9088%" y="479.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (1 samples, 0.02%)</title><rect x="9.7310%" y="469" width="0.0181%" height="15" fill="rgb(241,25,7)" fg:x="539" fg:w="1"/><text x="9.9810%" y="479.50"></text></g><g><title>bytes::bytes_mut::BytesMut::resize (4 samples, 0.07%)</title><rect x="9.7491%" y="469" width="0.0722%" height="15" fill="rgb(242,119,39)" fg:x="540" fg:w="4"/><text x="9.9991%" y="479.50"></text></g><g><title>DYLD-STUB$$SSLGetBufferedReadSize (3 samples, 0.05%)</title><rect x="13.5765%" y="405" width="0.0542%" height="15" fill="rgb(241,98,45)" fg:x="752" fg:w="3"/><text x="13.8265%" y="415.50"></text></g><g><title>DYLD-STUB$$SSLRead (12 samples, 0.22%)</title><rect x="13.6306%" y="405" width="0.2166%" height="15" fill="rgb(254,28,30)" fg:x="755" fg:w="12"/><text x="13.8806%" y="415.50"></text></g><g><title>SSLGetBufferedReadSize (6 samples, 0.11%)</title><rect x="13.8473%" y="405" width="0.1083%" height="15" fill="rgb(241,142,54)" fg:x="767" fg:w="6"/><text x="14.0973%" y="415.50"></text></g><g><title>DYLD-STUB$$tls_handshake_continue (2 samples, 0.04%)</title><rect x="14.3528%" y="389" width="0.0361%" height="15" fill="rgb(222,85,15)" fg:x="795" fg:w="2"/><text x="14.6028%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;std::io::error::Error&gt;&gt; (4 samples, 0.07%)</title><rect x="14.4972%" y="373" width="0.0722%" height="15" fill="rgb(210,85,47)" fg:x="803" fg:w="4"/><text x="14.7472%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;std::io::error::Error&gt;&gt; (4 samples, 0.07%)</title><rect x="14.7861%" y="357" width="0.0722%" height="15" fill="rgb(224,206,25)" fg:x="819" fg:w="4"/><text x="15.0361%" y="367.50"></text></g><g><title>security_framework::secure_transport::translate_err (6 samples, 0.11%)</title><rect x="14.8583%" y="357" width="0.1083%" height="15" fill="rgb(243,201,19)" fg:x="823" fg:w="6"/><text x="15.1083%" y="367.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (1 samples, 0.02%)</title><rect x="15.0208%" y="341" width="0.0181%" height="15" fill="rgb(236,59,4)" fg:x="832" fg:w="1"/><text x="15.2708%" y="351.50"></text></g><g><title>__recvfrom (1 samples, 0.02%)</title><rect x="15.0208%" y="325" width="0.0181%" height="15" fill="rgb(254,179,45)" fg:x="832" fg:w="1"/><text x="15.2708%" y="335.50"></text></g><g><title>_tlv_get_addr (6 samples, 0.11%)</title><rect x="15.0388%" y="341" width="0.1083%" height="15" fill="rgb(226,14,10)" fg:x="833" fg:w="6"/><text x="15.2888%" y="351.50"></text></g><g><title>_tlv_get_addr (16 samples, 0.29%)</title><rect x="15.3457%" y="325" width="0.2889%" height="15" fill="rgb(244,27,41)" fg:x="850" fg:w="16"/><text x="15.5957%" y="335.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (46 samples, 0.83%)</title><rect x="15.1471%" y="341" width="0.8305%" height="15" fill="rgb(235,35,32)" fg:x="839" fg:w="46"/><text x="15.3971%" y="351.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (19 samples, 0.34%)</title><rect x="15.6346%" y="325" width="0.3430%" height="15" fill="rgb(218,68,31)" fg:x="866" fg:w="19"/><text x="15.8846%" y="335.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (57 samples, 1.03%)</title><rect x="14.9666%" y="357" width="1.0291%" height="15" fill="rgb(207,120,37)" fg:x="829" fg:w="57"/><text x="15.2166%" y="367.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (1 samples, 0.02%)</title><rect x="15.9776%" y="341" width="0.0181%" height="15" fill="rgb(227,98,0)" fg:x="885" fg:w="1"/><text x="16.2276%" y="351.50"></text></g><g><title>security_framework::secure_transport::read_func (84 samples, 1.52%)</title><rect x="14.5694%" y="373" width="1.5165%" height="15" fill="rgb(207,7,3)" fg:x="807" fg:w="84"/><text x="14.8194%" y="383.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (5 samples, 0.09%)</title><rect x="15.9957%" y="357" width="0.0903%" height="15" fill="rgb(206,98,19)" fg:x="886" fg:w="5"/><text x="16.2457%" y="367.50"></text></g><g><title>tls_record_get_header_size (2 samples, 0.04%)</title><rect x="16.0859%" y="373" width="0.0361%" height="15" fill="rgb(217,5,26)" fg:x="891" fg:w="2"/><text x="16.3359%" y="383.50"></text></g><g><title>SSLRecordReadInternal (97 samples, 1.75%)</title><rect x="14.3889%" y="389" width="1.7512%" height="15" fill="rgb(235,190,38)" fg:x="797" fg:w="97"/><text x="14.6389%" y="399.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (1 samples, 0.02%)</title><rect x="16.1220%" y="373" width="0.0181%" height="15" fill="rgb(247,86,24)" fg:x="893" fg:w="1"/><text x="16.3720%" y="383.50"></text></g><g><title>SSLRecordServiceWriteQueueInternal (1 samples, 0.02%)</title><rect x="16.1401%" y="389" width="0.0181%" height="15" fill="rgb(205,101,16)" fg:x="894" fg:w="1"/><text x="16.3901%" y="399.50"></text></g><g><title>tls_handshake_continue (3 samples, 0.05%)</title><rect x="16.1582%" y="389" width="0.0542%" height="15" fill="rgb(246,168,33)" fg:x="895" fg:w="3"/><text x="16.4082%" y="399.50"></text></g><g><title>SSLRead (129 samples, 2.33%)</title><rect x="13.9556%" y="405" width="2.3289%" height="15" fill="rgb(231,114,1)" fg:x="773" fg:w="129"/><text x="14.2056%" y="415.50">S..</text></g><g><title>tls_record_get_header_size (4 samples, 0.07%)</title><rect x="16.2123%" y="389" width="0.0722%" height="15" fill="rgb(207,184,53)" fg:x="898" fg:w="4"/><text x="16.4623%" y="399.50"></text></g><g><title>DYLD-STUB$$SSLGetConnection (2 samples, 0.04%)</title><rect x="16.3026%" y="389" width="0.0361%" height="15" fill="rgb(224,95,51)" fg:x="903" fg:w="2"/><text x="16.5526%" y="399.50"></text></g><g><title>SSLGetConnection (1 samples, 0.02%)</title><rect x="16.3387%" y="389" width="0.0181%" height="15" fill="rgb(212,188,45)" fg:x="905" fg:w="1"/><text x="16.5887%" y="399.50"></text></g><g><title>DYLD-STUB$$SSLGetConnection (2 samples, 0.04%)</title><rect x="19.3898%" y="373" width="0.0361%" height="15" fill="rgb(223,154,38)" fg:x="1074" fg:w="2"/><text x="19.6398%" y="383.50"></text></g><g><title>security_framework::secure_transport::SslStream&lt;S&gt;::get_error (176 samples, 3.18%)</title><rect x="16.2845%" y="405" width="3.1775%" height="15" fill="rgb(251,22,52)" fg:x="902" fg:w="176"/><text x="16.5345%" y="415.50">sec..</text></g><g><title>security_framework::secure_transport::SslStream&lt;S&gt;::check_panic (172 samples, 3.11%)</title><rect x="16.3567%" y="389" width="3.1053%" height="15" fill="rgb(229,209,22)" fg:x="906" fg:w="172"/><text x="16.6067%" y="399.50">sec..</text></g><g><title>SSLGetConnection (2 samples, 0.04%)</title><rect x="19.4259%" y="373" width="0.0361%" height="15" fill="rgb(234,138,34)" fg:x="1076" fg:w="2"/><text x="19.6759%" y="383.50"></text></g><g><title>&lt;security_framework::secure_transport::SslStream&lt;S&gt; as std::io::Read&gt;::read (354 samples, 6.39%)</title><rect x="13.0890%" y="421" width="6.3910%" height="15" fill="rgb(212,95,11)" fg:x="725" fg:w="354"/><text x="13.3390%" y="431.50">&lt;securit..</text></g><g><title>tls_handshake_continue (1 samples, 0.02%)</title><rect x="19.4620%" y="405" width="0.0181%" height="15" fill="rgb(240,179,47)" fg:x="1078" fg:w="1"/><text x="19.7120%" y="415.50"></text></g><g><title>DYLD-STUB$$SSLGetConnection (5 samples, 0.09%)</title><rect x="19.4801%" y="421" width="0.0903%" height="15" fill="rgb(240,163,11)" fg:x="1079" fg:w="5"/><text x="19.7301%" y="431.50"></text></g><g><title>SSLGetConnection (5 samples, 0.09%)</title><rect x="19.5703%" y="421" width="0.0903%" height="15" fill="rgb(236,37,12)" fg:x="1084" fg:w="5"/><text x="19.8203%" y="431.50"></text></g><g><title>&lt;tokio_tungstenite::compat::AllowStd&lt;S&gt; as std::io::Read&gt;::read (535 samples, 9.66%)</title><rect x="10.0379%" y="453" width="9.6588%" height="15" fill="rgb(232,164,16)" fg:x="556" fg:w="535"/><text x="10.2879%" y="463.50">&lt;tokio_tungste..</text></g><g><title>&lt;tokio_tungstenite::stream::MaybeTlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (516 samples, 9.32%)</title><rect x="10.3809%" y="437" width="9.3158%" height="15" fill="rgb(244,205,15)" fg:x="575" fg:w="516"/><text x="10.6309%" y="447.50">&lt;tokio_tungst..</text></g><g><title>std::io::error::Error::kind (2 samples, 0.04%)</title><rect x="19.6606%" y="421" width="0.0361%" height="15" fill="rgb(223,117,47)" fg:x="1089" fg:w="2"/><text x="19.9106%" y="431.50"></text></g><g><title>__bzero (1,670 samples, 30.15%)</title><rect x="19.6967%" y="453" width="30.1498%" height="15" fill="rgb(244,107,35)" fg:x="1091" fg:w="1670"/><text x="19.9467%" y="463.50">__bzero</text></g><g><title>_platform_memmove (1 samples, 0.02%)</title><rect x="49.8465%" y="453" width="0.0181%" height="15" fill="rgb(205,140,8)" fg:x="2761" fg:w="1"/><text x="50.0965%" y="463.50"></text></g><g><title>_platform_memset (1 samples, 0.02%)</title><rect x="49.8646%" y="453" width="0.0181%" height="15" fill="rgb(228,84,46)" fg:x="2762" fg:w="1"/><text x="50.1146%" y="463.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (2 samples, 0.04%)</title><rect x="49.8827%" y="453" width="0.0361%" height="15" fill="rgb(254,188,9)" fg:x="2763" fg:w="2"/><text x="50.1327%" y="463.50"></text></g><g><title>DYLD-STUB$$memset (2 samples, 0.04%)</title><rect x="50.0090%" y="437" width="0.0361%" height="15" fill="rgb(206,112,54)" fg:x="2770" fg:w="2"/><text x="50.2590%" y="447.50"></text></g><g><title>bytes::bytes_mut::BytesMut::resize (2,186 samples, 39.47%)</title><rect x="49.9188%" y="453" width="39.4656%" height="15" fill="rgb(216,84,49)" fg:x="2765" fg:w="2186"/><text x="50.1688%" y="463.50">bytes::bytes_mut::BytesMut::resize</text></g><g><title>__bzero (2,179 samples, 39.34%)</title><rect x="50.0451%" y="437" width="39.3392%" height="15" fill="rgb(214,194,35)" fg:x="2772" fg:w="2179"/><text x="50.2951%" y="447.50">__bzero</text></g><g><title>tungstenite::protocol::frame::FrameCodec::read_frame (4,414 samples, 79.69%)</title><rect x="9.8213%" y="469" width="79.6895%" height="15" fill="rgb(249,28,3)" fg:x="544" fg:w="4414"/><text x="10.0713%" y="479.50">tungstenite::protocol::frame::FrameCodec::read_frame</text></g><g><title>tungstenite::protocol::frame::frame::FrameHeader::parse_internal (7 samples, 0.13%)</title><rect x="89.3844%" y="453" width="0.1264%" height="15" fill="rgb(222,56,52)" fg:x="4951" fg:w="7"/><text x="89.6344%" y="463.50"></text></g><g><title>_platform_memmove (1 samples, 0.02%)</title><rect x="89.4927%" y="437" width="0.0181%" height="15" fill="rgb(245,217,50)" fg:x="4957" fg:w="1"/><text x="89.7427%" y="447.50"></text></g><g><title>tungstenite::protocol::WebSocketContext::read (4,431 samples, 80.00%)</title><rect x="9.5324%" y="485" width="79.9964%" height="15" fill="rgb(213,201,24)" fg:x="528" fg:w="4431"/><text x="9.7824%" y="495.50">tungstenite::protocol::WebSocketContext::read</text></g><g><title>tungstenite::protocol::frame::frame::FrameHeader::parse_internal (1 samples, 0.02%)</title><rect x="89.5107%" y="469" width="0.0181%" height="15" fill="rgb(248,116,28)" fg:x="4958" fg:w="1"/><text x="89.7607%" y="479.50"></text></g><g><title>&lt;tokio_tungstenite::WebSocketStream&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (4,457 samples, 80.47%)</title><rect x="9.1172%" y="501" width="80.4658%" height="15" fill="rgb(219,72,43)" fg:x="505" fg:w="4457"/><text x="9.3672%" y="511.50">&lt;tokio_tungstenite::WebSocketStream&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next</text></g><g><title>tungstenite::protocol::frame::FrameCodec::read_frame (3 samples, 0.05%)</title><rect x="89.5288%" y="485" width="0.0542%" height="15" fill="rgb(209,138,14)" fg:x="4959" fg:w="3"/><text x="89.7788%" y="495.50"></text></g><g><title>futures_util::lock::bilock::BiLock&lt;T&gt;::poll_lock (10 samples, 0.18%)</title><rect x="89.5830%" y="501" width="0.1805%" height="15" fill="rgb(222,18,33)" fg:x="4962" fg:w="10"/><text x="89.8330%" y="511.50"></text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (4,477 samples, 80.83%)</title><rect x="9.0269%" y="517" width="80.8269%" height="15" fill="rgb(213,199,7)" fg:x="500" fg:w="4477"/><text x="9.2769%" y="527.50">futures_util::stream::stream::StreamExt::poll_next_unpin</text></g><g><title>tungstenite::protocol::WebSocketContext::read (5 samples, 0.09%)</title><rect x="89.7635%" y="501" width="0.0903%" height="15" fill="rgb(250,110,10)" fg:x="4972" fg:w="5"/><text x="90.0135%" y="511.50"></text></g><g><title>tokio::runtime::scheduler::defer::Defer::defer (1 samples, 0.02%)</title><rect x="89.8538%" y="517" width="0.0181%" height="15" fill="rgb(248,123,6)" fg:x="4977" fg:w="1"/><text x="90.1038%" y="527.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (7 samples, 0.13%)</title><rect x="89.8718%" y="517" width="0.1264%" height="15" fill="rgb(206,91,31)" fg:x="4978" fg:w="7"/><text x="90.1218%" y="527.50"></text></g><g><title>quant_exchange::okex::OkexClient::process_message::_{{closure}} (4,583 samples, 82.74%)</title><rect x="7.3118%" y="533" width="82.7406%" height="15" fill="rgb(211,154,13)" fg:x="405" fg:w="4583"/><text x="7.5618%" y="543.50">quant_exchange::okex::OkexClient::process_message::_{{closure}}</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (3 samples, 0.05%)</title><rect x="89.9982%" y="517" width="0.0542%" height="15" fill="rgb(225,148,7)" fg:x="4985" fg:w="3"/><text x="90.2482%" y="527.50"></text></g><g><title>tokio::macros::support::thread_rng_n (19 samples, 0.34%)</title><rect x="90.0524%" y="533" width="0.3430%" height="15" fill="rgb(220,160,43)" fg:x="4988" fg:w="19"/><text x="90.3024%" y="543.50"></text></g><g><title>_tlv_get_addr (9 samples, 0.16%)</title><rect x="90.2329%" y="517" width="0.1625%" height="15" fill="rgb(213,52,39)" fg:x="4998" fg:w="9"/><text x="90.4829%" y="527.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (1 samples, 0.02%)</title><rect x="90.3954%" y="533" width="0.0181%" height="15" fill="rgb(243,137,7)" fg:x="5007" fg:w="1"/><text x="90.6454%" y="543.50"></text></g><g><title>tokio::task::coop::Budget::has_remaining (1 samples, 0.02%)</title><rect x="90.4134%" y="533" width="0.0181%" height="15" fill="rgb(230,79,13)" fg:x="5008" fg:w="1"/><text x="90.6634%" y="543.50"></text></g><g><title>_tlv_get_addr (5 samples, 0.09%)</title><rect x="90.6662%" y="501" width="0.0903%" height="15" fill="rgb(247,105,23)" fg:x="5022" fg:w="5"/><text x="90.9162%" y="511.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (4 samples, 0.07%)</title><rect x="90.8648%" y="469" width="0.0722%" height="15" fill="rgb(223,179,41)" fg:x="5033" fg:w="4"/><text x="91.1148%" y="479.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::poll_elapsed (11 samples, 0.20%)</title><rect x="90.7565%" y="501" width="0.1986%" height="15" fill="rgb(218,9,34)" fg:x="5027" fg:w="11"/><text x="91.0065%" y="511.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (8 samples, 0.14%)</title><rect x="90.8106%" y="485" width="0.1444%" height="15" fill="rgb(222,106,8)" fg:x="5030" fg:w="8"/><text x="91.0606%" y="495.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (1 samples, 0.02%)</title><rect x="90.9370%" y="469" width="0.0181%" height="15" fill="rgb(211,220,0)" fg:x="5037" fg:w="1"/><text x="91.1870%" y="479.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (27 samples, 0.49%)</title><rect x="90.4856%" y="517" width="0.4875%" height="15" fill="rgb(229,52,16)" fg:x="5012" fg:w="27"/><text x="90.7356%" y="527.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (1 samples, 0.02%)</title><rect x="90.9550%" y="501" width="0.0181%" height="15" fill="rgb(212,155,18)" fg:x="5038" fg:w="1"/><text x="91.2050%" y="511.50"></text></g><g><title>_tlv_get_addr (4 samples, 0.07%)</title><rect x="90.9731%" y="517" width="0.0722%" height="15" fill="rgb(242,21,14)" fg:x="5039" fg:w="4"/><text x="91.2231%" y="527.50"></text></g><g><title>&lt;core::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (4,701 samples, 84.87%)</title><rect x="6.2286%" y="549" width="84.8709%" height="15" fill="rgb(222,19,48)" fg:x="345" fg:w="4701"/><text x="6.4786%" y="559.50">&lt;core::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::time::interval::Interval::poll_tick (37 samples, 0.67%)</title><rect x="90.4315%" y="533" width="0.6680%" height="15" fill="rgb(232,45,27)" fg:x="5009" fg:w="37"/><text x="90.6815%" y="543.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::poll_elapsed (3 samples, 0.05%)</title><rect x="91.0453%" y="517" width="0.0542%" height="15" fill="rgb(249,103,42)" fg:x="5043" fg:w="3"/><text x="91.2953%" y="527.50"></text></g><g><title>_tlv_get_addr (1 samples, 0.02%)</title><rect x="91.0995%" y="549" width="0.0181%" height="15" fill="rgb(246,81,33)" fg:x="5046" fg:w="1"/><text x="91.3495%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;quant_exchange::error::Error&gt; (5 samples, 0.09%)</title><rect x="91.1175%" y="549" width="0.0903%" height="15" fill="rgb(252,33,42)" fg:x="5047" fg:w="5"/><text x="91.3675%" y="559.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (17 samples, 0.31%)</title><rect x="91.3883%" y="533" width="0.3069%" height="15" fill="rgb(209,212,41)" fg:x="5062" fg:w="17"/><text x="91.6383%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;quant_exchange::okex::OkexClient::process_message::{{closure}}&gt; (30 samples, 0.54%)</title><rect x="91.2078%" y="549" width="0.5416%" height="15" fill="rgb(207,154,6)" fg:x="5052" fg:w="30"/><text x="91.4578%" y="559.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (3 samples, 0.05%)</title><rect x="91.6953%" y="533" width="0.0542%" height="15" fill="rgb(223,64,47)" fg:x="5079" fg:w="3"/><text x="91.9453%" y="543.50"></text></g><g><title>quant_exchange::okex::OkexClient::process_message::_{{closure}} (449 samples, 8.11%)</title><rect x="91.7494%" y="549" width="8.1062%" height="15" fill="rgb(211,161,38)" fg:x="5082" fg:w="449"/><text x="91.9994%" y="559.50">quant_excha..</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (1 samples, 0.02%)</title><rect x="99.8556%" y="549" width="0.0181%" height="15" fill="rgb(219,138,40)" fg:x="5531" fg:w="1"/><text x="100.1056%" y="559.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (5,335 samples, 96.32%)</title><rect x="3.6288%" y="613" width="96.3170%" height="15" fill="rgb(241,228,46)" fg:x="201" fg:w="5335"/><text x="3.8788%" y="623.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (5,216 samples, 94.17%)</title><rect x="5.7772%" y="597" width="94.1686%" height="15" fill="rgb(223,209,38)" fg:x="320" fg:w="5216"/><text x="6.0272%" y="607.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (5,216 samples, 94.17%)</title><rect x="5.7772%" y="581" width="94.1686%" height="15" fill="rgb(236,164,45)" fg:x="320" fg:w="5216"/><text x="6.0272%" y="591.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>okex::main::_{{closure}}::_{{closure}} (5,212 samples, 94.10%)</title><rect x="5.8494%" y="565" width="94.0964%" height="15" fill="rgb(231,15,5)" fg:x="324" fg:w="5212"/><text x="6.0994%" y="575.50">okex::main::_{{closure}}::_{{closure}}</text></g><g><title>tokio::time::interval::Interval::poll_tick (4 samples, 0.07%)</title><rect x="99.8736%" y="549" width="0.0722%" height="15" fill="rgb(252,35,15)" fg:x="5532" fg:w="4"/><text x="100.1236%" y="559.50"></text></g><g><title>all (5,539 samples, 100%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(248,181,18)" fg:x="0" fg:w="5539"/><text x="0.2500%" y="847.50"></text></g><g><title>thread_start (5,515 samples, 99.57%)</title><rect x="0.4333%" y="821" width="99.5667%" height="15" fill="rgb(233,39,42)" fg:x="24" fg:w="5515"/><text x="0.6833%" y="831.50">thread_start</text></g><g><title>_pthread_start (5,515 samples, 99.57%)</title><rect x="0.4333%" y="805" width="99.5667%" height="15" fill="rgb(238,110,33)" fg:x="24" fg:w="5515"/><text x="0.6833%" y="815.50">_pthread_start</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (5,515 samples, 99.57%)</title><rect x="0.4333%" y="789" width="99.5667%" height="15" fill="rgb(233,195,10)" fg:x="24" fg:w="5515"/><text x="0.6833%" y="799.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (5,515 samples, 99.57%)</title><rect x="0.4333%" y="773" width="99.5667%" height="15" fill="rgb(254,105,3)" fg:x="24" fg:w="5515"/><text x="0.6833%" y="783.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (5,515 samples, 99.57%)</title><rect x="0.4333%" y="757" width="99.5667%" height="15" fill="rgb(221,225,9)" fg:x="24" fg:w="5515"/><text x="0.6833%" y="767.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (5,515 samples, 99.57%)</title><rect x="0.4333%" y="741" width="99.5667%" height="15" fill="rgb(224,227,45)" fg:x="24" fg:w="5515"/><text x="0.6833%" y="751.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (5,515 samples, 99.57%)</title><rect x="0.4333%" y="725" width="99.5667%" height="15" fill="rgb(229,198,43)" fg:x="24" fg:w="5515"/><text x="0.6833%" y="735.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (5,515 samples, 99.57%)</title><rect x="0.4333%" y="709" width="99.5667%" height="15" fill="rgb(206,209,35)" fg:x="24" fg:w="5515"/><text x="0.6833%" y="719.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (5,515 samples, 99.57%)</title><rect x="0.4333%" y="693" width="99.5667%" height="15" fill="rgb(245,195,53)" fg:x="24" fg:w="5515"/><text x="0.6833%" y="703.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (5,511 samples, 99.49%)</title><rect x="0.5055%" y="677" width="99.4945%" height="15" fill="rgb(240,92,26)" fg:x="28" fg:w="5511"/><text x="0.7555%" y="687.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (5,511 samples, 99.49%)</title><rect x="0.5055%" y="661" width="99.4945%" height="15" fill="rgb(207,40,23)" fg:x="28" fg:w="5511"/><text x="0.7555%" y="671.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (5,511 samples, 99.49%)</title><rect x="0.5055%" y="645" width="99.4945%" height="15" fill="rgb(223,111,35)" fg:x="28" fg:w="5511"/><text x="0.7555%" y="655.50">tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (5,511 samples, 99.49%)</title><rect x="0.5055%" y="629" width="99.4945%" height="15" fill="rgb(229,147,28)" fg:x="28" fg:w="5511"/><text x="0.7555%" y="639.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_if_work_pending (3 samples, 0.05%)</title><rect x="99.9458%" y="613" width="0.0542%" height="15" fill="rgb(211,29,28)" fg:x="5536" fg:w="3"/><text x="100.1958%" y="623.50"></text></g></svg></svg>